package jp.chikaharu11.instant_drumpad_tr808

import android.Manifest
import android.annotation.SuppressLint
import android.app.AlertDialog
import android.content.pm.PackageManager
import android.content.res.Configuration
import android.graphics.Color
import android.media.AudioAttributes
import android.media.MediaPlayer
import android.media.SoundPool
import android.net.Uri
import android.os.Bundle
import android.os.Handler
import android.os.Looper
import android.provider.MediaStore
import android.text.Editable
import android.text.Spannable
import android.text.SpannableStringBuilder
import android.text.TextWatcher
import android.text.style.ForegroundColorSpan
import android.util.DisplayMetrics
import android.util.Log
import android.view.*
import android.widget.*
import androidx.appcompat.app.AppCompatActivity
import androidx.core.app.ActivityCompat
import androidx.core.content.ContextCompat
import androidx.core.view.isInvisible
import androidx.core.view.isVisible
import androidx.lifecycle.lifecycleScope
import com.google.android.gms.ads.*
import com.google.android.gms.ads.interstitial.InterstitialAd
import com.google.android.gms.ads.interstitial.InterstitialAdLoadCallback
import com.google.android.gms.ads.rewarded.RewardedAd
import com.google.android.gms.ads.rewarded.RewardedAdLoadCallback
import com.google.android.gms.tasks.OnCompleteListener
import com.google.android.material.snackbar.Snackbar
import com.google.android.play.core.review.ReviewInfo
import com.google.android.play.core.review.ReviewManagerFactory
import com.google.android.play.core.tasks.Task
import com.google.firebase.messaging.FirebaseMessaging
import io.realm.Realm
import io.realm.RealmConfiguration
import io.realm.kotlin.createObject
import jp.chikaharu11.instant_drumpad_tr808.databinding.ActivityMainBinding
import kotlinx.coroutines.*
import java.util.*
import kotlin.concurrent.scheduleAtFixedRate
import kotlin.properties.Delegates


class MainActivity : AppCompatActivity(), CustomAdapterListener {

    private var mRewardedAd: RewardedAd? = null

    private lateinit var binding: ActivityMainBinding

    private lateinit var adViewContainer: FrameLayout
    private lateinit var admobmAdView: AdView

    private var interstitial: InterstitialAd? = null
    private val adInter = "ca-app-pub-3940256099942544/1033173712"

    private var mpDuration = 320
    private var mpDuration2 = 625
    private var mpDuration3 = 1294
    private var mpDuration4 = 1033
    private var mpDuration5 = 1465
    private var mpDuration6 = 1072
    private var mpDuration7 = 794
    private var mpDuration8 = 1065
    private var mpDuration9 = 1065
    private var mpDuration10 = 1137
    private var mpDuration11 = 773
    private var mpDuration12 = 1070
    private var mpDuration13 = 1050
    private var mpDuration14 = 608
    private var mpDuration15 = 55
    private var noteDuration = 1000.toLong()
    private var noteDurationConst = 1000.toLong()

    private var actionTitle = "BEAT 3 BPM110"
    private var padText1 = "clsd_hi_hat_01"
    private var padText2 = "open_hi_hat_01"
    private var padText3 = "tr_8_cymbal_01"
    private var padText4 = "snare_drum_05"
    private var padText5 = "low_tom_01"
    private var padText6 = "snare_drum_01"
    private var padText7 = "tr_909_bass_drum_02"
    private var padText8 = "mid_tom_01"
    private var padText9 = "bass_drum_short_01"
    private var padText10 = "claves_02"
    private var padText11 = "high_tom_01"
    private var padText12 = "high_conga_01"
    private var padText13 = "tr_909_cymbal_01"
    private var padText14 = "tr_909_cymbal_02"
    private var padText15 = "clap_01"

    private var stage1 = "BEAT 1 BPM120"
    private var stage2 = "BEAT 2 BPM120"
    private var stage3 = "HIPHOP 1 BPM80"
    private var stage4 = "REGGAETON 1 BPM90"
    private var stage5 = "BEAT 3 BPM110"
    private var stage6 = "BEAT 4 BPM100"
    private var stage7 = "BEAT 5 BPM90"
    private var stage8 = "ELECTRONICA 1 BPM90"
    private var stage9 = "BEAT 6 BPM100"
    private var stage10 = "DUBSTEP 1 BPM140"
    private var stage11 = "HOUSE 1 BPM130"
    private var stage12 = "DISCO 1 BPM110"
    private var stage13 = "TECHNO 1 BPM110"
    private var stage14 = "EUROBEAT 1 BPM130"
    private var stage15 = "2 STEP 1 BPM100"
    private var stage16 = "DRUM'N'BASS 1 BPM170"
    private var stageEx = "BEATS YOU CREATED"
    
    private var stage1s = SpannableStringBuilder(stage1)
    private var stage2s = SpannableStringBuilder(stage2)
    private var stage3s = SpannableStringBuilder(stage3)
    private var stage4s = SpannableStringBuilder(stage4)
    private var stage5s = SpannableStringBuilder(stage5)
    private var stage6s = SpannableStringBuilder(stage6)
    private var stage7s = SpannableStringBuilder(stage7)
    private var stage8s = SpannableStringBuilder(stage8)
    private var stage9s = SpannableStringBuilder(stage9)
    private var stage10s = SpannableStringBuilder(stage10)
    private var stage11s = SpannableStringBuilder(stage11)
    private var stage12s = SpannableStringBuilder(stage12)
    private var stage13s = SpannableStringBuilder(stage13)
    private var stage14s = SpannableStringBuilder(stage14)
    private var stage15s = SpannableStringBuilder(stage15)
    private var stage16s = SpannableStringBuilder(stage16)
    private var stageExs = SpannableStringBuilder(stageEx)

    private var gameCheck = "0"
    private var game1Result = R.color.white
    
    private var interCheck = true

    private var gridCheck = 0
    private var modeCheck = 0

    private var count = 5
    private var bpm = 10

    private var soundPoolVolume = 0.5f
    private var soundPoolTempo = 1.0f
    private var soundPoolVolume2 = 0.5f
    private var soundPoolTempo2 = 1.0f
    private var soundPoolVolume3 = 0.5f
    private var soundPoolTempo3 = 1.0f
    private var soundPoolVolume4 = 0.5f
    private var soundPoolTempo4 = 1.0f
    private var soundPoolVolume5 = 0.5f
    private var soundPoolTempo5 = 1.0f
    private var soundPoolVolume6 = 0.5f
    private var soundPoolTempo6 = 1.0f
    private var soundPoolVolume7 = 0.5f
    private var soundPoolTempo7 = 1.0f
    private var soundPoolVolume8 = 0.5f
    private var soundPoolTempo8 = 1.0f
    private var soundPoolVolume9 = 0.5f
    private var soundPoolTempo9 = 1.0f
    private var soundPoolVolume10 = 0.5f
    private var soundPoolTempo10 = 1.0f
    private var soundPoolVolume11 = 0.5f
    private var soundPoolTempo11 = 1.0f
    private var soundPoolVolume12 = 0.5f
    private var soundPoolTempo12 = 1.0f
    private var soundPoolVolume13 = 0.5f
    private var soundPoolTempo13 = 1.0f
    private var soundPoolVolume14 = 0.5f
    private var soundPoolTempo14 = 1.0f
    private var soundPoolVolume15 = 0.5f
    private var soundPoolTempo15 = 1.0f

    private var spvF = 5
    private var sptF = 10
    private var spvF2 = 5
    private var sptF2 = 10
    private var spvF3 = 5
    private var sptF3 = 10
    private var spvF4 = 5
    private var sptF4 = 10
    private var spvF5 = 5
    private var sptF5 = 10
    private var spvF6 = 5
    private var sptF6 = 10
    private var spvF7 = 5
    private var sptF7 = 10
    private var spvF8 = 5
    private var sptF8 = 10
    private var spvF9 = 5
    private var sptF9 = 10
    private var spvF10 = 5
    private var sptF10 = 10
    private var spvF11 = 5
    private var sptF11 = 10
    private var spvF12 = 5
    private var sptF12 = 10
    private var spvF13 = 5
    private var sptF13 = 10
    private var spvF14 = 5
    private var sptF14 = 10
    private var spvF15 = 5
    private var sptF15 = 10

    companion object {
        private const val READ_EXTERNAL_STORAGE_PERMISSION_REQUEST_CODE = 41
        private const val RECORD_AUDIO_PERMISSION_REQUEST_CODE = 42
    }

    @SuppressLint("Range")
    fun selectEX() {
        if (!isReadExternalStoragePermissionGranted()) {
            requestReadExternalStoragePermission()
        } else {
            tSoundList.clear()
            val audioUri = MediaStore.Audio.Media.EXTERNAL_CONTENT_URI
            val cursor = contentResolver.query(audioUri, null, null, null, null)
            cursor!!.moveToFirst()
            val path: Array<String?> = arrayOfNulls(cursor.count)
            for (i in path.indices) {
                path[i] = cursor.getString(cursor.getColumnIndex("_data"))
                tSoundList.add(SoundList(path[i].toString()))
                cursor.moveToNext()
            }

            cursor.close()
        }
    }

    private lateinit var soundPool: SoundPool

    private lateinit var mp: MediaPlayer

    private lateinit var getmpDuration: MediaPlayer

    private lateinit var aCustomAdapter: CustomAdapter
    private lateinit var bCustomAdapter: CustomAdapter
    private lateinit var cCustomAdapter: CustomAdapter
    private lateinit var dCustomAdapter: CustomAdapter
    private lateinit var eCustomAdapter: CustomAdapter
    private lateinit var fCustomAdapter: CustomAdapter
    private lateinit var gCustomAdapter: CustomAdapter
    private lateinit var hCustomAdapter: CustomAdapter
    private lateinit var iCustomAdapter: CustomAdapter
    private lateinit var jCustomAdapter: CustomAdapter
    private lateinit var kCustomAdapter: CustomAdapter
    private lateinit var lCustomAdapter: CustomAdapter

    private lateinit var nCustomAdapter: CustomAdapter
    private lateinit var oCustomAdapter: CustomAdapter
    private lateinit var pCustomAdapter: CustomAdapter
    private lateinit var qCustomAdapter: CustomAdapter
    private lateinit var rCustomAdapter: CustomAdapter

    private lateinit var sCustomAdapter: CustomAdapter
    private lateinit var tCustomAdapter: CustomAdapter

    private lateinit var aSoundList: MutableList<SoundList>
    private lateinit var bSoundList: MutableList<SoundList>
    private lateinit var cSoundList: MutableList<SoundList>
    private lateinit var dSoundList: MutableList<SoundList>
    private lateinit var eSoundList: MutableList<SoundList>
    private lateinit var fSoundList: MutableList<SoundList>
    private lateinit var gSoundList: MutableList<SoundList>
    private lateinit var hSoundList: MutableList<SoundList>
    private lateinit var iSoundList: MutableList<SoundList>
    private lateinit var jSoundList: MutableList<SoundList>
    private lateinit var kSoundList: MutableList<SoundList>
    private lateinit var lSoundList: MutableList<SoundList>

    private lateinit var nSoundList: MutableList<SoundList>
    private lateinit var oSoundList: MutableList<SoundList>
    private lateinit var pSoundList: MutableList<SoundList>
    private lateinit var qSoundList: MutableList<SoundList>
    private lateinit var rSoundList: MutableList<SoundList>

    private lateinit var sSoundList: MutableList<SoundList>
    private lateinit var tSoundList: MutableList<SoundList>

    private lateinit var mRealm: Realm

    private var sound1 = 0
    private var sound2 = 0
    private var sound3 = 0
    private var sound4 = 0
    private var sound5 = 0
    private var sound6 = 0
    private var sound7 = 0
    private var sound8 = 0
    private var sound9 = 0
    private var sound10 = 0
    private var sound11 = 0
    private var sound12 = 0
    private var sound13 = 0
    private var sound14 = 0
    private var sound15 = 0
    private var sound16 = 0
    private var sound17 = 0
    private var sound18 = 0

    private var paste = 0

    private var buttonA = 0
    private var buttonB = 0

    private var adCheck = 0

    private var padCheck = 53

    private var colorCheck = 1

    private var noteCount = 0

    private var sequencerCount = 0

    private var sequencerSize = 0

    private var sequencerMaxSize = 0

    private var trackCount = 0

    private var sequencerBpm: Long = 110

    private var padSequence = 0

    private var justification = 0

    private var gameCount = 1

    private var clearCount = 0

    private var score = 0
    private var missScore = 0
    private var hitScore = 0
    private var maxScore = 0
    private var maxScoreA1 = 0
    private var maxScoreA2 = 0
    private var maxScoreA3 = 0
    private var maxScoreA4 = 0
    private var maxScoreA5 = 0
    private var maxScoreA6 = 0
    private var maxScoreA7 = 0
    private var maxScoreA8 = 0

    private var duplicate = 0
    private var duplicate2 = 0
    private var duplicate3 = 0
    private var duplicate4 = 0
    private var duplicate5 = 0
    private var duplicate6 = 0
    private var duplicate7 = 0
    private var duplicate8 = 0
    private var duplicate9 = 0
    private var duplicate10 = 0
    private var duplicate11 = 0
    private var duplicate12 = 0
    private var duplicate13 = 0
    private var duplicate14 = 0
    private var duplicate15 = 0
    
    private var mode = 0

    val handler = Handler(Looper.getMainLooper())

    private var a1 = mutableListOf(0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0)
    private var a2 = mutableListOf(0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0)
    private var a3 = mutableListOf(0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0)
    private var a4 = mutableListOf(0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0)
    private var a5 = mutableListOf(0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0)
    private var a6 = mutableListOf(0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0)
    private var a7 = mutableListOf(0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0)
    private var a8 = mutableListOf(0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0)
    private var a9 = mutableListOf(0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0)
    private var a10 = mutableListOf(0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0)
    private var a11 = mutableListOf(0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0)
    private var a12 = mutableListOf(0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0)
    private var a13 = mutableListOf(0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0)
    private var a14 = mutableListOf(0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0)
    private var a15 = mutableListOf(0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0)
    private var a16 = mutableListOf(0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0)
    private var b1 = mutableListOf(0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0)
    private var b2 = mutableListOf(0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0)
    private var b3 = mutableListOf(0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0)
    private var b4 = mutableListOf(0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0)
    private var b5 = mutableListOf(0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0)
    private var b6 = mutableListOf(0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0)
    private var b7 = mutableListOf(0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0)
    private var b8 = mutableListOf(0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0)
    private var b9 = mutableListOf(0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0)
    private var b10 = mutableListOf(0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0)
    private var b11 = mutableListOf(0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0)
    private var b12 = mutableListOf(0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0)
    private var b13 = mutableListOf(0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0)
    private var b14 = mutableListOf(0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0)
    private var b15 = mutableListOf(0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0)
    private var b16 = mutableListOf(0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0)
    private var c1 = mutableListOf(0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0)
    private var c2 = mutableListOf(0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0)
    private var c3 = mutableListOf(0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0)
    private var c4 = mutableListOf(0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0)
    private var c5 = mutableListOf(0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0)
    private var c6 = mutableListOf(0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0)
    private var c7 = mutableListOf(0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0)
    private var c8 = mutableListOf(0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0)
    private var c9 = mutableListOf(0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0)
    private var c10 = mutableListOf(0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0)
    private var c11 = mutableListOf(0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0)
    private var c12 = mutableListOf(0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0)
    private var c13 = mutableListOf(0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0)
    private var c14 = mutableListOf(0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0)
    private var c15 = mutableListOf(0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0)
    private var c16 = mutableListOf(0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0)
    private var d1 = mutableListOf(0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0)
    private var d2 = mutableListOf(0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0)
    private var d3 = mutableListOf(0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0)
    private var d4 = mutableListOf(0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0)
    private var d5 = mutableListOf(0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0)
    private var d6 = mutableListOf(0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0)
    private var d7 = mutableListOf(0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0)
    private var d8 = mutableListOf(0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0)
    private var d9 = mutableListOf(0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0)
    private var d10 = mutableListOf(0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0)
    private var d11 = mutableListOf(0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0)
    private var d12 = mutableListOf(0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0)
    private var d13 = mutableListOf(0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0)
    private var d14 = mutableListOf(0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0)
    private var d15 = mutableListOf(0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0)
    private var d16 = mutableListOf(0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0)
    private var e1 = mutableListOf(0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0)
    private var e2 = mutableListOf(0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0)
    private var e3 = mutableListOf(0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0)
    private var e4 = mutableListOf(0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0)
    private var e5 = mutableListOf(0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0)
    private var e6 = mutableListOf(0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0)
    private var e7 = mutableListOf(0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0)
    private var e8 = mutableListOf(0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0)
    private var e9 = mutableListOf(0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0)
    private var e10 = mutableListOf(0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0)
    private var e11 = mutableListOf(0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0)
    private var e12 = mutableListOf(0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0)
    private var e13 = mutableListOf(0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0)
    private var e14 = mutableListOf(0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0)
    private var e15 = mutableListOf(0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0)
    private var e16 = mutableListOf(0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0)
    private var f1 = mutableListOf(0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0)
    private var f2 = mutableListOf(0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0)
    private var f3 = mutableListOf(0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0)
    private var f4 = mutableListOf(0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0)
    private var f5 = mutableListOf(0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0)
    private var f6 = mutableListOf(0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0)
    private var f7 = mutableListOf(0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0)
    private var f8 = mutableListOf(0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0)
    private var f9 = mutableListOf(0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0)
    private var f10 = mutableListOf(0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0)
    private var f11 = mutableListOf(0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0)
    private var f12 = mutableListOf(0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0)
    private var f13 = mutableListOf(0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0)
    private var f14 = mutableListOf(0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0)
    private var f15 = mutableListOf(0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0)
    private var f16 = mutableListOf(0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0)
    private var g1 = mutableListOf(0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0)
    private var g2 = mutableListOf(0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0)
    private var g3 = mutableListOf(0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0)
    private var g4 = mutableListOf(0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0)
    private var g5 = mutableListOf(0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0)
    private var g6 = mutableListOf(0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0)
    private var g7 = mutableListOf(0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0)
    private var g8 = mutableListOf(0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0)
    private var g9 = mutableListOf(0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0)
    private var g10 = mutableListOf(0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0)
    private var g11 = mutableListOf(0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0)
    private var g12 = mutableListOf(0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0)
    private var g13 = mutableListOf(0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0)
    private var g14 = mutableListOf(0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0)
    private var g15 = mutableListOf(0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0)
    private var g16 = mutableListOf(0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0)
    private var h1 = mutableListOf(0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0)
    private var h2 = mutableListOf(0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0)
    private var h3 = mutableListOf(0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0)
    private var h4 = mutableListOf(0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0)
    private var h5 = mutableListOf(0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0)
    private var h6 = mutableListOf(0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0)
    private var h7 = mutableListOf(0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0)
    private var h8 = mutableListOf(0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0)
    private var h9 = mutableListOf(0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0)
    private var h10 = mutableListOf(0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0)
    private var h11 = mutableListOf(0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0)
    private var h12 = mutableListOf(0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0)
    private var h13 = mutableListOf(0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0)
    private var h14 = mutableListOf(0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0)
    private var h15 = mutableListOf(0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0)
    private var h16 = mutableListOf(0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0)
    private var i1 = mutableListOf(0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0)
    private var i2 = mutableListOf(0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0)
    private var i3 = mutableListOf(0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0)
    private var i4 = mutableListOf(0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0)
    private var i5 = mutableListOf(0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0)
    private var i6 = mutableListOf(0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0)
    private var i7 = mutableListOf(0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0)
    private var i8 = mutableListOf(0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0)
    private var i9 = mutableListOf(0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0)
    private var i10 = mutableListOf(0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0)
    private var i11 = mutableListOf(0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0)
    private var i12 = mutableListOf(0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0)
    private var i13 = mutableListOf(0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0)
    private var i14 = mutableListOf(0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0)
    private var i15 = mutableListOf(0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0)
    private var i16 = mutableListOf(0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0)
    private var j1 = mutableListOf(0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0)
    private var j2 = mutableListOf(0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0)
    private var j3 = mutableListOf(0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0)
    private var j4 = mutableListOf(0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0)
    private var j5 = mutableListOf(0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0)
    private var j6 = mutableListOf(0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0)
    private var j7 = mutableListOf(0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0)
    private var j8 = mutableListOf(0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0)
    private var j9 = mutableListOf(0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0)
    private var j10 = mutableListOf(0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0)
    private var j11 = mutableListOf(0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0)
    private var j12 = mutableListOf(0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0)
    private var j13 = mutableListOf(0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0)
    private var j14 = mutableListOf(0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0)
    private var j15 = mutableListOf(0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0)
    private var j16 = mutableListOf(0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0)
    private var k1 = mutableListOf(0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0)
    private var k2 = mutableListOf(0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0)
    private var k3 = mutableListOf(0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0)
    private var k4 = mutableListOf(0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0)
    private var k5 = mutableListOf(0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0)
    private var k6 = mutableListOf(0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0)
    private var k7 = mutableListOf(0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0)
    private var k8 = mutableListOf(0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0)
    private var k9 = mutableListOf(0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0)
    private var k10 = mutableListOf(0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0)
    private var k11 = mutableListOf(0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0)
    private var k12 = mutableListOf(0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0)
    private var k13 = mutableListOf(0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0)
    private var k14 = mutableListOf(0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0)
    private var k15 = mutableListOf(0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0)
    private var k16 = mutableListOf(0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0)
    private var l1 = mutableListOf(0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0)
    private var l2 = mutableListOf(0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0)
    private var l3 = mutableListOf(0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0)
    private var l4 = mutableListOf(0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0)
    private var l5 = mutableListOf(0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0)
    private var l6 = mutableListOf(0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0)
    private var l7 = mutableListOf(0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0)
    private var l8 = mutableListOf(0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0)
    private var l9 = mutableListOf(0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0)
    private var l10 = mutableListOf(0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0)
    private var l11 = mutableListOf(0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0)
    private var l12 = mutableListOf(0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0)
    private var l13 = mutableListOf(0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0)
    private var l14 = mutableListOf(0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0)
    private var l15 = mutableListOf(0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0)
    private var l16 = mutableListOf(0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0)
    private var m1 = mutableListOf(0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0)
    private var m2 = mutableListOf(0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0)
    private var m3 = mutableListOf(0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0)
    private var m4 = mutableListOf(0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0)
    private var m5 = mutableListOf(0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0)
    private var m6 = mutableListOf(0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0)
    private var m7 = mutableListOf(0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0)
    private var m8 = mutableListOf(0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0)
    private var m9 = mutableListOf(0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0)
    private var m10 = mutableListOf(0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0)
    private var m11 = mutableListOf(0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0)
    private var m12 = mutableListOf(0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0)
    private var m13 = mutableListOf(0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0)
    private var m14 = mutableListOf(0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0)
    private var m15 = mutableListOf(0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0)
    private var m16 = mutableListOf(0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0)
    private var n1 = mutableListOf(0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0)
    private var n2 = mutableListOf(0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0)
    private var n3 = mutableListOf(0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0)
    private var n4 = mutableListOf(0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0)
    private var n5 = mutableListOf(0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0)
    private var n6 = mutableListOf(0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0)
    private var n7 = mutableListOf(0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0)
    private var n8 = mutableListOf(0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0)
    private var n9 = mutableListOf(0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0)
    private var n10 = mutableListOf(0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0)
    private var n11 = mutableListOf(0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0)
    private var n12 = mutableListOf(0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0)
    private var n13 = mutableListOf(0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0)
    private var n14 = mutableListOf(0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0)
    private var n15 = mutableListOf(0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0)
    private var n16 = mutableListOf(0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0)
    private var o1 = mutableListOf(0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0)
    private var o2 = mutableListOf(0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0)
    private var o3 = mutableListOf(0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0)
    private var o4 = mutableListOf(0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0)
    private var o5 = mutableListOf(0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0)
    private var o6 = mutableListOf(0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0)
    private var o7 = mutableListOf(0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0)
    private var o8 = mutableListOf(0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0)
    private var o9 = mutableListOf(0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0)
    private var o10 = mutableListOf(0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0)
    private var o11 = mutableListOf(0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0)
    private var o12 = mutableListOf(0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0)
    private var o13 = mutableListOf(0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0)
    private var o14 = mutableListOf(0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0)
    private var o15 = mutableListOf(0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0)
    private var o16 = mutableListOf(0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0)
    private var zero = mutableListOf(0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0)

    private var sia1 = ""
    private var sia2 = ""
    private var sia3 = ""
    private var sia4 = ""
    private var sia5 = ""
    private var sia6 = ""
    private var sia7 = ""
    private var sia8 = ""
    private var sia9 = ""
    private var sia10 = ""
    private var sia11 = ""
    private var sia12 = ""
    private var sia13 = ""
    private var sia14 = ""
    private var sia15 = ""
    private var sia16 = ""
    private var sib1 = ""
    private var sib2 = ""
    private var sib3 = ""
    private var sib4 = ""
    private var sib5 = ""
    private var sib6 = ""
    private var sib7 = ""
    private var sib8 = ""
    private var sib9 = ""
    private var sib10 = ""
    private var sib11 = ""
    private var sib12 = ""
    private var sib13 = ""
    private var sib14 = ""
    private var sib15 = ""
    private var sib16 = ""
    private var sic1 = ""
    private var sic2 = ""
    private var sic3 = ""
    private var sic4 = ""
    private var sic5 = ""
    private var sic6 = ""
    private var sic7 = ""
    private var sic8 = ""
    private var sic9 = ""
    private var sic10 = ""
    private var sic11 = ""
    private var sic12 = ""
    private var sic13 = ""
    private var sic14 = ""
    private var sic15 = ""
    private var sic16 = ""
    private var sid1 = ""
    private var sid2 = ""
    private var sid3 = ""
    private var sid4 = ""
    private var sid5 = ""
    private var sid6 = ""
    private var sid7 = ""
    private var sid8 = ""
    private var sid9 = ""
    private var sid10 = ""
    private var sid11 = ""
    private var sid12 = ""
    private var sid13 = ""
    private var sid14 = ""
    private var sid15 = ""
    private var sid16 = ""
    private var sie1 = ""
    private var sie2 = ""
    private var sie3 = ""
    private var sie4 = ""
    private var sie5 = ""
    private var sie6 = ""
    private var sie7 = ""
    private var sie8 = ""
    private var sie9 = ""
    private var sie10 = ""
    private var sie11 = ""
    private var sie12 = ""
    private var sie13 = ""
    private var sie14 = ""
    private var sie15 = ""
    private var sie16 = ""

    private var pitchArray = mutableListOf(2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20)
    private var volumeArray = mutableListOf(1,2,3,4,5,6,7,8,9,10)
    private var sequenceArray = mutableListOf(1,0,0,0)
    private var sequenceArray5 = mutableListOf(1,0,0,0,0)
    private var sequenceArray10 = mutableListOf(1,0,0,0,0,0)
    private var sequenceArray15 = mutableListOf(1,0,0,0,0,0,0)

    var timer: Timer? = null

    private var se1 by Delegates.observable(0) { _, _, _ ->
        soundPool.play(sound1, soundPoolVolume, soundPoolVolume, 1, 0, soundPoolTempo)
    }
    private var se2 by Delegates.observable(0) { _, _, _ ->
        soundPool.play(sound4, soundPoolVolume4, soundPoolVolume4, 1, 0, soundPoolTempo4)
    }
    private var se3 by Delegates.observable(0) { _, _, _ ->
        soundPool.play(sound7, soundPoolVolume7, soundPoolVolume7, 1, 0, soundPoolTempo7)
    }
    private var se4 by Delegates.observable(0) { _, _, _ ->
        soundPool.play(sound10, soundPoolVolume10, soundPoolVolume10, 1, 0, soundPoolTempo10)
    }
    private var se5 by Delegates.observable(0) { _, _, _ ->
        soundPool.play(sound13, soundPoolVolume13, soundPoolVolume13, 1, 0, soundPoolTempo13)
    }

    private var editBpm: Long by Delegates.observable(0) { _, _, _ ->
        when (editBpm) {
            in 30..240 -> sequencerBpm = editBpm
            else -> Toast.makeText(applicationContext, R.string.elsebpm, Toast.LENGTH_SHORT).show()
        }
    }

    private fun tapTiming(view: Int, ripple: Int) {
        findViewById<View>(view).findViewById<ImageView>(R.id.imageView).setImageResource(R.drawable.my_ripple2)
        handler.postDelayed({
            if (colorCheck == 1) {
                findViewById<View>(view).findViewById<ImageView>(R.id.imageView).setImageResource(ripple)
            } else {
                findViewById<View>(view).findViewById<ImageView>(R.id.imageView).setImageResource(R.drawable.my_ripple)
            }
        }, 12000/ sequencerBpm)
    }

    private fun soundChangeEffect(view: Int, ripple: Int) {
        findViewById<View>(view).findViewById<ImageView>(R.id.imageView).setImageResource(R.drawable.my_ripple2)
        handler.postDelayed({
            if (colorCheck == 1) {
                findViewById<View>(view).findViewById<ImageView>(R.id.imageView).setImageResource(ripple)
            } else {
                findViewById<View>(view).findViewById<ImageView>(R.id.imageView).setImageResource(R.drawable.my_ripple)
            }
        }, 800)
    }
    

    @SuppressLint("SetTextI18n")
    private fun sequencerPlay() {
        findViewById<View>(R.id.bpm).findViewById<EditText>(R.id.bpmCount).isEnabled = false
        sequencerSize = 0
            runBlocking {
                val job1 = launch {
                    soundPool.play(sound17, 1.0f, 1.0f, 0, 0, 1.0f)
                    soundPool.play(sound17, 1.0f, 1.0f, 0, 0, 1.0f)
                    soundPool.play(sound17, 1.0f, 1.0f, 0, 0, 1.0f)
                    delay(15000/ sequencerBpm)
                }
                job1.join()
            }
        timer = Timer()
        timer!!.scheduleAtFixedRate(0, 15000/ sequencerBpm) {
            sequencerCount++
            lifecycleScope.launch {
            when (sequencerCount) {
                    1 -> {
                        if (a1[sequencerSize] == 1) { launch { soundPool.play(sound1, soundPoolVolume, soundPoolVolume, 1, 0, soundPoolTempo)
                            tapTiming(R.id.include_main_view, R.drawable.my_ripple3) } }
                        if (b1[sequencerSize] == 1) { launch { soundPool.play(sound4, soundPoolVolume4, soundPoolVolume4, 1, 0, soundPoolTempo4)
                            tapTiming(R.id.include_main_view4, R.drawable.my_ripple4)} }
                        if (c1[sequencerSize] == 1 && trackCount >= 3) { launch { soundPool.play(sound7, soundPoolVolume7, soundPoolVolume7, 1, 0, soundPoolTempo7)
                            tapTiming(R.id.include_main_view7, R.drawable.my_ripple5)} }
                        if (d1[sequencerSize] == 1 && trackCount >= 4) { launch { soundPool.play(sound10, soundPoolVolume10, soundPoolVolume10, 1, 0, soundPoolTempo10)
                            tapTiming(R.id.include_main_view10, R.drawable.my_ripple6)} }
                        if (e1[sequencerSize] == 1 && trackCount >= 5) { launch { soundPool.play(sound13, soundPoolVolume13, soundPoolVolume13, 1, 0, soundPoolTempo13)
                            tapTiming(R.id.include_main_view13, R.drawable.my_ripple7)} }
                        if (f1[sequencerSize] == 1 && trackCount >= 6) { launch { soundPool.play(sound2, soundPoolVolume2, soundPoolVolume2, 1, 0, soundPoolTempo2)
                            tapTiming(R.id.include_main_view2, R.drawable.my_ripple3)} }
                        if (g1[sequencerSize] == 1 && trackCount >= 7) { launch { soundPool.play(sound5, soundPoolVolume5, soundPoolVolume5, 1, 0, soundPoolTempo5)
                            tapTiming(R.id.include_main_view5, R.drawable.my_ripple4)} }
                        if (h1[sequencerSize] == 1 && trackCount >= 8) { launch { soundPool.play(sound8, soundPoolVolume8, soundPoolVolume8, 1, 0, soundPoolTempo8)
                            tapTiming(R.id.include_main_view8, R.drawable.my_ripple5)} }
                        if (i1[sequencerSize] == 1 && trackCount >= 9) { launch { soundPool.play(sound11, soundPoolVolume11, soundPoolVolume11, 1, 0, soundPoolTempo11)
                            tapTiming(R.id.include_main_view11, R.drawable.my_ripple6)} }
                        if (j1[sequencerSize] == 1 && trackCount >= 10) { launch { soundPool.play(sound14, soundPoolVolume14, soundPoolVolume14, 1, 0, soundPoolTempo14)
                            tapTiming(R.id.include_main_view14, R.drawable.my_ripple7)} }
                        if (k1[sequencerSize] == 1 && trackCount >= 11) { launch { soundPool.play(sound3, soundPoolVolume3, soundPoolVolume3, 1, 0, soundPoolTempo3)
                            tapTiming(R.id.include_main_view3, R.drawable.my_ripple3)} }
                        if (l1[sequencerSize] == 1 && trackCount >= 12) { launch { soundPool.play(sound6, soundPoolVolume6, soundPoolVolume6, 1, 0, soundPoolTempo6)
                            tapTiming(R.id.include_main_view6, R.drawable.my_ripple4)} }
                        if (m1[sequencerSize] == 1 && trackCount >= 13) { launch { soundPool.play(sound9, soundPoolVolume9, soundPoolVolume9, 1, 0, soundPoolTempo9)
                            tapTiming(R.id.include_main_view9, R.drawable.my_ripple5)} }
                        if (n1[sequencerSize] == 1 && trackCount >= 14) { launch { soundPool.play(sound12, soundPoolVolume12, soundPoolVolume12, 1, 0, soundPoolTempo12)
                            tapTiming(R.id.include_main_view12, R.drawable.my_ripple6)} }
                        if (o1[sequencerSize] == 1 && trackCount >= 15) { launch { soundPool.play(sound15, soundPoolVolume15, soundPoolVolume15, 1, 0, soundPoolTempo15)
                            tapTiming(R.id.include_main_view15, R.drawable.my_ripple7)} }
                    launch { findViewById<View>(R.id.sequencer_view).findViewById<TextView>(R.id.number16).setBackgroundColor(Color.parseColor("#5A5A66")) }
                    launch { findViewById<View>(R.id.sequencer_view).findViewById<TextView>(R.id.number).setBackgroundColor(Color.parseColor("#FFFFFF")) }
                }
                    2 -> {
                        if (a2[sequencerSize] == 1) { launch { soundPool.play(sound1, soundPoolVolume, soundPoolVolume, 1, 0, soundPoolTempo)
                            tapTiming(R.id.include_main_view, R.drawable.my_ripple3) } }
                        if (b2[sequencerSize] == 1) { launch { soundPool.play(sound4, soundPoolVolume4, soundPoolVolume4, 1, 0, soundPoolTempo4)
                            tapTiming(R.id.include_main_view4, R.drawable.my_ripple4)} }
                        if (c2[sequencerSize] == 1 && trackCount >= 3) { launch { soundPool.play(sound7, soundPoolVolume7, soundPoolVolume7, 1, 0, soundPoolTempo7)
                            tapTiming(R.id.include_main_view7, R.drawable.my_ripple5)} }
                        if (d2[sequencerSize] == 1 && trackCount >= 4) { launch { soundPool.play(sound10, soundPoolVolume10, soundPoolVolume10, 1, 0, soundPoolTempo10)
                            tapTiming(R.id.include_main_view10, R.drawable.my_ripple6)} }
                        if (e2[sequencerSize] == 1 && trackCount >= 5) { launch { soundPool.play(sound13, soundPoolVolume13, soundPoolVolume13, 1, 0, soundPoolTempo13)
                            tapTiming(R.id.include_main_view13, R.drawable.my_ripple7)} }
                        if (f2[sequencerSize] == 1 && trackCount >= 6) { launch { soundPool.play(sound2, soundPoolVolume2, soundPoolVolume2, 1, 0, soundPoolTempo2)
                            tapTiming(R.id.include_main_view2, R.drawable.my_ripple3)} }
                        if (g2[sequencerSize] == 1 && trackCount >= 7) { launch { soundPool.play(sound5, soundPoolVolume5, soundPoolVolume5, 1, 0, soundPoolTempo5)
                            tapTiming(R.id.include_main_view5, R.drawable.my_ripple4)} }
                        if (h2[sequencerSize] == 1 && trackCount >= 8) { launch { soundPool.play(sound8, soundPoolVolume8, soundPoolVolume8, 1, 0, soundPoolTempo8)
                            tapTiming(R.id.include_main_view8, R.drawable.my_ripple5)} }
                        if (i2[sequencerSize] == 1 && trackCount >= 9) { launch { soundPool.play(sound11, soundPoolVolume11, soundPoolVolume11, 1, 0, soundPoolTempo11)
                            tapTiming(R.id.include_main_view11, R.drawable.my_ripple6)} }
                        if (j2[sequencerSize] == 1 && trackCount >= 10) { launch { soundPool.play(sound14, soundPoolVolume14, soundPoolVolume14, 1, 0, soundPoolTempo14)
                            tapTiming(R.id.include_main_view14, R.drawable.my_ripple7)} }
                        if (k2[sequencerSize] == 1 && trackCount >= 11) { launch { soundPool.play(sound3, soundPoolVolume3, soundPoolVolume3, 1, 0, soundPoolTempo3)
                            tapTiming(R.id.include_main_view3, R.drawable.my_ripple3)} }
                        if (l2[sequencerSize] == 1 && trackCount >= 12) { launch { soundPool.play(sound6, soundPoolVolume6, soundPoolVolume6, 1, 0, soundPoolTempo6)
                            tapTiming(R.id.include_main_view6, R.drawable.my_ripple4)} }
                        if (m2[sequencerSize] == 1 && trackCount >= 13) { launch { soundPool.play(sound9, soundPoolVolume9, soundPoolVolume9, 1, 0, soundPoolTempo9)
                            tapTiming(R.id.include_main_view9, R.drawable.my_ripple5)} }
                        if (n2[sequencerSize] == 1 && trackCount >= 14) { launch { soundPool.play(sound12, soundPoolVolume12, soundPoolVolume12, 1, 0, soundPoolTempo12)
                            tapTiming(R.id.include_main_view12, R.drawable.my_ripple6)} }
                        if (o2[sequencerSize] == 1 && trackCount >= 15) { launch { soundPool.play(sound15, soundPoolVolume15, soundPoolVolume15, 1, 0, soundPoolTempo15)
                            tapTiming(R.id.include_main_view15, R.drawable.my_ripple7)} }
                    launch { findViewById<View>(R.id.sequencer_view).findViewById<TextView>(R.id.number).setBackgroundColor(Color.parseColor("#5A5A66")) }
                    launch { findViewById<View>(R.id.sequencer_view).findViewById<TextView>(R.id.number2).setBackgroundColor(Color.parseColor("#FFFFFF")) }

                }
                    3 -> {
                        if (a3[sequencerSize] == 1) { launch { soundPool.play(sound1, soundPoolVolume, soundPoolVolume, 1, 0, soundPoolTempo)
                            tapTiming(R.id.include_main_view, R.drawable.my_ripple3) } }
                        if (b3[sequencerSize] == 1) { launch { soundPool.play(sound4, soundPoolVolume4, soundPoolVolume4, 1, 0, soundPoolTempo4)
                            tapTiming(R.id.include_main_view4, R.drawable.my_ripple4)} }
                        if (c3[sequencerSize] == 1 && trackCount >= 3) { launch { soundPool.play(sound7, soundPoolVolume7, soundPoolVolume7, 1, 0, soundPoolTempo7)
                            tapTiming(R.id.include_main_view7, R.drawable.my_ripple5)} }
                        if (d3[sequencerSize] == 1 && trackCount >= 4) { launch { soundPool.play(sound10, soundPoolVolume10, soundPoolVolume10, 1, 0, soundPoolTempo10)
                            tapTiming(R.id.include_main_view10, R.drawable.my_ripple6)} }
                        if (e3[sequencerSize] == 1 && trackCount >= 5) { launch { soundPool.play(sound13, soundPoolVolume13, soundPoolVolume13, 1, 0, soundPoolTempo13)
                            tapTiming(R.id.include_main_view13, R.drawable.my_ripple7)} }
                        if (f3[sequencerSize] == 1 && trackCount >= 6) { launch { soundPool.play(sound2, soundPoolVolume2, soundPoolVolume2, 1, 0, soundPoolTempo2)
                            tapTiming(R.id.include_main_view2, R.drawable.my_ripple3)} }
                        if (g3[sequencerSize] == 1 && trackCount >= 7) { launch { soundPool.play(sound5, soundPoolVolume5, soundPoolVolume5, 1, 0, soundPoolTempo5)
                            tapTiming(R.id.include_main_view5, R.drawable.my_ripple4)} }
                        if (h3[sequencerSize] == 1 && trackCount >= 8) { launch { soundPool.play(sound8, soundPoolVolume8, soundPoolVolume8, 1, 0, soundPoolTempo8)
                            tapTiming(R.id.include_main_view8, R.drawable.my_ripple5)} }
                        if (i3[sequencerSize] == 1 && trackCount >= 9) { launch { soundPool.play(sound11, soundPoolVolume11, soundPoolVolume11, 1, 0, soundPoolTempo11)
                            tapTiming(R.id.include_main_view11, R.drawable.my_ripple6)} }
                        if (j3[sequencerSize] == 1 && trackCount >= 10) { launch { soundPool.play(sound14, soundPoolVolume14, soundPoolVolume14, 1, 0, soundPoolTempo14)
                            tapTiming(R.id.include_main_view14, R.drawable.my_ripple7)} }
                        if (k3[sequencerSize] == 1 && trackCount >= 11) { launch { soundPool.play(sound3, soundPoolVolume3, soundPoolVolume3, 1, 0, soundPoolTempo3)
                            tapTiming(R.id.include_main_view3, R.drawable.my_ripple3)} }
                        if (l3[sequencerSize] == 1 && trackCount >= 12) { launch { soundPool.play(sound6, soundPoolVolume6, soundPoolVolume6, 1, 0, soundPoolTempo6)
                            tapTiming(R.id.include_main_view6, R.drawable.my_ripple4)} }
                        if (m3[sequencerSize] == 1 && trackCount >= 13) { launch { soundPool.play(sound9, soundPoolVolume9, soundPoolVolume9, 1, 0, soundPoolTempo9)
                            tapTiming(R.id.include_main_view9, R.drawable.my_ripple5)} }
                        if (n3[sequencerSize] == 1 && trackCount >= 14) { launch { soundPool.play(sound12, soundPoolVolume12, soundPoolVolume12, 1, 0, soundPoolTempo12)
                            tapTiming(R.id.include_main_view12, R.drawable.my_ripple6)} }
                        if (o3[sequencerSize] == 1 && trackCount >= 15) { launch { soundPool.play(sound15, soundPoolVolume15, soundPoolVolume15, 1, 0, soundPoolTempo15)
                            tapTiming(R.id.include_main_view15, R.drawable.my_ripple7)} }
                    launch { findViewById<View>(R.id.sequencer_view).findViewById<TextView>(R.id.number2).setBackgroundColor(Color.parseColor("#5A5A66")) }
                    launch { findViewById<View>(R.id.sequencer_view).findViewById<TextView>(R.id.number3).setBackgroundColor(Color.parseColor("#FFFFFF")) }
                }
                4 -> {
                    if (a4[sequencerSize] == 1) { launch { soundPool.play(sound1, soundPoolVolume, soundPoolVolume, 1, 0, soundPoolTempo)
                        tapTiming(R.id.include_main_view, R.drawable.my_ripple3) } }
                    if (b4[sequencerSize] == 1) { launch { soundPool.play(sound4, soundPoolVolume4, soundPoolVolume4, 1, 0, soundPoolTempo4)
                        tapTiming(R.id.include_main_view4, R.drawable.my_ripple4)} }
                    if (c4[sequencerSize] == 1 && trackCount >= 3) { launch { soundPool.play(sound7, soundPoolVolume7, soundPoolVolume7, 1, 0, soundPoolTempo7)
                        tapTiming(R.id.include_main_view7, R.drawable.my_ripple5)} }
                    if (d4[sequencerSize] == 1 && trackCount >= 4) { launch { soundPool.play(sound10, soundPoolVolume10, soundPoolVolume10, 1, 0, soundPoolTempo10)
                        tapTiming(R.id.include_main_view10, R.drawable.my_ripple6)} }
                    if (e4[sequencerSize] == 1 && trackCount >= 5) { launch { soundPool.play(sound13, soundPoolVolume13, soundPoolVolume13, 1, 0, soundPoolTempo13)
                        tapTiming(R.id.include_main_view13, R.drawable.my_ripple7)} }
                    if (f4[sequencerSize] == 1 && trackCount >= 6) { launch { soundPool.play(sound2, soundPoolVolume2, soundPoolVolume2, 1, 0, soundPoolTempo2)
                        tapTiming(R.id.include_main_view2, R.drawable.my_ripple3)} }
                    if (g4[sequencerSize] == 1 && trackCount >= 7) { launch { soundPool.play(sound5, soundPoolVolume5, soundPoolVolume5, 1, 0, soundPoolTempo5)
                        tapTiming(R.id.include_main_view5, R.drawable.my_ripple4)} }
                    if (h4[sequencerSize] == 1 && trackCount >= 8) { launch { soundPool.play(sound8, soundPoolVolume8, soundPoolVolume8, 1, 0, soundPoolTempo8)
                        tapTiming(R.id.include_main_view8, R.drawable.my_ripple5)} }
                    if (i4[sequencerSize] == 1 && trackCount >= 9) { launch { soundPool.play(sound11, soundPoolVolume11, soundPoolVolume11, 1, 0, soundPoolTempo11)
                        tapTiming(R.id.include_main_view11, R.drawable.my_ripple6)} }
                    if (j4[sequencerSize] == 1 && trackCount >= 10) { launch { soundPool.play(sound14, soundPoolVolume14, soundPoolVolume14, 1, 0, soundPoolTempo14)
                        tapTiming(R.id.include_main_view14, R.drawable.my_ripple7)} }
                    if (k4[sequencerSize] == 1 && trackCount >= 11) { launch { soundPool.play(sound3, soundPoolVolume3, soundPoolVolume3, 1, 0, soundPoolTempo3)
                        tapTiming(R.id.include_main_view3, R.drawable.my_ripple3)} }
                    if (l4[sequencerSize] == 1 && trackCount >= 12) { launch { soundPool.play(sound6, soundPoolVolume6, soundPoolVolume6, 1, 0, soundPoolTempo6)
                        tapTiming(R.id.include_main_view6, R.drawable.my_ripple4)} }
                    if (m4[sequencerSize] == 1 && trackCount >= 13) { launch { soundPool.play(sound9, soundPoolVolume9, soundPoolVolume9, 1, 0, soundPoolTempo9)
                        tapTiming(R.id.include_main_view9, R.drawable.my_ripple5)} }
                    if (n4[sequencerSize] == 1 && trackCount >= 14) { launch { soundPool.play(sound12, soundPoolVolume12, soundPoolVolume12, 1, 0, soundPoolTempo12)
                        tapTiming(R.id.include_main_view12, R.drawable.my_ripple6)} }
                    if (o4[sequencerSize] == 1 && trackCount >= 15) { launch { soundPool.play(sound15, soundPoolVolume15, soundPoolVolume15, 1, 0, soundPoolTempo15)
                        tapTiming(R.id.include_main_view15, R.drawable.my_ripple7)} }
                    launch { findViewById<View>(R.id.sequencer_view).findViewById<TextView>(R.id.number3).setBackgroundColor(Color.parseColor("#5A5A66")) }
                    launch { findViewById<View>(R.id.sequencer_view).findViewById<TextView>(R.id.number4).setBackgroundColor(Color.parseColor("#FFFFFF")) }
                }
                5 -> {
                    if (a5[sequencerSize] == 1) { launch { soundPool.play(sound1, soundPoolVolume, soundPoolVolume, 1, 0, soundPoolTempo)
                        tapTiming(R.id.include_main_view, R.drawable.my_ripple3) } }
                    if (b5[sequencerSize] == 1) { launch { soundPool.play(sound4, soundPoolVolume4, soundPoolVolume4, 1, 0, soundPoolTempo4)
                        tapTiming(R.id.include_main_view4, R.drawable.my_ripple4)} }
                    if (c5[sequencerSize] == 1 && trackCount >= 3) { launch { soundPool.play(sound7, soundPoolVolume7, soundPoolVolume7, 1, 0, soundPoolTempo7)
                        tapTiming(R.id.include_main_view7, R.drawable.my_ripple5)} }
                    if (d5[sequencerSize] == 1 && trackCount >= 4) { launch { soundPool.play(sound10, soundPoolVolume10, soundPoolVolume10, 1, 0, soundPoolTempo10)
                        tapTiming(R.id.include_main_view10, R.drawable.my_ripple6)} }
                    if (e5[sequencerSize] == 1 && trackCount >= 5) { launch { soundPool.play(sound13, soundPoolVolume13, soundPoolVolume13, 1, 0, soundPoolTempo13)
                        tapTiming(R.id.include_main_view13, R.drawable.my_ripple7)} }
                    if (f5[sequencerSize] == 1 && trackCount >= 6) { launch { soundPool.play(sound2, soundPoolVolume2, soundPoolVolume2, 1, 0, soundPoolTempo2)
                        tapTiming(R.id.include_main_view2, R.drawable.my_ripple3)} }
                    if (g5[sequencerSize] == 1 && trackCount >= 7) { launch { soundPool.play(sound5, soundPoolVolume5, soundPoolVolume5, 1, 0, soundPoolTempo5)
                        tapTiming(R.id.include_main_view5, R.drawable.my_ripple4)} }
                    if (h5[sequencerSize] == 1 && trackCount >= 8) { launch { soundPool.play(sound8, soundPoolVolume8, soundPoolVolume8, 1, 0, soundPoolTempo8)
                        tapTiming(R.id.include_main_view8, R.drawable.my_ripple5)} }
                    if (i5[sequencerSize] == 1 && trackCount >= 9) { launch { soundPool.play(sound11, soundPoolVolume11, soundPoolVolume11, 1, 0, soundPoolTempo11)
                        tapTiming(R.id.include_main_view11, R.drawable.my_ripple6)} }
                    if (j5[sequencerSize] == 1 && trackCount >= 10) { launch { soundPool.play(sound14, soundPoolVolume14, soundPoolVolume14, 1, 0, soundPoolTempo14)
                        tapTiming(R.id.include_main_view14, R.drawable.my_ripple7)} }
                    if (k5[sequencerSize] == 1 && trackCount >= 11) { launch { soundPool.play(sound3, soundPoolVolume3, soundPoolVolume3, 1, 0, soundPoolTempo3)
                        tapTiming(R.id.include_main_view3, R.drawable.my_ripple3)} }
                    if (l5[sequencerSize] == 1 && trackCount >= 12) { launch { soundPool.play(sound6, soundPoolVolume6, soundPoolVolume6, 1, 0, soundPoolTempo6)
                        tapTiming(R.id.include_main_view6, R.drawable.my_ripple4)} }
                    if (m5[sequencerSize] == 1 && trackCount >= 13) { launch { soundPool.play(sound9, soundPoolVolume9, soundPoolVolume9, 1, 0, soundPoolTempo9)
                        tapTiming(R.id.include_main_view9, R.drawable.my_ripple5)} }
                    if (n5[sequencerSize] == 1 && trackCount >= 14) { launch { soundPool.play(sound12, soundPoolVolume12, soundPoolVolume12, 1, 0, soundPoolTempo12)
                        tapTiming(R.id.include_main_view12, R.drawable.my_ripple6)} }
                    if (o5[sequencerSize] == 1 && trackCount >= 15) { launch { soundPool.play(sound15, soundPoolVolume15, soundPoolVolume15, 1, 0, soundPoolTempo15)
                        tapTiming(R.id.include_main_view15, R.drawable.my_ripple7)} }
                    launch { findViewById<View>(R.id.sequencer_view).findViewById<TextView>(R.id.number4).setBackgroundColor(Color.parseColor("#5A5A66")) }
                    launch { findViewById<View>(R.id.sequencer_view).findViewById<TextView>(R.id.number5).setBackgroundColor(Color.parseColor("#FFFFFF")) }
                }
                6 -> {
                    if (a6[sequencerSize] == 1) { launch { soundPool.play(sound1, soundPoolVolume, soundPoolVolume, 1, 0, soundPoolTempo)
                        tapTiming(R.id.include_main_view, R.drawable.my_ripple3) } }
                    if (b6[sequencerSize] == 1) { launch { soundPool.play(sound4, soundPoolVolume4, soundPoolVolume4, 1, 0, soundPoolTempo4)
                        tapTiming(R.id.include_main_view4, R.drawable.my_ripple4)} }
                    if (c6[sequencerSize] == 1 && trackCount >= 3) { launch { soundPool.play(sound7, soundPoolVolume7, soundPoolVolume7, 1, 0, soundPoolTempo7)
                        tapTiming(R.id.include_main_view7, R.drawable.my_ripple5)} }
                    if (d6[sequencerSize] == 1 && trackCount >= 4) { launch { soundPool.play(sound10, soundPoolVolume10, soundPoolVolume10, 1, 0, soundPoolTempo10)
                        tapTiming(R.id.include_main_view10, R.drawable.my_ripple6)} }
                    if (e6[sequencerSize] == 1 && trackCount >= 5) { launch { soundPool.play(sound13, soundPoolVolume13, soundPoolVolume13, 1, 0, soundPoolTempo13)
                        tapTiming(R.id.include_main_view13, R.drawable.my_ripple7)} }
                    if (f6[sequencerSize] == 1 && trackCount >= 6) { launch { soundPool.play(sound2, soundPoolVolume2, soundPoolVolume2, 1, 0, soundPoolTempo2)
                        tapTiming(R.id.include_main_view2, R.drawable.my_ripple3)} }
                    if (g6[sequencerSize] == 1 && trackCount >= 7) { launch { soundPool.play(sound5, soundPoolVolume5, soundPoolVolume5, 1, 0, soundPoolTempo5)
                        tapTiming(R.id.include_main_view5, R.drawable.my_ripple4)} }
                    if (h6[sequencerSize] == 1 && trackCount >= 8) { launch { soundPool.play(sound8, soundPoolVolume8, soundPoolVolume8, 1, 0, soundPoolTempo8)
                        tapTiming(R.id.include_main_view8, R.drawable.my_ripple5)} }
                    if (i6[sequencerSize] == 1 && trackCount >= 9) { launch { soundPool.play(sound11, soundPoolVolume11, soundPoolVolume11, 1, 0, soundPoolTempo11)
                        tapTiming(R.id.include_main_view11, R.drawable.my_ripple6)} }
                    if (j6[sequencerSize] == 1 && trackCount >= 10) { launch { soundPool.play(sound14, soundPoolVolume14, soundPoolVolume14, 1, 0, soundPoolTempo14)
                        tapTiming(R.id.include_main_view14, R.drawable.my_ripple7)} }
                    if (k6[sequencerSize] == 1 && trackCount >= 11) { launch { soundPool.play(sound3, soundPoolVolume3, soundPoolVolume3, 1, 0, soundPoolTempo3)
                        tapTiming(R.id.include_main_view3, R.drawable.my_ripple3)} }
                    if (l6[sequencerSize] == 1 && trackCount >= 12) { launch { soundPool.play(sound6, soundPoolVolume6, soundPoolVolume6, 1, 0, soundPoolTempo6)
                        tapTiming(R.id.include_main_view6, R.drawable.my_ripple4)} }
                    if (m6[sequencerSize] == 1 && trackCount >= 13) { launch { soundPool.play(sound9, soundPoolVolume9, soundPoolVolume9, 1, 0, soundPoolTempo9)
                        tapTiming(R.id.include_main_view9, R.drawable.my_ripple5)} }
                    if (n6[sequencerSize] == 1 && trackCount >= 14) { launch { soundPool.play(sound12, soundPoolVolume12, soundPoolVolume12, 1, 0, soundPoolTempo12)
                        tapTiming(R.id.include_main_view12, R.drawable.my_ripple6)} }
                    if (o6[sequencerSize] == 1 && trackCount >= 15) { launch { soundPool.play(sound15, soundPoolVolume15, soundPoolVolume15, 1, 0, soundPoolTempo15)
                        tapTiming(R.id.include_main_view15, R.drawable.my_ripple7)} }
                    launch { findViewById<View>(R.id.sequencer_view).findViewById<TextView>(R.id.number5).setBackgroundColor(Color.parseColor("#5A5A66")) }
                    launch { findViewById<View>(R.id.sequencer_view).findViewById<TextView>(R.id.number6).setBackgroundColor(Color.parseColor("#FFFFFF")) }
                }
                7 -> {
                    if (a7[sequencerSize] == 1) { launch { soundPool.play(sound1, soundPoolVolume, soundPoolVolume, 1, 0, soundPoolTempo)
                        tapTiming(R.id.include_main_view, R.drawable.my_ripple3) } }
                    if (b7[sequencerSize] == 1) { launch { soundPool.play(sound4, soundPoolVolume4, soundPoolVolume4, 1, 0, soundPoolTempo4)
                        tapTiming(R.id.include_main_view4, R.drawable.my_ripple4)} }
                    if (c7[sequencerSize] == 1 && trackCount >= 3) { launch { soundPool.play(sound7, soundPoolVolume7, soundPoolVolume7, 1, 0, soundPoolTempo7)
                        tapTiming(R.id.include_main_view7, R.drawable.my_ripple5)} }
                    if (d7[sequencerSize] == 1 && trackCount >= 4) { launch { soundPool.play(sound10, soundPoolVolume10, soundPoolVolume10, 1, 0, soundPoolTempo10)
                        tapTiming(R.id.include_main_view10, R.drawable.my_ripple6)} }
                    if (e7[sequencerSize] == 1 && trackCount >= 5) { launch { soundPool.play(sound13, soundPoolVolume13, soundPoolVolume13, 1, 0, soundPoolTempo13)
                        tapTiming(R.id.include_main_view13, R.drawable.my_ripple7)} }
                    if (f7[sequencerSize] == 1 && trackCount >= 6) { launch { soundPool.play(sound2, soundPoolVolume2, soundPoolVolume2, 1, 0, soundPoolTempo2)
                        tapTiming(R.id.include_main_view2, R.drawable.my_ripple3)} }
                    if (g7[sequencerSize] == 1 && trackCount >= 7) { launch { soundPool.play(sound5, soundPoolVolume5, soundPoolVolume5, 1, 0, soundPoolTempo5)
                        tapTiming(R.id.include_main_view5, R.drawable.my_ripple4)} }
                    if (h7[sequencerSize] == 1 && trackCount >= 8) { launch { soundPool.play(sound8, soundPoolVolume8, soundPoolVolume8, 1, 0, soundPoolTempo8)
                        tapTiming(R.id.include_main_view8, R.drawable.my_ripple5)} }
                    if (i7[sequencerSize] == 1 && trackCount >= 9) { launch { soundPool.play(sound11, soundPoolVolume11, soundPoolVolume11, 1, 0, soundPoolTempo11)
                        tapTiming(R.id.include_main_view11, R.drawable.my_ripple6)} }
                    if (j7[sequencerSize] == 1 && trackCount >= 10) { launch { soundPool.play(sound14, soundPoolVolume14, soundPoolVolume14, 1, 0, soundPoolTempo14)
                        tapTiming(R.id.include_main_view14, R.drawable.my_ripple7)} }
                    if (k7[sequencerSize] == 1 && trackCount >= 11) { launch { soundPool.play(sound3, soundPoolVolume3, soundPoolVolume3, 1, 0, soundPoolTempo3)
                        tapTiming(R.id.include_main_view3, R.drawable.my_ripple3)} }
                    if (l7[sequencerSize] == 1 && trackCount >= 12) { launch { soundPool.play(sound6, soundPoolVolume6, soundPoolVolume6, 1, 0, soundPoolTempo6)
                        tapTiming(R.id.include_main_view6, R.drawable.my_ripple4)} }
                    if (m7[sequencerSize] == 1 && trackCount >= 13) { launch { soundPool.play(sound9, soundPoolVolume9, soundPoolVolume9, 1, 0, soundPoolTempo9)
                        tapTiming(R.id.include_main_view9, R.drawable.my_ripple5)} }
                    if (n7[sequencerSize] == 1 && trackCount >= 14) { launch { soundPool.play(sound12, soundPoolVolume12, soundPoolVolume12, 1, 0, soundPoolTempo12)
                        tapTiming(R.id.include_main_view12, R.drawable.my_ripple6)} }
                    if (o7[sequencerSize] == 1 && trackCount >= 15) { launch { soundPool.play(sound15, soundPoolVolume15, soundPoolVolume15, 1, 0, soundPoolTempo15)
                        tapTiming(R.id.include_main_view15, R.drawable.my_ripple7)} }
                    launch { findViewById<View>(R.id.sequencer_view).findViewById<TextView>(R.id.number6).setBackgroundColor(Color.parseColor("#5A5A66")) }
                    launch { findViewById<View>(R.id.sequencer_view).findViewById<TextView>(R.id.number7).setBackgroundColor(Color.parseColor("#FFFFFF")) }
                }
                8 -> {
                    if (a8[sequencerSize] == 1) { launch { soundPool.play(sound1, soundPoolVolume, soundPoolVolume, 1, 0, soundPoolTempo)
                        tapTiming(R.id.include_main_view, R.drawable.my_ripple3) } }
                    if (b8[sequencerSize] == 1) { launch { soundPool.play(sound4, soundPoolVolume4, soundPoolVolume4, 1, 0, soundPoolTempo4)
                        tapTiming(R.id.include_main_view4, R.drawable.my_ripple4)} }
                    if (c8[sequencerSize] == 1 && trackCount >= 3) { launch { soundPool.play(sound7, soundPoolVolume7, soundPoolVolume7, 1, 0, soundPoolTempo7)
                        tapTiming(R.id.include_main_view7, R.drawable.my_ripple5)} }
                    if (d8[sequencerSize] == 1 && trackCount >= 4) { launch { soundPool.play(sound10, soundPoolVolume10, soundPoolVolume10, 1, 0, soundPoolTempo10)
                        tapTiming(R.id.include_main_view10, R.drawable.my_ripple6)} }
                    if (e8[sequencerSize] == 1 && trackCount >= 5) { launch { soundPool.play(sound13, soundPoolVolume13, soundPoolVolume13, 1, 0, soundPoolTempo13)
                        tapTiming(R.id.include_main_view13, R.drawable.my_ripple7)} }
                    if (f8[sequencerSize] == 1 && trackCount >= 6) { launch { soundPool.play(sound2, soundPoolVolume2, soundPoolVolume2, 1, 0, soundPoolTempo2)
                        tapTiming(R.id.include_main_view2, R.drawable.my_ripple3)} }
                    if (g8[sequencerSize] == 1 && trackCount >= 7) { launch { soundPool.play(sound5, soundPoolVolume5, soundPoolVolume5, 1, 0, soundPoolTempo5)
                        tapTiming(R.id.include_main_view5, R.drawable.my_ripple4)} }
                    if (h8[sequencerSize] == 1 && trackCount >= 8) { launch { soundPool.play(sound8, soundPoolVolume8, soundPoolVolume8, 1, 0, soundPoolTempo8)
                        tapTiming(R.id.include_main_view8, R.drawable.my_ripple5)} }
                    if (i8[sequencerSize] == 1 && trackCount >= 9) { launch { soundPool.play(sound11, soundPoolVolume11, soundPoolVolume11, 1, 0, soundPoolTempo11)
                        tapTiming(R.id.include_main_view11, R.drawable.my_ripple6)} }
                    if (j8[sequencerSize] == 1 && trackCount >= 10) { launch { soundPool.play(sound14, soundPoolVolume14, soundPoolVolume14, 1, 0, soundPoolTempo14)
                        tapTiming(R.id.include_main_view14, R.drawable.my_ripple7)} }
                    if (k8[sequencerSize] == 1 && trackCount >= 11) { launch { soundPool.play(sound3, soundPoolVolume3, soundPoolVolume3, 1, 0, soundPoolTempo3)
                        tapTiming(R.id.include_main_view3, R.drawable.my_ripple3)} }
                    if (l8[sequencerSize] == 1 && trackCount >= 12) { launch { soundPool.play(sound6, soundPoolVolume6, soundPoolVolume6, 1, 0, soundPoolTempo6)
                        tapTiming(R.id.include_main_view6, R.drawable.my_ripple4)} }
                    if (m8[sequencerSize] == 1 && trackCount >= 13) { launch { soundPool.play(sound9, soundPoolVolume9, soundPoolVolume9, 1, 0, soundPoolTempo9)
                        tapTiming(R.id.include_main_view9, R.drawable.my_ripple5)} }
                    if (n8[sequencerSize] == 1 && trackCount >= 14) { launch { soundPool.play(sound12, soundPoolVolume12, soundPoolVolume12, 1, 0, soundPoolTempo12)
                        tapTiming(R.id.include_main_view12, R.drawable.my_ripple6)} }
                    if (o8[sequencerSize] == 1 && trackCount >= 15) { launch { soundPool.play(sound15, soundPoolVolume15, soundPoolVolume15, 1, 0, soundPoolTempo15)
                        tapTiming(R.id.include_main_view15, R.drawable.my_ripple7)} }
                    launch { findViewById<View>(R.id.sequencer_view).findViewById<TextView>(R.id.number7).setBackgroundColor(Color.parseColor("#5A5A66")) }
                    launch { findViewById<View>(R.id.sequencer_view).findViewById<TextView>(R.id.number8).setBackgroundColor(Color.parseColor("#FFFFFF")) }
                }
                9 -> {
                    if (a9[sequencerSize] == 1) { launch { soundPool.play(sound1, soundPoolVolume, soundPoolVolume, 1, 0, soundPoolTempo)
                        tapTiming(R.id.include_main_view, R.drawable.my_ripple3) } }
                    if (b9[sequencerSize] == 1) { launch { soundPool.play(sound4, soundPoolVolume4, soundPoolVolume4, 1, 0, soundPoolTempo4)
                        tapTiming(R.id.include_main_view4, R.drawable.my_ripple4)} }
                    if (c9[sequencerSize] == 1 && trackCount >= 3) { launch { soundPool.play(sound7, soundPoolVolume7, soundPoolVolume7, 1, 0, soundPoolTempo7)
                        tapTiming(R.id.include_main_view7, R.drawable.my_ripple5)} }
                    if (d9[sequencerSize] == 1 && trackCount >= 4) { launch { soundPool.play(sound10, soundPoolVolume10, soundPoolVolume10, 1, 0, soundPoolTempo10)
                        tapTiming(R.id.include_main_view10, R.drawable.my_ripple6)} }
                    if (e9[sequencerSize] == 1 && trackCount >= 5) { launch { soundPool.play(sound13, soundPoolVolume13, soundPoolVolume13, 1, 0, soundPoolTempo13)
                        tapTiming(R.id.include_main_view13, R.drawable.my_ripple7)} }
                    if (f9[sequencerSize] == 1 && trackCount >= 6) { launch { soundPool.play(sound2, soundPoolVolume2, soundPoolVolume2, 1, 0, soundPoolTempo2)
                        tapTiming(R.id.include_main_view2, R.drawable.my_ripple3)} }
                    if (g9[sequencerSize] == 1 && trackCount >= 7) { launch { soundPool.play(sound5, soundPoolVolume5, soundPoolVolume5, 1, 0, soundPoolTempo5)
                        tapTiming(R.id.include_main_view5, R.drawable.my_ripple4)} }
                    if (h9[sequencerSize] == 1 && trackCount >= 8) { launch { soundPool.play(sound8, soundPoolVolume8, soundPoolVolume8, 1, 0, soundPoolTempo8)
                        tapTiming(R.id.include_main_view8, R.drawable.my_ripple5)} }
                    if (i9[sequencerSize] == 1 && trackCount >= 9) { launch { soundPool.play(sound11, soundPoolVolume11, soundPoolVolume11, 1, 0, soundPoolTempo11)
                        tapTiming(R.id.include_main_view11, R.drawable.my_ripple6)} }
                    if (j9[sequencerSize] == 1 && trackCount >= 10) { launch { soundPool.play(sound14, soundPoolVolume14, soundPoolVolume14, 1, 0, soundPoolTempo14)
                        tapTiming(R.id.include_main_view14, R.drawable.my_ripple7)} }
                    if (k9[sequencerSize] == 1 && trackCount >= 11) { launch { soundPool.play(sound3, soundPoolVolume3, soundPoolVolume3, 1, 0, soundPoolTempo3)
                        tapTiming(R.id.include_main_view3, R.drawable.my_ripple3)} }
                    if (l9[sequencerSize] == 1 && trackCount >= 12) { launch { soundPool.play(sound6, soundPoolVolume6, soundPoolVolume6, 1, 0, soundPoolTempo6)
                        tapTiming(R.id.include_main_view6, R.drawable.my_ripple4)} }
                    if (m9[sequencerSize] == 1 && trackCount >= 13) { launch { soundPool.play(sound9, soundPoolVolume9, soundPoolVolume9, 1, 0, soundPoolTempo9)
                        tapTiming(R.id.include_main_view9, R.drawable.my_ripple5)} }
                    if (n9[sequencerSize] == 1 && trackCount >= 14) { launch { soundPool.play(sound12, soundPoolVolume12, soundPoolVolume12, 1, 0, soundPoolTempo12)
                        tapTiming(R.id.include_main_view12, R.drawable.my_ripple6)} }
                    if (o9[sequencerSize] == 1 && trackCount >= 15) { launch { soundPool.play(sound15, soundPoolVolume15, soundPoolVolume15, 1, 0, soundPoolTempo15)
                        tapTiming(R.id.include_main_view15, R.drawable.my_ripple7)} }
                    launch { findViewById<View>(R.id.sequencer_view).findViewById<TextView>(R.id.number8).setBackgroundColor(Color.parseColor("#5A5A66")) }
                    launch { findViewById<View>(R.id.sequencer_view).findViewById<TextView>(R.id.number9).setBackgroundColor(Color.parseColor("#FFFFFF")) }
                }
                10 -> {
                    if (a10[sequencerSize] == 1) { launch { soundPool.play(sound1, soundPoolVolume, soundPoolVolume, 1, 0, soundPoolTempo)
                        tapTiming(R.id.include_main_view, R.drawable.my_ripple3) } }
                    if (b10[sequencerSize] == 1) { launch { soundPool.play(sound4, soundPoolVolume4, soundPoolVolume4, 1, 0, soundPoolTempo4)
                        tapTiming(R.id.include_main_view4, R.drawable.my_ripple4)} }
                    if (c10[sequencerSize] == 1 && trackCount >= 3) { launch { soundPool.play(sound7, soundPoolVolume7, soundPoolVolume7, 1, 0, soundPoolTempo7)
                        tapTiming(R.id.include_main_view7, R.drawable.my_ripple5)} }
                    if (d10[sequencerSize] == 1 && trackCount >= 4) { launch { soundPool.play(sound10, soundPoolVolume10, soundPoolVolume10, 1, 0, soundPoolTempo10)
                        tapTiming(R.id.include_main_view10, R.drawable.my_ripple6)} }
                    if (e10[sequencerSize] == 1 && trackCount >= 5) { launch { soundPool.play(sound13, soundPoolVolume13, soundPoolVolume13, 1, 0, soundPoolTempo13)
                        tapTiming(R.id.include_main_view13, R.drawable.my_ripple7)} }
                    if (f10[sequencerSize] == 1 && trackCount >= 6) { launch { soundPool.play(sound2, soundPoolVolume2, soundPoolVolume2, 1, 0, soundPoolTempo2)
                        tapTiming(R.id.include_main_view2, R.drawable.my_ripple3)} }
                    if (g10[sequencerSize] == 1 && trackCount >= 7) { launch { soundPool.play(sound5, soundPoolVolume5, soundPoolVolume5, 1, 0, soundPoolTempo5)
                        tapTiming(R.id.include_main_view5, R.drawable.my_ripple4)} }
                    if (h10[sequencerSize] == 1 && trackCount >= 8) { launch { soundPool.play(sound8, soundPoolVolume8, soundPoolVolume8, 1, 0, soundPoolTempo8)
                        tapTiming(R.id.include_main_view8, R.drawable.my_ripple5)} }
                    if (i10[sequencerSize] == 1 && trackCount >= 9) { launch { soundPool.play(sound11, soundPoolVolume11, soundPoolVolume11, 1, 0, soundPoolTempo11)
                        tapTiming(R.id.include_main_view11, R.drawable.my_ripple6)} }
                    if (j10[sequencerSize] == 1 && trackCount >= 10) { launch { soundPool.play(sound14, soundPoolVolume14, soundPoolVolume14, 1, 0, soundPoolTempo14)
                        tapTiming(R.id.include_main_view14, R.drawable.my_ripple7)} }
                    if (k10[sequencerSize] == 1 && trackCount >= 11) { launch { soundPool.play(sound3, soundPoolVolume3, soundPoolVolume3, 1, 0, soundPoolTempo3)
                        tapTiming(R.id.include_main_view3, R.drawable.my_ripple3)} }
                    if (l10[sequencerSize] == 1 && trackCount >= 12) { launch { soundPool.play(sound6, soundPoolVolume6, soundPoolVolume6, 1, 0, soundPoolTempo6)
                        tapTiming(R.id.include_main_view6, R.drawable.my_ripple4)} }
                    if (m10[sequencerSize] == 1 && trackCount >= 13) { launch { soundPool.play(sound9, soundPoolVolume9, soundPoolVolume9, 1, 0, soundPoolTempo9)
                        tapTiming(R.id.include_main_view9, R.drawable.my_ripple5)} }
                    if (n10[sequencerSize] == 1 && trackCount >= 14) { launch { soundPool.play(sound12, soundPoolVolume12, soundPoolVolume12, 1, 0, soundPoolTempo12)
                        tapTiming(R.id.include_main_view12, R.drawable.my_ripple6)} }
                    if (o10[sequencerSize] == 1 && trackCount >= 15) { launch { soundPool.play(sound15, soundPoolVolume15, soundPoolVolume15, 1, 0, soundPoolTempo15)
                        tapTiming(R.id.include_main_view15, R.drawable.my_ripple7)} }
                    launch { findViewById<View>(R.id.sequencer_view).findViewById<TextView>(R.id.number9).setBackgroundColor(Color.parseColor("#5A5A66")) }
                    launch { findViewById<View>(R.id.sequencer_view).findViewById<TextView>(R.id.number10).setBackgroundColor(Color.parseColor("#FFFFFF")) }
                }
                11 -> {
                    if (a11[sequencerSize] == 1) { launch { soundPool.play(sound1, soundPoolVolume, soundPoolVolume, 1, 0, soundPoolTempo)
                        tapTiming(R.id.include_main_view, R.drawable.my_ripple3) } }
                    if (b11[sequencerSize] == 1) { launch { soundPool.play(sound4, soundPoolVolume4, soundPoolVolume4, 1, 0, soundPoolTempo4)
                        tapTiming(R.id.include_main_view4, R.drawable.my_ripple4)} }
                    if (c11[sequencerSize] == 1 && trackCount >= 3) { launch { soundPool.play(sound7, soundPoolVolume7, soundPoolVolume7, 1, 0, soundPoolTempo7)
                        tapTiming(R.id.include_main_view7, R.drawable.my_ripple5)} }
                    if (d11[sequencerSize] == 1 && trackCount >= 4) { launch { soundPool.play(sound10, soundPoolVolume10, soundPoolVolume10, 1, 0, soundPoolTempo10)
                        tapTiming(R.id.include_main_view10, R.drawable.my_ripple6)} }
                    if (e11[sequencerSize] == 1 && trackCount >= 5) { launch { soundPool.play(sound13, soundPoolVolume13, soundPoolVolume13, 1, 0, soundPoolTempo13)
                        tapTiming(R.id.include_main_view13, R.drawable.my_ripple7)} }
                    if (f11[sequencerSize] == 1 && trackCount >= 6) { launch { soundPool.play(sound2, soundPoolVolume2, soundPoolVolume2, 1, 0, soundPoolTempo2)
                        tapTiming(R.id.include_main_view2, R.drawable.my_ripple3)} }
                    if (g11[sequencerSize] == 1 && trackCount >= 7) { launch { soundPool.play(sound5, soundPoolVolume5, soundPoolVolume5, 1, 0, soundPoolTempo5)
                        tapTiming(R.id.include_main_view5, R.drawable.my_ripple4)} }
                    if (h11[sequencerSize] == 1 && trackCount >= 8) { launch { soundPool.play(sound8, soundPoolVolume8, soundPoolVolume8, 1, 0, soundPoolTempo8)
                        tapTiming(R.id.include_main_view8, R.drawable.my_ripple5)} }
                    if (i11[sequencerSize] == 1 && trackCount >= 9) { launch { soundPool.play(sound11, soundPoolVolume11, soundPoolVolume11, 1, 0, soundPoolTempo11)
                        tapTiming(R.id.include_main_view11, R.drawable.my_ripple6)} }
                    if (j11[sequencerSize] == 1 && trackCount >= 10) { launch { soundPool.play(sound14, soundPoolVolume14, soundPoolVolume14, 1, 0, soundPoolTempo14)
                        tapTiming(R.id.include_main_view14, R.drawable.my_ripple7)} }
                    if (k11[sequencerSize] == 1 && trackCount >= 11) { launch { soundPool.play(sound3, soundPoolVolume3, soundPoolVolume3, 1, 0, soundPoolTempo3)
                        tapTiming(R.id.include_main_view3, R.drawable.my_ripple3)} }
                    if (l11[sequencerSize] == 1 && trackCount >= 12) { launch { soundPool.play(sound6, soundPoolVolume6, soundPoolVolume6, 1, 0, soundPoolTempo6)
                        tapTiming(R.id.include_main_view6, R.drawable.my_ripple4)} }
                    if (m11[sequencerSize] == 1 && trackCount >= 13) { launch { soundPool.play(sound9, soundPoolVolume9, soundPoolVolume9, 1, 0, soundPoolTempo9)
                        tapTiming(R.id.include_main_view9, R.drawable.my_ripple5)} }
                    if (n11[sequencerSize] == 1 && trackCount >= 14) { launch { soundPool.play(sound12, soundPoolVolume12, soundPoolVolume12, 1, 0, soundPoolTempo12)
                        tapTiming(R.id.include_main_view12, R.drawable.my_ripple6)} }
                    if (o11[sequencerSize] == 1 && trackCount >= 15) { launch { soundPool.play(sound15, soundPoolVolume15, soundPoolVolume15, 1, 0, soundPoolTempo15)
                        tapTiming(R.id.include_main_view15, R.drawable.my_ripple7)} }
                    launch { findViewById<View>(R.id.sequencer_view).findViewById<TextView>(R.id.number10).setBackgroundColor(Color.parseColor("#5A5A66")) }
                    launch { findViewById<View>(R.id.sequencer_view).findViewById<TextView>(R.id.number11).setBackgroundColor(Color.parseColor("#FFFFFF")) }
                }
                12 -> {
                    if (a12[sequencerSize] == 1) { launch { soundPool.play(sound1, soundPoolVolume, soundPoolVolume, 1, 0, soundPoolTempo)
                        tapTiming(R.id.include_main_view, R.drawable.my_ripple3) } }
                    if (b12[sequencerSize] == 1) { launch { soundPool.play(sound4, soundPoolVolume4, soundPoolVolume4, 1, 0, soundPoolTempo4)
                        tapTiming(R.id.include_main_view4, R.drawable.my_ripple4)} }
                    if (c12[sequencerSize] == 1 && trackCount >= 3) { launch { soundPool.play(sound7, soundPoolVolume7, soundPoolVolume7, 1, 0, soundPoolTempo7)
                        tapTiming(R.id.include_main_view7, R.drawable.my_ripple5)} }
                    if (d12[sequencerSize] == 1 && trackCount >= 4) { launch { soundPool.play(sound10, soundPoolVolume10, soundPoolVolume10, 1, 0, soundPoolTempo10)
                        tapTiming(R.id.include_main_view10, R.drawable.my_ripple6)} }
                    if (e12[sequencerSize] == 1 && trackCount >= 5) { launch { soundPool.play(sound13, soundPoolVolume13, soundPoolVolume13, 1, 0, soundPoolTempo13)
                        tapTiming(R.id.include_main_view13, R.drawable.my_ripple7)} }
                    if (f12[sequencerSize] == 1 && trackCount >= 6) { launch { soundPool.play(sound2, soundPoolVolume2, soundPoolVolume2, 1, 0, soundPoolTempo2)
                        tapTiming(R.id.include_main_view2, R.drawable.my_ripple3)} }
                    if (g12[sequencerSize] == 1 && trackCount >= 7) { launch { soundPool.play(sound5, soundPoolVolume5, soundPoolVolume5, 1, 0, soundPoolTempo5)
                        tapTiming(R.id.include_main_view5, R.drawable.my_ripple4)} }
                    if (h12[sequencerSize] == 1 && trackCount >= 8) { launch { soundPool.play(sound8, soundPoolVolume8, soundPoolVolume8, 1, 0, soundPoolTempo8)
                        tapTiming(R.id.include_main_view8, R.drawable.my_ripple5)} }
                    if (i12[sequencerSize] == 1 && trackCount >= 9) { launch { soundPool.play(sound11, soundPoolVolume11, soundPoolVolume11, 1, 0, soundPoolTempo11)
                        tapTiming(R.id.include_main_view11, R.drawable.my_ripple6)} }
                    if (j12[sequencerSize] == 1 && trackCount >= 10) { launch { soundPool.play(sound14, soundPoolVolume14, soundPoolVolume14, 1, 0, soundPoolTempo14)
                        tapTiming(R.id.include_main_view14, R.drawable.my_ripple7)} }
                    if (k12[sequencerSize] == 1 && trackCount >= 11) { launch { soundPool.play(sound3, soundPoolVolume3, soundPoolVolume3, 1, 0, soundPoolTempo3)
                        tapTiming(R.id.include_main_view3, R.drawable.my_ripple3)} }
                    if (l12[sequencerSize] == 1 && trackCount >= 12) { launch { soundPool.play(sound6, soundPoolVolume6, soundPoolVolume6, 1, 0, soundPoolTempo6)
                        tapTiming(R.id.include_main_view6, R.drawable.my_ripple4)} }
                    if (m12[sequencerSize] == 1 && trackCount >= 13) { launch { soundPool.play(sound9, soundPoolVolume9, soundPoolVolume9, 1, 0, soundPoolTempo9)
                        tapTiming(R.id.include_main_view9, R.drawable.my_ripple5)} }
                    if (n12[sequencerSize] == 1 && trackCount >= 14) { launch { soundPool.play(sound12, soundPoolVolume12, soundPoolVolume12, 1, 0, soundPoolTempo12)
                        tapTiming(R.id.include_main_view12, R.drawable.my_ripple6)} }
                    if (o12[sequencerSize] == 1 && trackCount >= 15) { launch { soundPool.play(sound15, soundPoolVolume15, soundPoolVolume15, 1, 0, soundPoolTempo15)
                        tapTiming(R.id.include_main_view15, R.drawable.my_ripple7)} }
                    launch { findViewById<View>(R.id.sequencer_view).findViewById<TextView>(R.id.number11).setBackgroundColor(Color.parseColor("#5A5A66")) }
                    launch { findViewById<View>(R.id.sequencer_view).findViewById<TextView>(R.id.number12).setBackgroundColor(Color.parseColor("#FFFFFF")) }
                }
                13 -> {
                    if (a13[sequencerSize] == 1) { launch { soundPool.play(sound1, soundPoolVolume, soundPoolVolume, 1, 0, soundPoolTempo)
                        tapTiming(R.id.include_main_view, R.drawable.my_ripple3) } }
                    if (b13[sequencerSize] == 1) { launch { soundPool.play(sound4, soundPoolVolume4, soundPoolVolume4, 1, 0, soundPoolTempo4)
                        tapTiming(R.id.include_main_view4, R.drawable.my_ripple4)} }
                    if (c13[sequencerSize] == 1 && trackCount >= 3) { launch { soundPool.play(sound7, soundPoolVolume7, soundPoolVolume7, 1, 0, soundPoolTempo7)
                        tapTiming(R.id.include_main_view7, R.drawable.my_ripple5)} }
                    if (d13[sequencerSize] == 1 && trackCount >= 4) { launch { soundPool.play(sound10, soundPoolVolume10, soundPoolVolume10, 1, 0, soundPoolTempo10)
                        tapTiming(R.id.include_main_view10, R.drawable.my_ripple6)} }
                    if (e13[sequencerSize] == 1 && trackCount >= 5) { launch { soundPool.play(sound13, soundPoolVolume13, soundPoolVolume13, 1, 0, soundPoolTempo13)
                        tapTiming(R.id.include_main_view13, R.drawable.my_ripple7)} }
                    if (f13[sequencerSize] == 1 && trackCount >= 6) { launch { soundPool.play(sound2, soundPoolVolume2, soundPoolVolume2, 1, 0, soundPoolTempo2)
                        tapTiming(R.id.include_main_view2, R.drawable.my_ripple3)} }
                    if (g13[sequencerSize] == 1 && trackCount >= 7) { launch { soundPool.play(sound5, soundPoolVolume5, soundPoolVolume5, 1, 0, soundPoolTempo5)
                        tapTiming(R.id.include_main_view5, R.drawable.my_ripple4)} }
                    if (h13[sequencerSize] == 1 && trackCount >= 8) { launch { soundPool.play(sound8, soundPoolVolume8, soundPoolVolume8, 1, 0, soundPoolTempo8)
                        tapTiming(R.id.include_main_view8, R.drawable.my_ripple5)} }
                    if (i13[sequencerSize] == 1 && trackCount >= 9) { launch { soundPool.play(sound11, soundPoolVolume11, soundPoolVolume11, 1, 0, soundPoolTempo11)
                        tapTiming(R.id.include_main_view11, R.drawable.my_ripple6)} }
                    if (j13[sequencerSize] == 1 && trackCount >= 10) { launch { soundPool.play(sound14, soundPoolVolume14, soundPoolVolume14, 1, 0, soundPoolTempo14)
                        tapTiming(R.id.include_main_view14, R.drawable.my_ripple7)} }
                    if (k13[sequencerSize] == 1 && trackCount >= 11) { launch { soundPool.play(sound3, soundPoolVolume3, soundPoolVolume3, 1, 0, soundPoolTempo3)
                        tapTiming(R.id.include_main_view3, R.drawable.my_ripple3)} }
                    if (l13[sequencerSize] == 1 && trackCount >= 12) { launch { soundPool.play(sound6, soundPoolVolume6, soundPoolVolume6, 1, 0, soundPoolTempo6)
                        tapTiming(R.id.include_main_view6, R.drawable.my_ripple4)} }
                    if (m13[sequencerSize] == 1 && trackCount >= 13) { launch { soundPool.play(sound9, soundPoolVolume9, soundPoolVolume9, 1, 0, soundPoolTempo9)
                        tapTiming(R.id.include_main_view9, R.drawable.my_ripple5)} }
                    if (n13[sequencerSize] == 1 && trackCount >= 14) { launch { soundPool.play(sound12, soundPoolVolume12, soundPoolVolume12, 1, 0, soundPoolTempo12)
                        tapTiming(R.id.include_main_view12, R.drawable.my_ripple6)} }
                    if (o13[sequencerSize] == 1 && trackCount >= 15) { launch { soundPool.play(sound15, soundPoolVolume15, soundPoolVolume15, 1, 0, soundPoolTempo15)
                        tapTiming(R.id.include_main_view15, R.drawable.my_ripple7)} }
                    launch { findViewById<View>(R.id.sequencer_view).findViewById<TextView>(R.id.number12).setBackgroundColor(Color.parseColor("#5A5A66")) }
                    launch { findViewById<View>(R.id.sequencer_view).findViewById<TextView>(R.id.number13).setBackgroundColor(Color.parseColor("#FFFFFF")) }
                }
                14 -> {
                    if (a14[sequencerSize] == 1) { launch { soundPool.play(sound1, soundPoolVolume, soundPoolVolume, 1, 0, soundPoolTempo)
                        tapTiming(R.id.include_main_view, R.drawable.my_ripple3) } }
                    if (b14[sequencerSize] == 1) { launch { soundPool.play(sound4, soundPoolVolume4, soundPoolVolume4, 1, 0, soundPoolTempo4)
                        tapTiming(R.id.include_main_view4, R.drawable.my_ripple4)} }
                    if (c14[sequencerSize] == 1 && trackCount >= 3) { launch { soundPool.play(sound7, soundPoolVolume7, soundPoolVolume7, 1, 0, soundPoolTempo7)
                        tapTiming(R.id.include_main_view7, R.drawable.my_ripple5)} }
                    if (d14[sequencerSize] == 1 && trackCount >= 4) { launch { soundPool.play(sound10, soundPoolVolume10, soundPoolVolume10, 1, 0, soundPoolTempo10)
                        tapTiming(R.id.include_main_view10, R.drawable.my_ripple6)} }
                    if (e14[sequencerSize] == 1 && trackCount >= 5) { launch { soundPool.play(sound13, soundPoolVolume13, soundPoolVolume13, 1, 0, soundPoolTempo13)
                        tapTiming(R.id.include_main_view13, R.drawable.my_ripple7)} }
                    if (f14[sequencerSize] == 1 && trackCount >= 6) { launch { soundPool.play(sound2, soundPoolVolume2, soundPoolVolume2, 1, 0, soundPoolTempo2)
                        tapTiming(R.id.include_main_view2, R.drawable.my_ripple3)} }
                    if (g14[sequencerSize] == 1 && trackCount >= 7) { launch { soundPool.play(sound5, soundPoolVolume5, soundPoolVolume5, 1, 0, soundPoolTempo5)
                        tapTiming(R.id.include_main_view5, R.drawable.my_ripple4)} }
                    if (h14[sequencerSize] == 1 && trackCount >= 8) { launch { soundPool.play(sound8, soundPoolVolume8, soundPoolVolume8, 1, 0, soundPoolTempo8)
                        tapTiming(R.id.include_main_view8, R.drawable.my_ripple5)} }
                    if (i14[sequencerSize] == 1 && trackCount >= 9) { launch { soundPool.play(sound11, soundPoolVolume11, soundPoolVolume11, 1, 0, soundPoolTempo11)
                        tapTiming(R.id.include_main_view11, R.drawable.my_ripple6)} }
                    if (j14[sequencerSize] == 1 && trackCount >= 10) { launch { soundPool.play(sound14, soundPoolVolume14, soundPoolVolume14, 1, 0, soundPoolTempo14)
                        tapTiming(R.id.include_main_view14, R.drawable.my_ripple7)} }
                    if (k14[sequencerSize] == 1 && trackCount >= 11) { launch { soundPool.play(sound3, soundPoolVolume3, soundPoolVolume3, 1, 0, soundPoolTempo3)
                        tapTiming(R.id.include_main_view3, R.drawable.my_ripple3)} }
                    if (l14[sequencerSize] == 1 && trackCount >= 12) { launch { soundPool.play(sound6, soundPoolVolume6, soundPoolVolume6, 1, 0, soundPoolTempo6)
                        tapTiming(R.id.include_main_view6, R.drawable.my_ripple4)} }
                    if (m14[sequencerSize] == 1 && trackCount >= 13) { launch { soundPool.play(sound9, soundPoolVolume9, soundPoolVolume9, 1, 0, soundPoolTempo9)
                        tapTiming(R.id.include_main_view9, R.drawable.my_ripple5)} }
                    if (n14[sequencerSize] == 1 && trackCount >= 14) { launch { soundPool.play(sound12, soundPoolVolume12, soundPoolVolume12, 1, 0, soundPoolTempo12)
                        tapTiming(R.id.include_main_view12, R.drawable.my_ripple6)} }
                    if (o14[sequencerSize] == 1 && trackCount >= 15) { launch { soundPool.play(sound15, soundPoolVolume15, soundPoolVolume15, 1, 0, soundPoolTempo15)
                        tapTiming(R.id.include_main_view15, R.drawable.my_ripple7)} }
                    launch { findViewById<View>(R.id.sequencer_view).findViewById<TextView>(R.id.number13).setBackgroundColor(Color.parseColor("#5A5A66")) }
                    launch { findViewById<View>(R.id.sequencer_view).findViewById<TextView>(R.id.number14).setBackgroundColor(Color.parseColor("#FFFFFF")) }
                }
                15 -> {
                    if (a15[sequencerSize] == 1) { launch { soundPool.play(sound1, soundPoolVolume, soundPoolVolume, 1, 0, soundPoolTempo)
                        tapTiming(R.id.include_main_view, R.drawable.my_ripple3) } }
                    if (b15[sequencerSize] == 1) { launch { soundPool.play(sound4, soundPoolVolume4, soundPoolVolume4, 1, 0, soundPoolTempo4)
                        tapTiming(R.id.include_main_view4, R.drawable.my_ripple4)} }
                    if (c15[sequencerSize] == 1 && trackCount >= 3) { launch { soundPool.play(sound7, soundPoolVolume7, soundPoolVolume7, 1, 0, soundPoolTempo7)
                        tapTiming(R.id.include_main_view7, R.drawable.my_ripple5)} }
                    if (d15[sequencerSize] == 1 && trackCount >= 4) { launch { soundPool.play(sound10, soundPoolVolume10, soundPoolVolume10, 1, 0, soundPoolTempo10)
                        tapTiming(R.id.include_main_view10, R.drawable.my_ripple6)} }
                    if (e15[sequencerSize] == 1 && trackCount >= 5) { launch { soundPool.play(sound13, soundPoolVolume13, soundPoolVolume13, 1, 0, soundPoolTempo13)
                        tapTiming(R.id.include_main_view13, R.drawable.my_ripple7)} }
                    if (f15[sequencerSize] == 1 && trackCount >= 6) { launch { soundPool.play(sound2, soundPoolVolume2, soundPoolVolume2, 1, 0, soundPoolTempo2)
                        tapTiming(R.id.include_main_view2, R.drawable.my_ripple3)} }
                    if (g15[sequencerSize] == 1 && trackCount >= 7) { launch { soundPool.play(sound5, soundPoolVolume5, soundPoolVolume5, 1, 0, soundPoolTempo5)
                        tapTiming(R.id.include_main_view5, R.drawable.my_ripple4)} }
                    if (h15[sequencerSize] == 1 && trackCount >= 8) { launch { soundPool.play(sound8, soundPoolVolume8, soundPoolVolume8, 1, 0, soundPoolTempo8)
                        tapTiming(R.id.include_main_view8, R.drawable.my_ripple5)} }
                    if (i15[sequencerSize] == 1 && trackCount >= 9) { launch { soundPool.play(sound11, soundPoolVolume11, soundPoolVolume11, 1, 0, soundPoolTempo11)
                        tapTiming(R.id.include_main_view11, R.drawable.my_ripple6)} }
                    if (j15[sequencerSize] == 1 && trackCount >= 10) { launch { soundPool.play(sound14, soundPoolVolume14, soundPoolVolume14, 1, 0, soundPoolTempo14)
                        tapTiming(R.id.include_main_view14, R.drawable.my_ripple7)} }
                    if (k15[sequencerSize] == 1 && trackCount >= 11) { launch { soundPool.play(sound3, soundPoolVolume3, soundPoolVolume3, 1, 0, soundPoolTempo3)
                        tapTiming(R.id.include_main_view3, R.drawable.my_ripple3)} }
                    if (l15[sequencerSize] == 1 && trackCount >= 12) { launch { soundPool.play(sound6, soundPoolVolume6, soundPoolVolume6, 1, 0, soundPoolTempo6)
                        tapTiming(R.id.include_main_view6, R.drawable.my_ripple4)} }
                    if (m15[sequencerSize] == 1 && trackCount >= 13) { launch { soundPool.play(sound9, soundPoolVolume9, soundPoolVolume9, 1, 0, soundPoolTempo9)
                        tapTiming(R.id.include_main_view9, R.drawable.my_ripple5)} }
                    if (n15[sequencerSize] == 1 && trackCount >= 14) { launch { soundPool.play(sound12, soundPoolVolume12, soundPoolVolume12, 1, 0, soundPoolTempo12)
                        tapTiming(R.id.include_main_view12, R.drawable.my_ripple6)} }
                    if (o15[sequencerSize] == 1 && trackCount >= 15) { launch { soundPool.play(sound15, soundPoolVolume15, soundPoolVolume15, 1, 0, soundPoolTempo15)
                        tapTiming(R.id.include_main_view15, R.drawable.my_ripple7)} }
                    launch { findViewById<View>(R.id.sequencer_view).findViewById<TextView>(R.id.number14).setBackgroundColor(Color.parseColor("#5A5A66")) }
                    launch { findViewById<View>(R.id.sequencer_view).findViewById<TextView>(R.id.number15).setBackgroundColor(Color.parseColor("#FFFFFF")) }
                }
                16 -> {
                    if (a16[sequencerSize] == 1) { launch { soundPool.play(sound1, soundPoolVolume, soundPoolVolume, 1, 0, soundPoolTempo)
                        tapTiming(R.id.include_main_view, R.drawable.my_ripple3) } }
                    if (b16[sequencerSize] == 1) { launch { soundPool.play(sound4, soundPoolVolume4, soundPoolVolume4, 1, 0, soundPoolTempo4)
                        tapTiming(R.id.include_main_view4, R.drawable.my_ripple4)} }
                    if (c16[sequencerSize] == 1 && trackCount >= 3) { launch { soundPool.play(sound7, soundPoolVolume7, soundPoolVolume7, 1, 0, soundPoolTempo7)
                        tapTiming(R.id.include_main_view7, R.drawable.my_ripple5)} }
                    if (d16[sequencerSize] == 1 && trackCount >= 4) { launch { soundPool.play(sound10, soundPoolVolume10, soundPoolVolume10, 1, 0, soundPoolTempo10)
                        tapTiming(R.id.include_main_view10, R.drawable.my_ripple6)} }
                    if (e16[sequencerSize] == 1 && trackCount >= 5) { launch { soundPool.play(sound13, soundPoolVolume13, soundPoolVolume13, 1, 0, soundPoolTempo13)
                        tapTiming(R.id.include_main_view13, R.drawable.my_ripple7)} }
                    if (f16[sequencerSize] == 1 && trackCount >= 6) { launch { soundPool.play(sound2, soundPoolVolume2, soundPoolVolume2, 1, 0, soundPoolTempo2)
                        tapTiming(R.id.include_main_view2, R.drawable.my_ripple3)} }
                    if (g16[sequencerSize] == 1 && trackCount >= 7) { launch { soundPool.play(sound5, soundPoolVolume5, soundPoolVolume5, 1, 0, soundPoolTempo5)
                        tapTiming(R.id.include_main_view5, R.drawable.my_ripple4)} }
                    if (h16[sequencerSize] == 1 && trackCount >= 8) { launch { soundPool.play(sound8, soundPoolVolume8, soundPoolVolume8, 1, 0, soundPoolTempo8)
                        tapTiming(R.id.include_main_view8, R.drawable.my_ripple5)} }
                    if (i16[sequencerSize] == 1 && trackCount >= 9) { launch { soundPool.play(sound11, soundPoolVolume11, soundPoolVolume11, 1, 0, soundPoolTempo11)
                        tapTiming(R.id.include_main_view11, R.drawable.my_ripple6)} }
                    if (j16[sequencerSize] == 1 && trackCount >= 10) { launch { soundPool.play(sound14, soundPoolVolume14, soundPoolVolume14, 1, 0, soundPoolTempo14)
                        tapTiming(R.id.include_main_view14, R.drawable.my_ripple7)} }
                    if (k16[sequencerSize] == 1 && trackCount >= 11) { launch { soundPool.play(sound3, soundPoolVolume3, soundPoolVolume3, 1, 0, soundPoolTempo3)
                        tapTiming(R.id.include_main_view3, R.drawable.my_ripple3)} }
                    if (l16[sequencerSize] == 1 && trackCount >= 12) { launch { soundPool.play(sound6, soundPoolVolume6, soundPoolVolume6, 1, 0, soundPoolTempo6)
                        tapTiming(R.id.include_main_view6, R.drawable.my_ripple4)} }
                    if (m16[sequencerSize] == 1 && trackCount >= 13) { launch { soundPool.play(sound9, soundPoolVolume9, soundPoolVolume9, 1, 0, soundPoolTempo9)
                        tapTiming(R.id.include_main_view9, R.drawable.my_ripple5)} }
                    if (n16[sequencerSize] == 1 && trackCount >= 14) { launch { soundPool.play(sound12, soundPoolVolume12, soundPoolVolume12, 1, 0, soundPoolTempo12)
                        tapTiming(R.id.include_main_view12, R.drawable.my_ripple6)} }
                    if (o16[sequencerSize] == 1 && trackCount >= 15) { launch { soundPool.play(sound15, soundPoolVolume15, soundPoolVolume15, 1, 0, soundPoolTempo15)
                        tapTiming(R.id.include_main_view15, R.drawable.my_ripple7)} }
                    launch { findViewById<View>(R.id.sequencer_view).findViewById<TextView>(R.id.number15).setBackgroundColor(Color.parseColor("#5A5A66")) }
                    launch { findViewById<View>(R.id.sequencer_view).findViewById<TextView>(R.id.number16).setBackgroundColor(Color.parseColor("#FFFFFF")) }
                    sequencerCount = 0
                    if (sequencerSize >= sequencerMaxSize) {
                        sequencerSize = 0
                        if (modeCheck == 1) {
                            findViewById<View>(R.id.line_measure).findViewById<TextView>(R.id.measure).text =
                                (sequencerSize + 1).toString()
                            changeSequence()
                        }
                    } else {
                        sequencerSize++
                        if (modeCheck == 1) {
                            findViewById<View>(R.id.line_measure).findViewById<TextView>(R.id.measure).text =
                                (sequencerSize + 1).toString()
                            changeSequence()
                        }
                    }
                }
                }
            }
        }
    }

    @SuppressLint("SetTextI18n")
    private fun gamePlay() {
            runBlocking {
                val job2 = launch {
                    soundPool.play(sound17, 1.0f, 1.0f, 0, 0, 1.0f)
                    soundPool.play(sound17, 1.0f, 1.0f, 0, 0, 1.0f)
                    soundPool.play(sound17, 1.0f, 1.0f, 0, 0, 1.0f)
                    delay(100)
                }
                job2.join()
            }
            findViewById<Spinner>(R.id.mode_spinner).isEnabled = false
            sequencerSize = 0
            sequencerCount = 32
            duplicateCheck(0)
            score = 0
            missScore = 0
        hitScore = 0
        when(trackCount) {
            2 -> {
                when (sequencerMaxSize) {
                    0 -> {
                        maxScore = scoreCount(a1, b1, zero, zero, zero, zero, zero, zero, zero, zero, zero, zero, zero, zero, zero) * 8
                    }
                    1 -> {
                        maxScore = scoreCount(a1, b1, zero, zero, zero, zero, zero, zero, zero, zero, zero, zero, zero, zero, zero) * 4 +
                                scoreCount(a2, b2, zero, zero, zero, zero, zero, zero, zero, zero, zero, zero, zero, zero, zero) * 4
                    }
                    2 -> {
                        maxScore = scoreCount(a1, b1, zero, zero, zero, zero, zero, zero, zero, zero, zero, zero, zero, zero, zero) * 3 +
                                scoreCount(a2, b2, zero, zero, zero, zero, zero, zero, zero, zero, zero, zero, zero, zero, zero) * 3 +
                                scoreCount(a3, b3, zero, zero, zero, zero, zero, zero, zero, zero, zero, zero, zero, zero, zero) * 2
                    }
                    3 -> {
                        maxScore = scoreCount(a1, b1, zero, zero, zero, zero, zero, zero, zero, zero, zero, zero, zero, zero, zero) * 2 +
                                scoreCount(a2, b2, zero, zero, zero, zero, zero, zero, zero, zero, zero, zero, zero, zero, zero) * 2 +
                                scoreCount(a3, b3, zero, zero, zero, zero, zero, zero, zero, zero, zero, zero, zero, zero, zero) * 2 +
                                scoreCount(a4, b4, zero, zero, zero, zero, zero, zero, zero, zero, zero, zero, zero, zero, zero) * 2
                    }
                    4 -> {
                        maxScore = scoreCount(a1, b1, zero, zero, zero, zero, zero, zero, zero, zero, zero, zero, zero, zero, zero) * 2 +
                                scoreCount(a2, b2, zero, zero, zero, zero, zero, zero, zero, zero, zero, zero, zero, zero, zero) * 2 +
                                scoreCount(a3, b3, zero, zero, zero, zero, zero, zero, zero, zero, zero, zero, zero, zero, zero) * 2 +
                                scoreCount(a4, b4, zero, zero, zero, zero, zero, zero, zero, zero, zero, zero, zero, zero, zero) +
                                scoreCount(a5, b5, zero, zero, zero, zero, zero, zero, zero, zero, zero, zero, zero, zero, zero)
                    }
                    5 -> {
                        maxScore = scoreCount(a1, b1, zero, zero, zero, zero, zero, zero, zero, zero, zero, zero, zero, zero, zero) * 2 +
                                scoreCount(a2, b2, zero, zero, zero, zero, zero, zero, zero, zero, zero, zero, zero, zero, zero) * 2 +
                                scoreCount(a3, b3, zero, zero, zero, zero, zero, zero, zero, zero, zero, zero, zero, zero, zero) +
                                scoreCount(a4, b4, zero, zero, zero, zero, zero, zero, zero, zero, zero, zero, zero, zero, zero) +
                                scoreCount(a5, b5, zero, zero, zero, zero, zero, zero, zero, zero, zero, zero, zero, zero, zero) +
                                scoreCount(a6, b6, zero, zero, zero, zero, zero, zero, zero, zero, zero, zero, zero, zero, zero)
                    }
                    6 -> {
                        maxScore = scoreCount(a1, b1, zero, zero, zero, zero, zero, zero, zero, zero, zero, zero, zero, zero, zero) * 2 +
                                scoreCount(a2, b2, zero, zero, zero, zero, zero, zero, zero, zero, zero, zero, zero, zero, zero) +
                                scoreCount(a3, b3, zero, zero, zero, zero, zero, zero, zero, zero, zero, zero, zero, zero, zero) +
                                scoreCount(a4, b4, zero, zero, zero, zero, zero, zero, zero, zero, zero, zero, zero, zero, zero) +
                                scoreCount(a5, b5, zero, zero, zero, zero, zero, zero, zero, zero, zero, zero, zero, zero, zero) +
                                scoreCount(a6, b6, zero, zero, zero, zero, zero, zero, zero, zero, zero, zero, zero, zero, zero) +
                                scoreCount(a7, b7, zero, zero, zero, zero, zero, zero, zero, zero, zero, zero, zero, zero, zero)
                    }
                    7 -> {
                        maxScore = scoreCount(a1, b1, zero, zero, zero, zero, zero, zero, zero, zero, zero, zero, zero, zero, zero) +
                                scoreCount(a2, b2, zero, zero, zero, zero, zero, zero, zero, zero, zero, zero, zero, zero, zero) +
                                scoreCount(a3, b3, zero, zero, zero, zero, zero, zero, zero, zero, zero, zero, zero, zero, zero) +
                                scoreCount(a4, b4, zero, zero, zero, zero, zero, zero, zero, zero, zero, zero, zero, zero, zero) +
                                scoreCount(a5, b5, zero, zero, zero, zero, zero, zero, zero, zero, zero, zero, zero, zero, zero) +
                                scoreCount(a6, b6, zero, zero, zero, zero, zero, zero, zero, zero, zero, zero, zero, zero, zero) +
                                scoreCount(a7, b7, zero, zero, zero, zero, zero, zero, zero, zero, zero, zero, zero, zero, zero) +
                                scoreCount(a8, b8, zero, zero, zero, zero, zero, zero, zero, zero, zero, zero, zero, zero, zero)
                    }
                }
            }
            3 -> {
                when (sequencerMaxSize) {
                    0 -> {
                        maxScore = scoreCount(a1, b1, c1, zero, zero, zero, zero, zero, zero, zero, zero, zero, zero, zero, zero) * 8
                    }
                    1 -> {
                        maxScore = scoreCount(a1, b1, c1, zero, zero, zero, zero, zero, zero, zero, zero, zero, zero, zero, zero) * 4 +
                                scoreCount(a2, b2, c2, zero, zero, zero, zero, zero, zero, zero, zero, zero, zero, zero, zero) * 4
                    }
                    2 -> {
                        maxScore = scoreCount(a1, b1, c1, zero, zero, zero, zero, zero, zero, zero, zero, zero, zero, zero, zero) * 3 +
                                scoreCount(a2, b2, c2, zero, zero, zero, zero, zero, zero, zero, zero, zero, zero, zero, zero) * 3 +
                                scoreCount(a3, b3, c3, zero, zero, zero, zero, zero, zero, zero, zero, zero, zero, zero, zero) * 2
                    }
                    3 -> {
                        maxScore = scoreCount(a1, b1, c1, zero, zero, zero, zero, zero, zero, zero, zero, zero, zero, zero, zero) * 2 +
                                scoreCount(a2, b2, c2, zero, zero, zero, zero, zero, zero, zero, zero, zero, zero, zero, zero) * 2 +
                                scoreCount(a3, b3, c3, zero, zero, zero, zero, zero, zero, zero, zero, zero, zero, zero, zero) * 2 +
                                scoreCount(a4, b4, c4, zero, zero, zero, zero, zero, zero, zero, zero, zero, zero, zero, zero) * 2
                    }
                    4 -> {
                        maxScore = scoreCount(a1, b1, c1, zero, zero, zero, zero, zero, zero, zero, zero, zero, zero, zero, zero) * 2 +
                                scoreCount(a2, b2, c2, zero, zero, zero, zero, zero, zero, zero, zero, zero, zero, zero, zero) * 2 +
                                scoreCount(a3, b3, c3, zero, zero, zero, zero, zero, zero, zero, zero, zero, zero, zero, zero) * 2 +
                                scoreCount(a4, b4, c4, zero, zero, zero, zero, zero, zero, zero, zero, zero, zero, zero, zero) +
                                scoreCount(a5, b5, c5, zero, zero, zero, zero, zero, zero, zero, zero, zero, zero, zero, zero)
                    }
                    5 -> {
                        maxScore = scoreCount(a1, b1, c1, zero, zero, zero, zero, zero, zero, zero, zero, zero, zero, zero, zero) * 2 +
                                scoreCount(a2, b2, c2, zero, zero, zero, zero, zero, zero, zero, zero, zero, zero, zero, zero) * 2 +
                                scoreCount(a3, b3, c3, zero, zero, zero, zero, zero, zero, zero, zero, zero, zero, zero, zero) +
                                scoreCount(a4, b4, c4, zero, zero, zero, zero, zero, zero, zero, zero, zero, zero, zero, zero) +
                                scoreCount(a5, b5, c5, zero, zero, zero, zero, zero, zero, zero, zero, zero, zero, zero, zero) +
                                scoreCount(a6, b6, c6, zero, zero, zero, zero, zero, zero, zero, zero, zero, zero, zero, zero)
                    }
                    6 -> {
                        maxScore = scoreCount(a1, b1, c1, zero, zero, zero, zero, zero, zero, zero, zero, zero, zero, zero, zero) * 2 +
                                scoreCount(a2, b2, c2, zero, zero, zero, zero, zero, zero, zero, zero, zero, zero, zero, zero) +
                                scoreCount(a3, b3, c3, zero, zero, zero, zero, zero, zero, zero, zero, zero, zero, zero, zero) +
                                scoreCount(a4, b4, c4, zero, zero, zero, zero, zero, zero, zero, zero, zero, zero, zero, zero) +
                                scoreCount(a5, b5, c5, zero, zero, zero, zero, zero, zero, zero, zero, zero, zero, zero, zero) +
                                scoreCount(a6, b6, c6, zero, zero, zero, zero, zero, zero, zero, zero, zero, zero, zero, zero) +
                                scoreCount(a7, b7, c7, zero, zero, zero, zero, zero, zero, zero, zero, zero, zero, zero, zero)
                    }
                    7 -> {
                        maxScore = scoreCount(a1, b1, c1, zero, zero, zero, zero, zero, zero, zero, zero, zero, zero, zero, zero) +
                                scoreCount(a2, b2, c2, zero, zero, zero, zero, zero, zero, zero, zero, zero, zero, zero, zero) +
                                scoreCount(a3, b3, c3, zero, zero, zero, zero, zero, zero, zero, zero, zero, zero, zero, zero) +
                                scoreCount(a4, b4, c4, zero, zero, zero, zero, zero, zero, zero, zero, zero, zero, zero, zero) +
                                scoreCount(a5, b5, c5, zero, zero, zero, zero, zero, zero, zero, zero, zero, zero, zero, zero) +
                                scoreCount(a6, b6, c6, zero, zero, zero, zero, zero, zero, zero, zero, zero, zero, zero, zero) +
                                scoreCount(a7, b7, c7, zero, zero, zero, zero, zero, zero, zero, zero, zero, zero, zero, zero) +
                                scoreCount(a8, b8, c8, zero, zero, zero, zero, zero, zero, zero, zero, zero, zero, zero, zero)
                    }
                }
            }
            4 -> {
                when (sequencerMaxSize) {
                    0 -> {
                        maxScore = scoreCount(a1, b1, c1, d1, zero, zero, zero, zero, zero, zero, zero, zero, zero, zero, zero) * 8
                    }
                    1 -> {
                        maxScore = scoreCount(a1, b1, c1, d1, zero, zero, zero, zero, zero, zero, zero, zero, zero, zero, zero) * 4 +
                                scoreCount(a2, b2, c2, d2, zero, zero, zero, zero, zero, zero, zero, zero, zero, zero, zero) * 4
                    }
                    2 -> {
                        maxScore = scoreCount(a1, b1, c1, d1, zero, zero, zero, zero, zero, zero, zero, zero, zero, zero, zero) * 3 +
                                scoreCount(a2, b2, c2, d2, zero, zero, zero, zero, zero, zero, zero, zero, zero, zero, zero) * 3 +
                                scoreCount(a3, b3, c3, d3, zero, zero, zero, zero, zero, zero, zero, zero, zero, zero, zero) * 2
                    }
                    3 -> {
                        maxScore = scoreCount(a1, b1, c1, d1, zero, zero, zero, zero, zero, zero, zero, zero, zero, zero, zero) * 2 +
                                scoreCount(a2, b2, c2, d2, zero, zero, zero, zero, zero, zero, zero, zero, zero, zero, zero) * 2 +
                                scoreCount(a3, b3, c3, d3, zero, zero, zero, zero, zero, zero, zero, zero, zero, zero, zero) * 2 +
                                scoreCount(a4, b4, c4, d4, zero, zero, zero, zero, zero, zero, zero, zero, zero, zero, zero) * 2
                    }
                    4 -> {
                        maxScore = scoreCount(a1, b1, c1, d1, zero, zero, zero, zero, zero, zero, zero, zero, zero, zero, zero) * 2 +
                                scoreCount(a2, b2, c2, d2, zero, zero, zero, zero, zero, zero, zero, zero, zero, zero, zero) * 2 +
                                scoreCount(a3, b3, c3, d3, zero, zero, zero, zero, zero, zero, zero, zero, zero, zero, zero) * 2 +
                                scoreCount(a4, b4, c4, d4, zero, zero, zero, zero, zero, zero, zero, zero, zero, zero, zero) +
                                scoreCount(a5, b5, c5, d5, zero, zero, zero, zero, zero, zero, zero, zero, zero, zero, zero)
                    }
                    5 -> {
                        maxScore = scoreCount(a1, b1, c1, d1, zero, zero, zero, zero, zero, zero, zero, zero, zero, zero, zero) * 2 +
                                scoreCount(a2, b2, c2, d2, zero, zero, zero, zero, zero, zero, zero, zero, zero, zero, zero) * 2 +
                                scoreCount(a3, b3, c3, d3, zero, zero, zero, zero, zero, zero, zero, zero, zero, zero, zero) +
                                scoreCount(a4, b4, c4, d4, zero, zero, zero, zero, zero, zero, zero, zero, zero, zero, zero) +
                                scoreCount(a5, b5, c5, d5, zero, zero, zero, zero, zero, zero, zero, zero, zero, zero, zero) +
                                scoreCount(a6, b6, c6, d6, zero, zero, zero, zero, zero, zero, zero, zero, zero, zero, zero)
                    }
                    6 -> {
                        maxScore = scoreCount(a1, b1, c1, d1, zero, zero, zero, zero, zero, zero, zero, zero, zero, zero, zero) * 2 +
                                scoreCount(a2, b2, c2, d2, zero, zero, zero, zero, zero, zero, zero, zero, zero, zero, zero) +
                                scoreCount(a3, b3, c3, d3, zero, zero, zero, zero, zero, zero, zero, zero, zero, zero, zero) +
                                scoreCount(a4, b4, c4, d4, zero, zero, zero, zero, zero, zero, zero, zero, zero, zero, zero) +
                                scoreCount(a5, b5, c5, d5, zero, zero, zero, zero, zero, zero, zero, zero, zero, zero, zero) +
                                scoreCount(a6, b6, c6, d6, zero, zero, zero, zero, zero, zero, zero, zero, zero, zero, zero) +
                                scoreCount(a7, b7, c7, d7, zero, zero, zero, zero, zero, zero, zero, zero, zero, zero, zero)
                    }
                    7 -> {
                        maxScore = scoreCount(a1, b1, c1, d1, zero, zero, zero, zero, zero, zero, zero, zero, zero, zero, zero) +
                                scoreCount(a2, b2, c2, d2, zero, zero, zero, zero, zero, zero, zero, zero, zero, zero, zero) +
                                scoreCount(a3, b3, c3, d3, zero, zero, zero, zero, zero, zero, zero, zero, zero, zero, zero) +
                                scoreCount(a4, b4, c4, d4, zero, zero, zero, zero, zero, zero, zero, zero, zero, zero, zero) +
                                scoreCount(a5, b5, c5, d5, zero, zero, zero, zero, zero, zero, zero, zero, zero, zero, zero) +
                                scoreCount(a6, b6, c6, d6, zero, zero, zero, zero, zero, zero, zero, zero, zero, zero, zero) +
                                scoreCount(a7, b7, c7, d7, zero, zero, zero, zero, zero, zero, zero, zero, zero, zero, zero) +
                                scoreCount(a8, b8, c8, d8, zero, zero, zero, zero, zero, zero, zero, zero, zero, zero, zero)
                    }
                }
            }
            5 -> {
                when (sequencerMaxSize) {
                    0 -> {
                        maxScore = scoreCount(a1, b1, c1, d1, e1, zero, zero, zero, zero, zero, zero, zero, zero, zero, zero) * 8
                    }
                    1 -> {
                        maxScore = scoreCount(a1, b1, c1, d1, e1, zero, zero, zero, zero, zero, zero, zero, zero, zero, zero) * 4 +
                                scoreCount(a2, b2, c2, d2, e2, zero, zero, zero, zero, zero, zero, zero, zero, zero, zero) * 4
                    }
                    2 -> {
                        maxScore = scoreCount(a1, b1, c1, d1, e1, zero, zero, zero, zero, zero, zero, zero, zero, zero, zero) * 3 +
                                scoreCount(a2, b2, c2, d2, e2, zero, zero, zero, zero, zero, zero, zero, zero, zero, zero) * 3 +
                                scoreCount(a3, b3, c3, d3, e3, zero, zero, zero, zero, zero, zero, zero, zero, zero, zero) * 2
                    }
                    3 -> {
                        maxScore = scoreCount(a1, b1, c1, d1, e1, zero, zero, zero, zero, zero, zero, zero, zero, zero, zero) * 2 +
                                scoreCount(a2, b2, c2, d2, e2, zero, zero, zero, zero, zero, zero, zero, zero, zero, zero) * 2 +
                                scoreCount(a3, b3, c3, d3, e3, zero, zero, zero, zero, zero, zero, zero, zero, zero, zero) * 2 +
                                scoreCount(a4, b4, c4, d4, e4, zero, zero, zero, zero, zero, zero, zero, zero, zero, zero) * 2
                    }
                    4 -> {
                        maxScore = scoreCount(a1, b1, c1, d1, e1, zero, zero, zero, zero, zero, zero, zero, zero, zero, zero) * 2 +
                                scoreCount(a2, b2, c2, d2, e2, zero, zero, zero, zero, zero, zero, zero, zero, zero, zero) * 2 +
                                scoreCount(a3, b3, c3, d3, e3, zero, zero, zero, zero, zero, zero, zero, zero, zero, zero) * 2 +
                                scoreCount(a4, b4, c4, d4, e4, zero, zero, zero, zero, zero, zero, zero, zero, zero, zero) +
                                scoreCount(a5, b5, c5, d5, e5, zero, zero, zero, zero, zero, zero, zero, zero, zero, zero)
                    }
                    5 -> {
                        maxScore = scoreCount(a1, b1, c1, d1, e1, zero, zero, zero, zero, zero, zero, zero, zero, zero, zero) * 2 +
                                scoreCount(a2, b2, c2, d2, e2, zero, zero, zero, zero, zero, zero, zero, zero, zero, zero) * 2 +
                                scoreCount(a3, b3, c3, d3, e3, zero, zero, zero, zero, zero, zero, zero, zero, zero, zero) +
                                scoreCount(a4, b4, c4, d4, e4, zero, zero, zero, zero, zero, zero, zero, zero, zero, zero) +
                                scoreCount(a5, b5, c5, d5, e5, zero, zero, zero, zero, zero, zero, zero, zero, zero, zero) +
                                scoreCount(a6, b6, c6, d6, e6, zero, zero, zero, zero, zero, zero, zero, zero, zero, zero)
                    }
                    6 -> {
                        maxScore = scoreCount(a1, b1, c1, d1, e1, zero, zero, zero, zero, zero, zero, zero, zero, zero, zero) * 2 +
                                scoreCount(a2, b2, c2, d2, e2, zero, zero, zero, zero, zero, zero, zero, zero, zero, zero) +
                                scoreCount(a3, b3, c3, d3, e3, zero, zero, zero, zero, zero, zero, zero, zero, zero, zero) +
                                scoreCount(a4, b4, c4, d4, e4, zero, zero, zero, zero, zero, zero, zero, zero, zero, zero) +
                                scoreCount(a5, b5, c5, d5, e5, zero, zero, zero, zero, zero, zero, zero, zero, zero, zero) +
                                scoreCount(a6, b6, c6, d6, e6, zero, zero, zero, zero, zero, zero, zero, zero, zero, zero) +
                                scoreCount(a7, b7, c7, d7, e7, zero, zero, zero, zero, zero, zero, zero, zero, zero, zero)
                    }
                    7 -> {
                        maxScore = scoreCount(a1, b1, c1, d1, e1, zero, zero, zero, zero, zero, zero, zero, zero, zero, zero) +
                                scoreCount(a2, b2, c2, d2, e2, zero, zero, zero, zero, zero, zero, zero, zero, zero, zero) +
                                scoreCount(a3, b3, c3, d3, e3, zero, zero, zero, zero, zero, zero, zero, zero, zero, zero) +
                                scoreCount(a4, b4, c4, d4, e4, zero, zero, zero, zero, zero, zero, zero, zero, zero, zero) +
                                scoreCount(a5, b5, c5, d5, e5, zero, zero, zero, zero, zero, zero, zero, zero, zero, zero) +
                                scoreCount(a6, b6, c6, d6, e6, zero, zero, zero, zero, zero, zero, zero, zero, zero, zero) +
                                scoreCount(a7, b7, c7, d7, e7, zero, zero, zero, zero, zero, zero, zero, zero, zero, zero) +
                                scoreCount(a8, b8, c8, d8, e8, zero, zero, zero, zero, zero, zero, zero, zero, zero, zero)
                    }
                }
            }
            6 -> {
                when (sequencerMaxSize) {
                    0 -> {
                        maxScore = scoreCount(a1, b1, c1, d1, e1, f1, zero, zero, zero, zero, zero, zero, zero, zero, zero) * 8
                    }
                    1 -> {
                        maxScore = scoreCount(a1, b1, c1, d1, e1, f1, zero, zero, zero, zero, zero, zero, zero, zero, zero) * 4 +
                                scoreCount(a2, b2, c2, d2, e2, f2, zero, zero, zero, zero, zero, zero, zero, zero, zero) * 4
                    }
                    2 -> {
                        maxScore = scoreCount(a1, b1, c1, d1, e1, f1, zero, zero, zero, zero, zero, zero, zero, zero, zero) * 3 +
                                scoreCount(a2, b2, c2, d2, e2, f2, zero, zero, zero, zero, zero, zero, zero, zero, zero) * 3 +
                                scoreCount(a3, b3, c3, d3, e3, f3, zero, zero, zero, zero, zero, zero, zero, zero, zero) * 2
                    }
                    3 -> {
                        maxScore = scoreCount(a1, b1, c1, d1, e1, f1, zero, zero, zero, zero, zero, zero, zero, zero, zero) * 2 +
                                scoreCount(a2, b2, c2, d2, e2, f2, zero, zero, zero, zero, zero, zero, zero, zero, zero) * 2 +
                                scoreCount(a3, b3, c3, d3, e3, f3, zero, zero, zero, zero, zero, zero, zero, zero, zero) * 2 +
                                scoreCount(a4, b4, c4, d4, e4, f4, zero, zero, zero, zero, zero, zero, zero, zero, zero) * 2
                    }
                    4 -> {
                        maxScore = scoreCount(a1, b1, c1, d1, e1, f1, zero, zero, zero, zero, zero, zero, zero, zero, zero) * 2 +
                                scoreCount(a2, b2, c2, d2, e2, f2, zero, zero, zero, zero, zero, zero, zero, zero, zero) * 2 +
                                scoreCount(a3, b3, c3, d3, e3, f3, zero, zero, zero, zero, zero, zero, zero, zero, zero) * 2 +
                                scoreCount(a4, b4, c4, d4, e4, f4, zero, zero, zero, zero, zero, zero, zero, zero, zero) +
                                scoreCount(a5, b5, c5, d5, e5, f5, zero, zero, zero, zero, zero, zero, zero, zero, zero)
                    }
                    5 -> {
                        maxScore = scoreCount(a1, b1, c1, d1, e1, f1, zero, zero, zero, zero, zero, zero, zero, zero, zero) * 2 +
                                scoreCount(a2, b2, c2, d2, e2, f2, zero, zero, zero, zero, zero, zero, zero, zero, zero) * 2 +
                                scoreCount(a3, b3, c3, d3, e3, f3, zero, zero, zero, zero, zero, zero, zero, zero, zero) +
                                scoreCount(a4, b4, c4, d4, e4, f4, zero, zero, zero, zero, zero, zero, zero, zero, zero) +
                                scoreCount(a5, b5, c5, d5, e5, f5, zero, zero, zero, zero, zero, zero, zero, zero, zero) +
                                scoreCount(a6, b6, c6, d6, e6, f6, zero, zero, zero, zero, zero, zero, zero, zero, zero)
                    }
                    6 -> {
                        maxScore = scoreCount(a1, b1, c1, d1, e1, f1, zero, zero, zero, zero, zero, zero, zero, zero, zero) * 2 +
                                scoreCount(a2, b2, c2, d2, e2, f2, zero, zero, zero, zero, zero, zero, zero, zero, zero) +
                                scoreCount(a3, b3, c3, d3, e3, f3, zero, zero, zero, zero, zero, zero, zero, zero, zero) +
                                scoreCount(a4, b4, c4, d4, e4, f4, zero, zero, zero, zero, zero, zero, zero, zero, zero) +
                                scoreCount(a5, b5, c5, d5, e5, f5, zero, zero, zero, zero, zero, zero, zero, zero, zero) +
                                scoreCount(a6, b6, c6, d6, e6, f6, zero, zero, zero, zero, zero, zero, zero, zero, zero) +
                                scoreCount(a7, b7, c7, d7, e7, f7, zero, zero, zero, zero, zero, zero, zero, zero, zero)
                    }
                    7 -> {
                        maxScore = scoreCount(a1, b1, c1, d1, e1, f1, zero, zero, zero, zero, zero, zero, zero, zero, zero) +
                                scoreCount(a2, b2, c2, d2, e2, f2, zero, zero, zero, zero, zero, zero, zero, zero, zero) +
                                scoreCount(a3, b3, c3, d3, e3, f3, zero, zero, zero, zero, zero, zero, zero, zero, zero) +
                                scoreCount(a4, b4, c4, d4, e4, f4, zero, zero, zero, zero, zero, zero, zero, zero, zero) +
                                scoreCount(a5, b5, c5, d5, e5, f5, zero, zero, zero, zero, zero, zero, zero, zero, zero) +
                                scoreCount(a6, b6, c6, d6, e6, f6, zero, zero, zero, zero, zero, zero, zero, zero, zero) +
                                scoreCount(a7, b7, c7, d7, e7, f7, zero, zero, zero, zero, zero, zero, zero, zero, zero) +
                                scoreCount(a8, b8, c8, d8, e8, f8, zero, zero, zero, zero, zero, zero, zero, zero, zero)
                    }
                }
            }
            7 -> {
                when (sequencerMaxSize) {
                    0 -> {
                        maxScore = scoreCount(a1, b1, c1, d1, e1, f1, g1, zero, zero, zero, zero, zero, zero, zero, zero) * 8
                    }
                    1 -> {
                        maxScore = scoreCount(a1, b1, c1, d1, e1, f1, g1, zero, zero, zero, zero, zero, zero, zero, zero) * 4 +
                                scoreCount(a2, b2, c2, d2, e2, f2, g2, zero, zero, zero, zero, zero, zero, zero, zero) * 4
                    }
                    2 -> {
                        maxScore = scoreCount(a1, b1, c1, d1, e1, f1, g1, zero, zero, zero, zero, zero, zero, zero, zero) * 3 +
                                scoreCount(a2, b2, c2, d2, e2, f2, g2, zero, zero, zero, zero, zero, zero, zero, zero) * 3 +
                                scoreCount(a3, b3, c3, d3, e3, f3, g3, zero, zero, zero, zero, zero, zero, zero, zero) * 2
                    }
                    3 -> {
                        maxScore = scoreCount(a1, b1, c1, d1, e1, f1, g1, zero, zero, zero, zero, zero, zero, zero, zero) * 2 +
                                scoreCount(a2, b2, c2, d2, e2, f2, g2, zero, zero, zero, zero, zero, zero, zero, zero) * 2 +
                                scoreCount(a3, b3, c3, d3, e3, f3, g3, zero, zero, zero, zero, zero, zero, zero, zero) * 2 +
                                scoreCount(a4, b4, c4, d4, e4, f4, g4, zero, zero, zero, zero, zero, zero, zero, zero) * 2
                    }
                    4 -> {
                        maxScore = scoreCount(a1, b1, c1, d1, e1, f1, g1, zero, zero, zero, zero, zero, zero, zero, zero) * 2 +
                                scoreCount(a2, b2, c2, d2, e2, f2, g2, zero, zero, zero, zero, zero, zero, zero, zero) * 2 +
                                scoreCount(a3, b3, c3, d3, e3, f3, g3, zero, zero, zero, zero, zero, zero, zero, zero) * 2 +
                                scoreCount(a4, b4, c4, d4, e4, f4, g4, zero, zero, zero, zero, zero, zero, zero, zero) +
                                scoreCount(a5, b5, c5, d5, e5, f5, g5, zero, zero, zero, zero, zero, zero, zero, zero)
                    }
                    5 -> {
                        maxScore = scoreCount(a1, b1, c1, d1, e1, f1, g1, zero, zero, zero, zero, zero, zero, zero, zero) * 2 +
                                scoreCount(a2, b2, c2, d2, e2, f2, g2, zero, zero, zero, zero, zero, zero, zero, zero) * 2 +
                                scoreCount(a3, b3, c3, d3, e3, f3, g3, zero, zero, zero, zero, zero, zero, zero, zero) +
                                scoreCount(a4, b4, c4, d4, e4, f4, g4, zero, zero, zero, zero, zero, zero, zero, zero) +
                                scoreCount(a5, b5, c5, d5, e5, f5, g5, zero, zero, zero, zero, zero, zero, zero, zero) +
                                scoreCount(a6, b6, c6, d6, e6, f6, g6, zero, zero, zero, zero, zero, zero, zero, zero)
                    }
                    6 -> {
                        maxScore = scoreCount(a1, b1, c1, d1, e1, f1, g1, zero, zero, zero, zero, zero, zero, zero, zero) * 2 +
                                scoreCount(a2, b2, c2, d2, e2, f2, g2, zero, zero, zero, zero, zero, zero, zero, zero) +
                                scoreCount(a3, b3, c3, d3, e3, f3, g3, zero, zero, zero, zero, zero, zero, zero, zero) +
                                scoreCount(a4, b4, c4, d4, e4, f4, g4, zero, zero, zero, zero, zero, zero, zero, zero) +
                                scoreCount(a5, b5, c5, d5, e5, f5, g5, zero, zero, zero, zero, zero, zero, zero, zero) +
                                scoreCount(a6, b6, c6, d6, e6, f6, g6, zero, zero, zero, zero, zero, zero, zero, zero) +
                                scoreCount(a7, b7, c7, d7, e7, f7, g7, zero, zero, zero, zero, zero, zero, zero, zero)
                    }
                    7 -> {
                        maxScore = scoreCount(a1, b1, c1, d1, e1, f1, g1, zero, zero, zero, zero, zero, zero, zero, zero) +
                                scoreCount(a2, b2, c2, d2, e2, f2, g2, zero, zero, zero, zero, zero, zero, zero, zero) +
                                scoreCount(a3, b3, c3, d3, e3, f3, g3, zero, zero, zero, zero, zero, zero, zero, zero) +
                                scoreCount(a4, b4, c4, d4, e4, f4, g4, zero, zero, zero, zero, zero, zero, zero, zero) +
                                scoreCount(a5, b5, c5, d5, e5, f5, g5, zero, zero, zero, zero, zero, zero, zero, zero) +
                                scoreCount(a6, b6, c6, d6, e6, f6, g6, zero, zero, zero, zero, zero, zero, zero, zero) +
                                scoreCount(a7, b7, c7, d7, e7, f7, g7, zero, zero, zero, zero, zero, zero, zero, zero) +
                                scoreCount(a8, b8, c8, d8, e8, f8, g8, zero, zero, zero, zero, zero, zero, zero, zero)
                    }
                }
            }
            8 -> {
                when (sequencerMaxSize) {
                    0 -> {
                        maxScore = scoreCount(a1, b1, c1, d1, e1, f1, g1, h1, zero, zero, zero, zero, zero, zero, zero) * 8
                    }
                    1 -> {
                        maxScore = scoreCount(a1, b1, c1, d1, e1, f1, g1, h1, zero, zero, zero, zero, zero, zero, zero) * 4 +
                                scoreCount(a2, b2, c2, d2, e2, f2, g2, h2, zero, zero, zero, zero, zero, zero, zero) * 4
                    }
                    2 -> {
                        maxScore = scoreCount(a1, b1, c1, d1, e1, f1, g1, h1, zero, zero, zero, zero, zero, zero, zero) * 3 +
                                scoreCount(a2, b2, c2, d2, e2, f2, g2, h2, zero, zero, zero, zero, zero, zero, zero) * 3 +
                                scoreCount(a3, b3, c3, d3, e3, f3, g3, h3, zero, zero, zero, zero, zero, zero, zero) * 2
                    }
                    3 -> {
                        maxScore = scoreCount(a1, b1, c1, d1, e1, f1, g1, h1, zero, zero, zero, zero, zero, zero, zero) * 2 +
                                scoreCount(a2, b2, c2, d2, e2, f2, g2, h2, zero, zero, zero, zero, zero, zero, zero) * 2 +
                                scoreCount(a3, b3, c3, d3, e3, f3, g3, h3, zero, zero, zero, zero, zero, zero, zero) * 2 +
                                scoreCount(a4, b4, c4, d4, e4, f4, g4, h4, zero, zero, zero, zero, zero, zero, zero) * 2
                    }
                    4 -> {
                        maxScore = scoreCount(a1, b1, c1, d1, e1, f1, g1, h1, zero, zero, zero, zero, zero, zero, zero) * 2 +
                                scoreCount(a2, b2, c2, d2, e2, f2, g2, h2, zero, zero, zero, zero, zero, zero, zero) * 2 +
                                scoreCount(a3, b3, c3, d3, e3, f3, g3, h3, zero, zero, zero, zero, zero, zero, zero) * 2 +
                                scoreCount(a4, b4, c4, d4, e4, f4, g4, h4, zero, zero, zero, zero, zero, zero, zero) +
                                scoreCount(a5, b5, c5, d5, e5, f5, g5, h5, zero, zero, zero, zero, zero, zero, zero)
                    }
                    5 -> {
                        maxScore = scoreCount(a1, b1, c1, d1, e1, f1, g1, h1, zero, zero, zero, zero, zero, zero, zero) * 2 +
                                scoreCount(a2, b2, c2, d2, e2, f2, g2, h2, zero, zero, zero, zero, zero, zero, zero) * 2 +
                                scoreCount(a3, b3, c3, d3, e3, f3, g3, h3, zero, zero, zero, zero, zero, zero, zero) +
                                scoreCount(a4, b4, c4, d4, e4, f4, g4, h4, zero, zero, zero, zero, zero, zero, zero) +
                                scoreCount(a5, b5, c5, d5, e5, f5, g5, h5, zero, zero, zero, zero, zero, zero, zero) +
                                scoreCount(a6, b6, c6, d6, e6, f6, g6, h6, zero, zero, zero, zero, zero, zero, zero)
                    }
                    6 -> {
                        maxScore = scoreCount(a1, b1, c1, d1, e1, f1, g1, h1, zero, zero, zero, zero, zero, zero, zero) * 2 +
                                scoreCount(a2, b2, c2, d2, e2, f2, g2, h2, zero, zero, zero, zero, zero, zero, zero) +
                                scoreCount(a3, b3, c3, d3, e3, f3, g3, h3, zero, zero, zero, zero, zero, zero, zero) +
                                scoreCount(a4, b4, c4, d4, e4, f4, g4, h4, zero, zero, zero, zero, zero, zero, zero) +
                                scoreCount(a5, b5, c5, d5, e5, f5, g5, h5, zero, zero, zero, zero, zero, zero, zero) +
                                scoreCount(a6, b6, c6, d6, e6, f6, g6, h6, zero, zero, zero, zero, zero, zero, zero) +
                                scoreCount(a7, b7, c7, d7, e7, f7, g7, h7, zero, zero, zero, zero, zero, zero, zero)
                    }
                    7 -> {
                        maxScore = scoreCount(a1, b1, c1, d1, e1, f1, g1, h1, zero, zero, zero, zero, zero, zero, zero) +
                                scoreCount(a2, b2, c2, d2, e2, f2, g2, h2, zero, zero, zero, zero, zero, zero, zero) +
                                scoreCount(a3, b3, c3, d3, e3, f3, g3, h3, zero, zero, zero, zero, zero, zero, zero) +
                                scoreCount(a4, b4, c4, d4, e4, f4, g4, h4, zero, zero, zero, zero, zero, zero, zero) +
                                scoreCount(a5, b5, c5, d5, e5, f5, g5, h5, zero, zero, zero, zero, zero, zero, zero) +
                                scoreCount(a6, b6, c6, d6, e6, f6, g6, h6, zero, zero, zero, zero, zero, zero, zero) +
                                scoreCount(a7, b7, c7, d7, e7, f7, g7, h7, zero, zero, zero, zero, zero, zero, zero) +
                                scoreCount(a8, b8, c8, d8, e8, f8, g8, h8, zero, zero, zero, zero, zero, zero, zero)
                    }
                }
            }
            9 -> {
                when (sequencerMaxSize) {
                    0 -> {
                        maxScore = scoreCount(a1, b1, c1, d1, e1, f1, g1, h1, i1, zero, zero, zero, zero, zero, zero) * 8
                    }
                    1 -> {
                        maxScore = scoreCount(a1, b1, c1, d1, e1, f1, g1, h1, i1, zero, zero, zero, zero, zero, zero) * 4 +
                                scoreCount(a2, b2, c2, d2, e2, f2, g2, h2, i2, zero, zero, zero, zero, zero, zero) * 4
                    }
                    2 -> {
                        maxScore = scoreCount(a1, b1, c1, d1, e1, f1, g1, h1, i1, zero, zero, zero, zero, zero, zero) * 3 +
                                scoreCount(a2, b2, c2, d2, e2, f2, g2, h2, i2, zero, zero, zero, zero, zero, zero) * 3 +
                                scoreCount(a3, b3, c3, d3, e3, f3, g3, h3, i3, zero, zero, zero, zero, zero, zero) * 2
                    }
                    3 -> {
                        maxScore = scoreCount(a1, b1, c1, d1, e1, f1, g1, h1, i1, zero, zero, zero, zero, zero, zero) * 2 +
                                scoreCount(a2, b2, c2, d2, e2, f2, g2, h2, i2, zero, zero, zero, zero, zero, zero) * 2 +
                                scoreCount(a3, b3, c3, d3, e3, f3, g3, h3, i3, zero, zero, zero, zero, zero, zero) * 2 +
                                scoreCount(a4, b4, c4, d4, e4, f4, g4, h4, i4, zero, zero, zero, zero, zero, zero) * 2
                    }
                    4 -> {
                        maxScore = scoreCount(a1, b1, c1, d1, e1, f1, g1, h1, i1, zero, zero, zero, zero, zero, zero) * 2 +
                                scoreCount(a2, b2, c2, d2, e2, f2, g2, h2, i2, zero, zero, zero, zero, zero, zero) * 2 +
                                scoreCount(a3, b3, c3, d3, e3, f3, g3, h3, i3, zero, zero, zero, zero, zero, zero) * 2 +
                                scoreCount(a4, b4, c4, d4, e4, f4, g4, h4, i4, zero, zero, zero, zero, zero, zero) +
                                scoreCount(a5, b5, c5, d5, e5, f5, g5, h5, i5, zero, zero, zero, zero, zero, zero)
                    }
                    5 -> {
                        maxScore = scoreCount(a1, b1, c1, d1, e1, f1, g1, h1, i1, zero, zero, zero, zero, zero, zero) * 2 +
                                scoreCount(a2, b2, c2, d2, e2, f2, g2, h2, i2, zero, zero, zero, zero, zero, zero) * 2 +
                                scoreCount(a3, b3, c3, d3, e3, f3, g3, h3, i3, zero, zero, zero, zero, zero, zero) +
                                scoreCount(a4, b4, c4, d4, e4, f4, g4, h4, i4, zero, zero, zero, zero, zero, zero) +
                                scoreCount(a5, b5, c5, d5, e5, f5, g5, h5, i5, zero, zero, zero, zero, zero, zero) +
                                scoreCount(a6, b6, c6, d6, e6, f6, g6, h6, i6, zero, zero, zero, zero, zero, zero)
                    }
                    6 -> {
                        maxScore = scoreCount(a1, b1, c1, d1, e1, f1, g1, h1, i1, zero, zero, zero, zero, zero, zero) * 2 +
                                scoreCount(a2, b2, c2, d2, e2, f2, g2, h2, i2, zero, zero, zero, zero, zero, zero) +
                                scoreCount(a3, b3, c3, d3, e3, f3, g3, h3, i3, zero, zero, zero, zero, zero, zero) +
                                scoreCount(a4, b4, c4, d4, e4, f4, g4, h4, i4, zero, zero, zero, zero, zero, zero) +
                                scoreCount(a5, b5, c5, d5, e5, f5, g5, h5, i5, zero, zero, zero, zero, zero, zero) +
                                scoreCount(a6, b6, c6, d6, e6, f6, g6, h6, i6, zero, zero, zero, zero, zero, zero) +
                                scoreCount(a7, b7, c7, d7, e7, f7, g7, h7, i7, zero, zero, zero, zero, zero, zero)
                    }
                    7 -> {
                        maxScore = scoreCount(a1, b1, c1, d1, e1, f1, g1, h1, i1, zero, zero, zero, zero, zero, zero) +
                                scoreCount(a2, b2, c2, d2, e2, f2, g2, h2, i2, zero, zero, zero, zero, zero, zero) +
                                scoreCount(a3, b3, c3, d3, e3, f3, g3, h3, i3, zero, zero, zero, zero, zero, zero) +
                                scoreCount(a4, b4, c4, d4, e4, f4, g4, h4, i4, zero, zero, zero, zero, zero, zero) +
                                scoreCount(a5, b5, c5, d5, e5, f5, g5, h5, i5, zero, zero, zero, zero, zero, zero) +
                                scoreCount(a6, b6, c6, d6, e6, f6, g6, h6, i6, zero, zero, zero, zero, zero, zero) +
                                scoreCount(a7, b7, c7, d7, e7, f7, g7, h7, i7, zero, zero, zero, zero, zero, zero) +
                                scoreCount(a8, b8, c8, d8, e8, f8, g8, h8, i8, zero, zero, zero, zero, zero, zero)
                    }
                }
            }
            10 -> {
                when (sequencerMaxSize) {
                    0 -> {
                        maxScore = scoreCount(a1, b1, c1, d1, e1, f1, g1, h1, i1, j1, zero, zero, zero, zero, zero) * 8
                    }
                    1 -> {
                        maxScore = scoreCount(a1, b1, c1, d1, e1, f1, g1, h1, i1, j1, zero, zero, zero, zero, zero) * 4 +
                                scoreCount(a2, b2, c2, d2, e2, f2, g2, h2, i2, j2, zero, zero, zero, zero, zero) * 4
                    }
                    2 -> {
                        maxScore = scoreCount(a1, b1, c1, d1, e1, f1, g1, h1, i1, j1, zero, zero, zero, zero, zero) * 3 +
                                scoreCount(a2, b2, c2, d2, e2, f2, g2, h2, i2, j2, zero, zero, zero, zero, zero) * 3 +
                                scoreCount(a3, b3, c3, d3, e3, f3, g3, h3, i3, j3, zero, zero, zero, zero, zero) * 2
                    }
                    3 -> {
                        maxScore = scoreCount(a1, b1, c1, d1, e1, f1, g1, h1, i1, j1, zero, zero, zero, zero, zero) * 2 +
                                scoreCount(a2, b2, c2, d2, e2, f2, g2, h2, i2, j2, zero, zero, zero, zero, zero) * 2 +
                                scoreCount(a3, b3, c3, d3, e3, f3, g3, h3, i3, j3, zero, zero, zero, zero, zero) * 2 +
                                scoreCount(a4, b4, c4, d4, e4, f4, g4, h4, i4, j4, zero, zero, zero, zero, zero) * 2
                    }
                    4 -> {
                        maxScore = scoreCount(a1, b1, c1, d1, e1, f1, g1, h1, i1, j1, zero, zero, zero, zero, zero) * 2 +
                                scoreCount(a2, b2, c2, d2, e2, f2, g2, h2, i2, j2, zero, zero, zero, zero, zero) * 2 +
                                scoreCount(a3, b3, c3, d3, e3, f3, g3, h3, i3, j3, zero, zero, zero, zero, zero) * 2 +
                                scoreCount(a4, b4, c4, d4, e4, f4, g4, h4, i4, j4, zero, zero, zero, zero, zero) +
                                scoreCount(a5, b5, c5, d5, e5, f5, g5, h5, i5, j5, zero, zero, zero, zero, zero)
                    }
                    5 -> {
                        maxScore = scoreCount(a1, b1, c1, d1, e1, f1, g1, h1, i1, j1, zero, zero, zero, zero, zero) * 2 +
                                scoreCount(a2, b2, c2, d2, e2, f2, g2, h2, i2, j2, zero, zero, zero, zero, zero) * 2 +
                                scoreCount(a3, b3, c3, d3, e3, f3, g3, h3, i3, j3, zero, zero, zero, zero, zero) +
                                scoreCount(a4, b4, c4, d4, e4, f4, g4, h4, i4, j4, zero, zero, zero, zero, zero) +
                                scoreCount(a5, b5, c5, d5, e5, f5, g5, h5, i5, j5, zero, zero, zero, zero, zero) +
                                scoreCount(a6, b6, c6, d6, e6, f6, g6, h6, i6, j6, zero, zero, zero, zero, zero)
                    }
                    6 -> {
                        maxScore = scoreCount(a1, b1, c1, d1, e1, f1, g1, h1, i1, j1, zero, zero, zero, zero, zero) * 2 +
                                scoreCount(a2, b2, c2, d2, e2, f2, g2, h2, i2, j2, zero, zero, zero, zero, zero) +
                                scoreCount(a3, b3, c3, d3, e3, f3, g3, h3, i3, j3, zero, zero, zero, zero, zero) +
                                scoreCount(a4, b4, c4, d4, e4, f4, g4, h4, i4, j4, zero, zero, zero, zero, zero) +
                                scoreCount(a5, b5, c5, d5, e5, f5, g5, h5, i5, j5, zero, zero, zero, zero, zero) +
                                scoreCount(a6, b6, c6, d6, e6, f6, g6, h6, i6, j6, zero, zero, zero, zero, zero) +
                                scoreCount(a7, b7, c7, d7, e7, f7, g7, h7, i7, j7, zero, zero, zero, zero, zero)
                    }
                    7 -> {
                        maxScore = scoreCount(a1, b1, c1, d1, e1, f1, g1, h1, i1, j1, zero, zero, zero, zero, zero) +
                                scoreCount(a2, b2, c2, d2, e2, f2, g2, h2, i2, j2, zero, zero, zero, zero, zero) +
                                scoreCount(a3, b3, c3, d3, e3, f3, g3, h3, i3, j3, zero, zero, zero, zero, zero) +
                                scoreCount(a4, b4, c4, d4, e4, f4, g4, h4, i4, j4, zero, zero, zero, zero, zero) +
                                scoreCount(a5, b5, c5, d5, e5, f5, g5, h5, i5, j5, zero, zero, zero, zero, zero) +
                                scoreCount(a6, b6, c6, d6, e6, f6, g6, h6, i6, j6, zero, zero, zero, zero, zero) +
                                scoreCount(a7, b7, c7, d7, e7, f7, g7, h7, i7, j7, zero, zero, zero, zero, zero) +
                                scoreCount(a8, b8, c8, d8, e8, f8, g8, h8, i8, j8, zero, zero, zero, zero, zero)
                    }
                }
            }
            11 -> {
                when (sequencerMaxSize) {
                    0 -> {
                        maxScore = scoreCount(a1, b1, c1, d1, e1, f1, g1, h1, i1, j1, k1, zero, zero, zero, zero) * 8
                    }
                    1 -> {
                        maxScore = scoreCount(a1, b1, c1, d1, e1, f1, g1, h1, i1, j1, k1, zero, zero, zero, zero) * 4 +
                                scoreCount(a2, b2, c2, d2, e2, f2, g2, h2, i2, j2, k2, zero, zero, zero, zero) * 4
                    }
                    2 -> {
                        maxScore = scoreCount(a1, b1, c1, d1, e1, f1, g1, h1, i1, j1, k1, zero, zero, zero, zero) * 3 +
                                scoreCount(a2, b2, c2, d2, e2, f2, g2, h2, i2, j2, k2, zero, zero, zero, zero) * 3 +
                                scoreCount(a3, b3, c3, d3, e3, f3, g3, h3, i3, j3, k3, zero, zero, zero, zero) * 2
                    }
                    3 -> {
                        maxScore = scoreCount(a1, b1, c1, d1, e1, f1, g1, h1, i1, j1, k1, zero, zero, zero, zero) * 2 +
                                scoreCount(a2, b2, c2, d2, e2, f2, g2, h2, i2, j2, k2, zero, zero, zero, zero) * 2 +
                                scoreCount(a3, b3, c3, d3, e3, f3, g3, h3, i3, j3, k3, zero, zero, zero, zero) * 2 +
                                scoreCount(a4, b4, c4, d4, e4, f4, g4, h4, i4, j4, k4, zero, zero, zero, zero) * 2
                    }
                    4 -> {
                        maxScore = scoreCount(a1, b1, c1, d1, e1, f1, g1, h1, i1, j1, k1, zero, zero, zero, zero) * 2 +
                                scoreCount(a2, b2, c2, d2, e2, f2, g2, h2, i2, j2, k2, zero, zero, zero, zero) * 2 +
                                scoreCount(a3, b3, c3, d3, e3, f3, g3, h3, i3, j3, k3, zero, zero, zero, zero) * 2 +
                                scoreCount(a4, b4, c4, d4, e4, f4, g4, h4, i4, j4, k4, zero, zero, zero, zero) +
                                scoreCount(a5, b5, c5, d5, e5, f5, g5, h5, i5, j5, k5, zero, zero, zero, zero)
                    }
                    5 -> {
                        maxScore = scoreCount(a1, b1, c1, d1, e1, f1, g1, h1, i1, j1, k1, zero, zero, zero, zero) * 2 +
                                scoreCount(a2, b2, c2, d2, e2, f2, g2, h2, i2, j2, k2, zero, zero, zero, zero) * 2 +
                                scoreCount(a3, b3, c3, d3, e3, f3, g3, h3, i3, j3, k3, zero, zero, zero, zero) +
                                scoreCount(a4, b4, c4, d4, e4, f4, g4, h4, i4, j4, k4, zero, zero, zero, zero) +
                                scoreCount(a5, b5, c5, d5, e5, f5, g5, h5, i5, j5, k5, zero, zero, zero, zero) +
                                scoreCount(a6, b6, c6, d6, e6, f6, g6, h6, i6, j6, k6, zero, zero, zero, zero)
                    }
                    6 -> {
                        maxScore = scoreCount(a1, b1, c1, d1, e1, f1, g1, h1, i1, j1, k1, zero, zero, zero, zero) * 2 +
                                scoreCount(a2, b2, c2, d2, e2, f2, g2, h2, i2, j2, k2, zero, zero, zero, zero) +
                                scoreCount(a3, b3, c3, d3, e3, f3, g3, h3, i3, j3, k3, zero, zero, zero, zero) +
                                scoreCount(a4, b4, c4, d4, e4, f4, g4, h4, i4, j4, k4, zero, zero, zero, zero) +
                                scoreCount(a5, b5, c5, d5, e5, f5, g5, h5, i5, j5, k5, zero, zero, zero, zero) +
                                scoreCount(a6, b6, c6, d6, e6, f6, g6, h6, i6, j6, k6, zero, zero, zero, zero) +
                                scoreCount(a7, b7, c7, d7, e7, f7, g7, h7, i7, j7, k7, zero, zero, zero, zero)
                    }
                    7 -> {
                        maxScore = scoreCount(a1, b1, c1, d1, e1, f1, g1, h1, i1, j1, k1, zero, zero, zero, zero) +
                                scoreCount(a2, b2, c2, d2, e2, f2, g2, h2, i2, j2, k2, zero, zero, zero, zero) +
                                scoreCount(a3, b3, c3, d3, e3, f3, g3, h3, i3, j3, k3, zero, zero, zero, zero) +
                                scoreCount(a4, b4, c4, d4, e4, f4, g4, h4, i4, j4, k4, zero, zero, zero, zero) +
                                scoreCount(a5, b5, c5, d5, e5, f5, g5, h5, i5, j5, k5, zero, zero, zero, zero) +
                                scoreCount(a6, b6, c6, d6, e6, f6, g6, h6, i6, j6, k6, zero, zero, zero, zero) +
                                scoreCount(a7, b7, c7, d7, e7, f7, g7, h7, i7, j7, k7, zero, zero, zero, zero) +
                                scoreCount(a8, b8, c8, d8, e8, f8, g8, h8, i8, j8, k8, zero, zero, zero, zero)
                    }
                }
            }
            12 -> {
                when (sequencerMaxSize) {
                    0 -> {
                        maxScore = scoreCount(a1, b1, c1, d1, e1, f1, g1, h1, i1, j1, k1, l1, zero, zero, zero) * 8
                    }
                    1 -> {
                        maxScore = scoreCount(a1, b1, c1, d1, e1, f1, g1, h1, i1, j1, k1, l1, zero, zero, zero) * 4 +
                                scoreCount(a2, b2, c2, d2, e2, f2, g2, h2, i2, j2, k2, l2, zero, zero, zero) * 4
                    }
                    2 -> {
                        maxScore = scoreCount(a1, b1, c1, d1, e1, f1, g1, h1, i1, j1, k1, l1, zero, zero, zero) * 3 +
                                scoreCount(a2, b2, c2, d2, e2, f2, g2, h2, i2, j2, k2, l2, zero, zero, zero) * 3 +
                                scoreCount(a3, b3, c3, d3, e3, f3, g3, h3, i3, j3, k3, l3, zero, zero, zero) * 2
                    }
                    3 -> {
                        maxScore = scoreCount(a1, b1, c1, d1, e1, f1, g1, h1, i1, j1, k1, l1, zero, zero, zero) * 2 +
                                scoreCount(a2, b2, c2, d2, e2, f2, g2, h2, i2, j2, k2, l2, zero, zero, zero) * 2 +
                                scoreCount(a3, b3, c3, d3, e3, f3, g3, h3, i3, j3, k3, l3, zero, zero, zero) * 2 +
                                scoreCount(a4, b4, c4, d4, e4, f4, g4, h4, i4, j4, k4, l4, zero, zero, zero) * 2
                    }
                    4 -> {
                        maxScore = scoreCount(a1, b1, c1, d1, e1, f1, g1, h1, i1, j1, k1, l1, zero, zero, zero) * 2 +
                                scoreCount(a2, b2, c2, d2, e2, f2, g2, h2, i2, j2, k2, l2, zero, zero, zero) * 2 +
                                scoreCount(a3, b3, c3, d3, e3, f3, g3, h3, i3, j3, k3, l3, zero, zero, zero) * 2 +
                                scoreCount(a4, b4, c4, d4, e4, f4, g4, h4, i4, j4, k4, l4, zero, zero, zero) +
                                scoreCount(a5, b5, c5, d5, e5, f5, g5, h5, i5, j5, k5, l5, zero, zero, zero)
                    }
                    5 -> {
                        maxScore = scoreCount(a1, b1, c1, d1, e1, f1, g1, h1, i1, j1, k1, l1, zero, zero, zero) * 2 +
                                scoreCount(a2, b2, c2, d2, e2, f2, g2, h2, i2, j2, k2, l2, zero, zero, zero) * 2 +
                                scoreCount(a3, b3, c3, d3, e3, f3, g3, h3, i3, j3, k3, l3, zero, zero, zero) +
                                scoreCount(a4, b4, c4, d4, e4, f4, g4, h4, i4, j4, k4, l4, zero, zero, zero) +
                                scoreCount(a5, b5, c5, d5, e5, f5, g5, h5, i5, j5, k5, l5, zero, zero, zero) +
                                scoreCount(a6, b6, c6, d6, e6, f6, g6, h6, i6, j6, k6, l6, zero, zero, zero)
                    }
                    6 -> {
                        maxScore = scoreCount(a1, b1, c1, d1, e1, f1, g1, h1, i1, j1, k1, l1, zero, zero, zero) * 2 +
                                scoreCount(a2, b2, c2, d2, e2, f2, g2, h2, i2, j2, k2, l2, zero, zero, zero) +
                                scoreCount(a3, b3, c3, d3, e3, f3, g3, h3, i3, j3, k3, l3, zero, zero, zero) +
                                scoreCount(a4, b4, c4, d4, e4, f4, g4, h4, i4, j4, k4, l4, zero, zero, zero) +
                                scoreCount(a5, b5, c5, d5, e5, f5, g5, h5, i5, j5, k5, l5, zero, zero, zero) +
                                scoreCount(a6, b6, c6, d6, e6, f6, g6, h6, i6, j6, k6, l6, zero, zero, zero) +
                                scoreCount(a7, b7, c7, d7, e7, f7, g7, h7, i7, j7, k7, l7, zero, zero, zero)
                    }
                    7 -> {
                        maxScore = scoreCount(a1, b1, c1, d1, e1, f1, g1, h1, i1, j1, k1, l1, zero, zero, zero) +
                                scoreCount(a2, b2, c2, d2, e2, f2, g2, h2, i2, j2, k2, l2, zero, zero, zero) +
                                scoreCount(a3, b3, c3, d3, e3, f3, g3, h3, i3, j3, k3, l3, zero, zero, zero) +
                                scoreCount(a4, b4, c4, d4, e4, f4, g4, h4, i4, j4, k4, l4, zero, zero, zero) +
                                scoreCount(a5, b5, c5, d5, e5, f5, g5, h5, i5, j5, k5, l5, zero, zero, zero) +
                                scoreCount(a6, b6, c6, d6, e6, f6, g6, h6, i6, j6, k6, l6, zero, zero, zero) +
                                scoreCount(a7, b7, c7, d7, e7, f7, g7, h7, i7, j7, k7, l7, zero, zero, zero) +
                                scoreCount(a8, b8, c8, d8, e8, f8, g8, h8, i8, j8, k8, l8, zero, zero, zero)
                    }
                }
            }
            13 -> {
                when (sequencerMaxSize) {
                    0 -> {
                        maxScore = scoreCount(a1, b1, c1, d1, e1, f1, g1, h1, i1, j1, k1, l1, m1, zero, zero) * 8
                    }
                    1 -> {
                        maxScore = scoreCount(a1, b1, c1, d1, e1, f1, g1, h1, i1, j1, k1, l1, m1, zero, zero) * 4 +
                                scoreCount(a2, b2, c2, d2, e2, f2, g2, h2, i2, j2, k2, l2, m2, zero, zero) * 4
                    }
                    2 -> {
                        maxScore = scoreCount(a1, b1, c1, d1, e1, f1, g1, h1, i1, j1, k1, l1, m1, zero, zero) * 3 +
                                scoreCount(a2, b2, c2, d2, e2, f2, g2, h2, i2, j2, k2, l2, m2, zero, zero) * 3 +
                                scoreCount(a3, b3, c3, d3, e3, f3, g3, h3, i3, j3, k3, l3, m3, zero, zero) * 2
                    }
                    3 -> {
                        maxScore = scoreCount(a1, b1, c1, d1, e1, f1, g1, h1, i1, j1, k1, l1, m1, zero, zero) * 2 +
                                scoreCount(a2, b2, c2, d2, e2, f2, g2, h2, i2, j2, k2, l2, m2, zero, zero) * 2 +
                                scoreCount(a3, b3, c3, d3, e3, f3, g3, h3, i3, j3, k3, l3, m3, zero, zero) * 2 +
                                scoreCount(a4, b4, c4, d4, e4, f4, g4, h4, i4, j4, k4, l4, m4, zero, zero) * 2
                    }
                    4 -> {
                        maxScore = scoreCount(a1, b1, c1, d1, e1, f1, g1, h1, i1, j1, k1, l1, m1, zero, zero) * 2 +
                                scoreCount(a2, b2, c2, d2, e2, f2, g2, h2, i2, j2, k2, l2, m2, zero, zero) * 2 +
                                scoreCount(a3, b3, c3, d3, e3, f3, g3, h3, i3, j3, k3, l3, m3, zero, zero) * 2 +
                                scoreCount(a4, b4, c4, d4, e4, f4, g4, h4, i4, j4, k4, l4, m4, zero, zero) +
                                scoreCount(a5, b5, c5, d5, e5, f5, g5, h5, i5, j5, k5, l5, m5, zero, zero)
                    }
                    5 -> {
                        maxScore = scoreCount(a1, b1, c1, d1, e1, f1, g1, h1, i1, j1, k1, l1, m1, zero, zero) * 2 +
                                scoreCount(a2, b2, c2, d2, e2, f2, g2, h2, i2, j2, k2, l2, m2, zero, zero) * 2 +
                                scoreCount(a3, b3, c3, d3, e3, f3, g3, h3, i3, j3, k3, l3, m3, zero, zero) +
                                scoreCount(a4, b4, c4, d4, e4, f4, g4, h4, i4, j4, k4, l4, m4, zero, zero) +
                                scoreCount(a5, b5, c5, d5, e5, f5, g5, h5, i5, j5, k5, l5, m5, zero, zero) +
                                scoreCount(a6, b6, c6, d6, e6, f6, g6, h6, i6, j6, k6, l6, m6, zero, zero)
                    }
                    6 -> {
                        maxScore = scoreCount(a1, b1, c1, d1, e1, f1, g1, h1, i1, j1, k1, l1, m1, zero, zero) * 2 +
                                scoreCount(a2, b2, c2, d2, e2, f2, g2, h2, i2, j2, k2, l2, m2, zero, zero) +
                                scoreCount(a3, b3, c3, d3, e3, f3, g3, h3, i3, j3, k3, l3, m3, zero, zero) +
                                scoreCount(a4, b4, c4, d4, e4, f4, g4, h4, i4, j4, k4, l4, m4, zero, zero) +
                                scoreCount(a5, b5, c5, d5, e5, f5, g5, h5, i5, j5, k5, l5, m5, zero, zero) +
                                scoreCount(a6, b6, c6, d6, e6, f6, g6, h6, i6, j6, k6, l6, m6, zero, zero) +
                                scoreCount(a7, b7, c7, d7, e7, f7, g7, h7, i7, j7, k7, l7, m7, zero, zero)
                    }
                    7 -> {
                        maxScore = scoreCount(a1, b1, c1, d1, e1, f1, g1, h1, i1, j1, k1, l1, m1, zero, zero) +
                                scoreCount(a2, b2, c2, d2, e2, f2, g2, h2, i2, j2, k2, l2, m2, zero, zero) +
                                scoreCount(a3, b3, c3, d3, e3, f3, g3, h3, i3, j3, k3, l3, m3, zero, zero) +
                                scoreCount(a4, b4, c4, d4, e4, f4, g4, h4, i4, j4, k4, l4, m4, zero, zero) +
                                scoreCount(a5, b5, c5, d5, e5, f5, g5, h5, i5, j5, k5, l5, m5, zero, zero) +
                                scoreCount(a6, b6, c6, d6, e6, f6, g6, h6, i6, j6, k6, l6, m6, zero, zero) +
                                scoreCount(a7, b7, c7, d7, e7, f7, g7, h7, i7, j7, k7, l7, m7, zero, zero) +
                                scoreCount(a8, b8, c8, d8, e8, f8, g8, h8, i8, j8, k8, l8, m8, zero, zero)
                    }
                }
            }
            14 -> {
                when (sequencerMaxSize) {
                    0 -> {
                        maxScore = scoreCount(a1, b1, c1, d1, e1, f1, g1, h1, i1, j1, k1, l1, m1, n1, zero) * 8
                    }
                    1 -> {
                        maxScore = scoreCount(a1, b1, c1, d1, e1, f1, g1, h1, i1, j1, k1, l1, m1, n1, zero) * 4 +
                                scoreCount(a2, b2, c2, d2, e2, f2, g2, h2, i2, j2, k2, l2, m2, n2, zero) * 4
                    }
                    2 -> {
                        maxScore = scoreCount(a1, b1, c1, d1, e1, f1, g1, h1, i1, j1, k1, l1, m1, n1, zero) * 3 +
                                scoreCount(a2, b2, c2, d2, e2, f2, g2, h2, i2, j2, k2, l2, m2, n2, zero) * 3 +
                                scoreCount(a3, b3, c3, d3, e3, f3, g3, h3, i3, j3, k3, l3, m3, n3, zero) * 2
                    }
                    3 -> {
                        maxScore = scoreCount(a1, b1, c1, d1, e1, f1, g1, h1, i1, j1, k1, l1, m1, n1, zero) * 2 +
                                scoreCount(a2, b2, c2, d2, e2, f2, g2, h2, i2, j2, k2, l2, m2, n2, zero) * 2 +
                                scoreCount(a3, b3, c3, d3, e3, f3, g3, h3, i3, j3, k3, l3, m3, n3, zero) * 2 +
                                scoreCount(a4, b4, c4, d4, e4, f4, g4, h4, i4, j4, k4, l4, m4, n4, zero) * 2
                    }
                    4 -> {
                        maxScore = scoreCount(a1, b1, c1, d1, e1, f1, g1, h1, i1, j1, k1, l1, m1, n1, zero) * 2 +
                                scoreCount(a2, b2, c2, d2, e2, f2, g2, h2, i2, j2, k2, l2, m2, n2, zero) * 2 +
                                scoreCount(a3, b3, c3, d3, e3, f3, g3, h3, i3, j3, k3, l3, m3, n3, zero) * 2 +
                                scoreCount(a4, b4, c4, d4, e4, f4, g4, h4, i4, j4, k4, l4, m4, n4, zero) +
                                scoreCount(a5, b5, c5, d5, e5, f5, g5, h5, i5, j5, k5, l5, m5, n5, zero)
                    }
                    5 -> {
                        maxScore = scoreCount(a1, b1, c1, d1, e1, f1, g1, h1, i1, j1, k1, l1, m1, n1, zero) * 2 +
                                scoreCount(a2, b2, c2, d2, e2, f2, g2, h2, i2, j2, k2, l2, m2, n2, zero) * 2 +
                                scoreCount(a3, b3, c3, d3, e3, f3, g3, h3, i3, j3, k3, l3, m3, n3, zero) +
                                scoreCount(a4, b4, c4, d4, e4, f4, g4, h4, i4, j4, k4, l4, m4, n4, zero) +
                                scoreCount(a5, b5, c5, d5, e5, f5, g5, h5, i5, j5, k5, l5, m5, n5, zero) +
                                scoreCount(a6, b6, c6, d6, e6, f6, g6, h6, i6, j6, k6, l6, m6, n6, zero)
                    }
                    6 -> {
                        maxScore = scoreCount(a1, b1, c1, d1, e1, f1, g1, h1, i1, j1, k1, l1, m1, n1, zero) * 2 +
                                scoreCount(a2, b2, c2, d2, e2, f2, g2, h2, i2, j2, k2, l2, m2, n2, zero) +
                                scoreCount(a3, b3, c3, d3, e3, f3, g3, h3, i3, j3, k3, l3, m3, n3, zero) +
                                scoreCount(a4, b4, c4, d4, e4, f4, g4, h4, i4, j4, k4, l4, m4, n4, zero) +
                                scoreCount(a5, b5, c5, d5, e5, f5, g5, h5, i5, j5, k5, l5, m5, n5, zero) +
                                scoreCount(a6, b6, c6, d6, e6, f6, g6, h6, i6, j6, k6, l6, m6, n6, zero) +
                                scoreCount(a7, b7, c7, d7, e7, f7, g7, h7, i7, j7, k7, l7, m7, n7, zero)
                    }
                    7 -> {
                        maxScore = scoreCount(a1, b1, c1, d1, e1, f1, g1, h1, i1, j1, k1, l1, m1, n1, zero) +
                                scoreCount(a2, b2, c2, d2, e2, f2, g2, h2, i2, j2, k2, l2, m2, n2, zero) +
                                scoreCount(a3, b3, c3, d3, e3, f3, g3, h3, i3, j3, k3, l3, m3, n3, zero) +
                                scoreCount(a4, b4, c4, d4, e4, f4, g4, h4, i4, j4, k4, l4, m4, n4, zero) +
                                scoreCount(a5, b5, c5, d5, e5, f5, g5, h5, i5, j5, k5, l5, m5, n5, zero) +
                                scoreCount(a6, b6, c6, d6, e6, f6, g6, h6, i6, j6, k6, l6, m6, n6, zero) +
                                scoreCount(a7, b7, c7, d7, e7, f7, g7, h7, i7, j7, k7, l7, m7, n7, zero) +
                                scoreCount(a8, b8, c8, d8, e8, f8, g8, h8, i8, j8, k8, l8, m8, n8, zero)
                    }
                }
            }
            15 -> {
                when (sequencerMaxSize) {
                    0 -> {
                        maxScore = scoreCount(a1, b1, c1, d1, e1, f1, g1, h1, i1, j1, k1, l1, m1, n1, o1) * 8
                    }
                    1 -> {
                        maxScore = scoreCount(a1, b1, c1, d1, e1, f1, g1, h1, i1, j1, k1, l1, m1, n1, o1) * 4 +
                                    scoreCount(a2, b2, c2, d2, e2, f2, g2, h2, i2, j2, k2, l2, m2, n2, o2) * 4
                    }
                    2 -> {
                        maxScore = scoreCount(a1, b1, c1, d1, e1, f1, g1, h1, i1, j1, k1, l1, m1, n1, o1) * 3 +
                                    scoreCount(a2, b2, c2, d2, e2, f2, g2, h2, i2, j2, k2, l2, m2, n2, o2) * 3 +
                                    scoreCount(a3, b3, c3, d3, e3, f3, g3, h3, i3, j3, k3, l3, m3, n3, o3) * 2
                    }
                    3 -> {
                        maxScore = scoreCount(a1, b1, c1, d1, e1, f1, g1, h1, i1, j1, k1, l1, m1, n1, o1) * 2 +
                                    scoreCount(a2, b2, c2, d2, e2, f2, g2, h2, i2, j2, k2, l2, m2, n2, o2) * 2 +
                                    scoreCount(a3, b3, c3, d3, e3, f3, g3, h3, i3, j3, k3, l3, m3, n3, o3) * 2 +
                                    scoreCount(a4, b4, c4, d4, e4, f4, g4, h4, i4, j4, k4, l4, m4, n4, o4) * 2
                    }
                    4 -> {
                        maxScore = scoreCount(a1, b1, c1, d1, e1, f1, g1, h1, i1, j1, k1, l1, m1, n1, o1) * 2 +
                                    scoreCount(a2, b2, c2, d2, e2, f2, g2, h2, i2, j2, k2, l2, m2, n2, o2) * 2 +
                                    scoreCount(a3, b3, c3, d3, e3, f3, g3, h3, i3, j3, k3, l3, m3, n3, o3) * 2 +
                                    scoreCount(a4, b4, c4, d4, e4, f4, g4, h4, i4, j4, k4, l4, m4, n4, o4) +
                                    scoreCount(a5, b5, c5, d5, e5, f5, g5, h5, i5, j5, k5, l5, m5, n5, o5)
                    }
                    5 -> {
                        maxScore = scoreCount(a1, b1, c1, d1, e1, f1, g1, h1, i1, j1, k1, l1, m1, n1, o1) * 2 +
                                scoreCount(a2, b2, c2, d2, e2, f2, g2, h2, i2, j2, k2, l2, m2, n2, o2) * 2 +
                                scoreCount(a3, b3, c3, d3, e3, f3, g3, h3, i3, j3, k3, l3, m3, n3, o3) +
                                scoreCount(a4, b4, c4, d4, e4, f4, g4, h4, i4, j4, k4, l4, m4, n4, o4) +
                                scoreCount(a5, b5, c5, d5, e5, f5, g5, h5, i5, j5, k5, l5, m5, n5, o5) +
                                scoreCount(a6, b6, c6, d6, e6, f6, g6, h6, i6, j6, k6, l6, m6, n6, o6)
                    }
                    6 -> {
                        maxScore = scoreCount(a1, b1, c1, d1, e1, f1, g1, h1, i1, j1, k1, l1, m1, n1, o1) * 2 +
                                scoreCount(a2, b2, c2, d2, e2, f2, g2, h2, i2, j2, k2, l2, m2, n2, o2) +
                                scoreCount(a3, b3, c3, d3, e3, f3, g3, h3, i3, j3, k3, l3, m3, n3, o3) +
                                scoreCount(a4, b4, c4, d4, e4, f4, g4, h4, i4, j4, k4, l4, m4, n4, o4) +
                                scoreCount(a5, b5, c5, d5, e5, f5, g5, h5, i5, j5, k5, l5, m5, n5, o5) +
                                scoreCount(a6, b6, c6, d6, e6, f6, g6, h6, i6, j6, k6, l6, m6, n6, o6) +
                                scoreCount(a7, b7, c7, d7, e7, f7, g7, h7, i7, j7, k7, l7, m7, n7, o7)
                    }
                    7 -> {
                        maxScore = scoreCount(a1, b1, c1, d1, e1, f1, g1, h1, i1, j1, k1, l1, m1, n1, o1) +
                                scoreCount(a2, b2, c2, d2, e2, f2, g2, h2, i2, j2, k2, l2, m2, n2, o2) +
                                scoreCount(a3, b3, c3, d3, e3, f3, g3, h3, i3, j3, k3, l3, m3, n3, o3) +
                                scoreCount(a4, b4, c4, d4, e4, f4, g4, h4, i4, j4, k4, l4, m4, n4, o4) +
                                scoreCount(a5, b5, c5, d5, e5, f5, g5, h5, i5, j5, k5, l5, m5, n5, o5) +
                                scoreCount(a6, b6, c6, d6, e6, f6, g6, h6, i6, j6, k6, l6, m6, n6, o6) +
                                scoreCount(a7, b7, c7, d7, e7, f7, g7, h7, i7, j7, k7, l7, m7, n7, o7) +
                                scoreCount(a8, b8, c8, d8, e8, f8, g8, h8, i8, j8, k8, l8, m8, n8, o8)
                    }
                }
            }
        }
            println(maxScore)
            gameCount = 1
            timer = Timer()
            timer!!.scheduleAtFixedRate(object : TimerTask() {
                override fun run() {
                    handler.post(Runnable {
                        run {
                            sequencerCount++
                            when (sequencerCount) {
                                33 -> {
                                    binding.editTitle.setText("....".padEnd(25, ' '),
                                        TextView.BufferType.NORMAL)
                                    soundPool.play(sound18, 0.5f, 0.5f, 0, 0, 1.0f)
                                }
                                41 -> {
                                    binding.editTitle.setText("...".padEnd(25, ' '),
                                        TextView.BufferType.NORMAL)
                                    soundPool.play(sound18, 0.5f, 0.5f, 0, 0, 1.0f)
                                }
                                49 -> {
                                    binding.editTitle.setText("..".padEnd(25, ' '),
                                        TextView.BufferType.NORMAL)
                                    soundPool.play(sound18, 0.5f, 0.5f, 0, 0, 1.0f)
                                }
                                57 -> {
                                    binding.editTitle.setText(".".padEnd(25, ' '),
                                        TextView.BufferType.NORMAL)
                                    soundPool.play(sound18, 0.5f, 0.5f, 0, 0, 1.0f)
                                }
                                63 -> {
                                    binding.editTitle.setText("PERIOD : 1/8 SCORE : 0",
                                        TextView.BufferType.NORMAL)
                                    sequencerCount = 0
                                }
                                1 -> {
                                    if (gameCount == 9) {
                                        justification = 0
                                        menuSwitch = true
                                        invalidateOptionsMenu()
                                        switch1 = 2
                                        sequencerStop()
                                        window.addFlags(WindowManager.LayoutParams.FLAG_NOT_TOUCHABLE)
                                        val snackBar = Snackbar.make(findViewById(R.id.snack_space),
                                            R.string.Finish,
                                            Snackbar.LENGTH_LONG)
                                        val snackTextView: TextView =
                                            snackBar.view.findViewById(R.id.snackbar_text)
                                        snackTextView.textAlignment = TextView.TEXT_ALIGNMENT_CENTER
                                        snackBar.setDuration(1200).show()
                                        if ((score * 100 / maxScore) >= 70) {
                                            handler.postDelayed({
                                                showInterstitial()
                                            }, 1500)
                                        }
                                        handler.postDelayed({

                                            val result: String

                                            when {
                                                (score * 100 / maxScore) >= 90 -> {
                                                    game1Result = R.color.excellent
                                                    if (mRealm.where(ResultSlot::class.java)
                                                            .equalTo("id", gameCheck)
                                                            .findFirst()?.game1 == null
                                                    ) {
                                                        resultCreate(gameCheck)
                                                    } else {
                                                        resultUpdate(gameCheck)
                                                    }
                                                    result = "Excellent!"
                                                    val builder =
                                                        AlertDialog.Builder(this@MainActivity,
                                                            R.style.AppCompatAlertDialogStyle1)
                                                    val inflater = layoutInflater
                                                    val dialogView =
                                                        inflater.inflate(R.layout.game_result, null)
                                                    dialogView.findViewById<TextView>(R.id.maxscore).text =
                                                        "    ALL COUNTS : $maxScore"
                                                    dialogView.findViewById<TextView>(R.id.score).text =
                                                        "   JUST COUNTS : $hitScore"
                                                    dialogView.findViewById<TextView>(R.id.missscore).text =
                                                        "   MISS COUNTS : $missScore"
                                                    dialogView.findViewById<TextView>(R.id.result).text =
                                                        "        RESULT : " + (score * 100 / maxScore) + " %"


                                                    builder.setView(dialogView)
                                                        .setOnCancelListener {
                                                            binding.editTitle.setText(actionTitle.replace(
                                                                "_",
                                                                " ").uppercase(),
                                                                TextView.BufferType.NORMAL)
                                                            findViewById<View>(R.id.bpm).findViewById<EditText>(
                                                                R.id.bpmCount).isEnabled = false
                                                            stickyImmersiveMode()
                                                        }
                                                        .setTitle(result)
                                                        .setNegativeButton("OK") { _, _ ->
                                                            binding.editTitle.setText(actionTitle.replace(
                                                                "_",
                                                                " ").uppercase(),
                                                                TextView.BufferType.NORMAL)
                                                            findViewById<View>(R.id.bpm).findViewById<EditText>(
                                                                R.id.bpmCount).isEnabled = false
                                                            stickyImmersiveMode()
                                                        }
                                                    val dialog = builder.create()
                                                    dialog.show()
                                                    window.clearFlags(WindowManager.LayoutParams.FLAG_NOT_TOUCHABLE)
                                                    dialogView.findViewById<View>(R.id.result_main)
                                                        .setBackgroundColor(Color.parseColor("#d03933"))
                                                }
                                                (score * 100 / maxScore) >= 80 -> {
                                                    game1Result = R.color.great
                                                    if (mRealm.where(ResultSlot::class.java)
                                                            .equalTo("id", gameCheck)
                                                            .findFirst()?.game1 == null
                                                    ) {
                                                        resultCreate(gameCheck)
                                                    } else if (mRealm.where(ResultSlot::class.java)
                                                            .equalTo("id", gameCheck)
                                                            .findFirst()?.game1 != R.color.excellent
                                                    ) {
                                                        resultUpdate(gameCheck)
                                                    }
                                                    result = "Great!"
                                                    val builder =
                                                        AlertDialog.Builder(this@MainActivity,
                                                            R.style.AppCompatAlertDialogStyle2)
                                                    val inflater = layoutInflater
                                                    val dialogView =
                                                        inflater.inflate(R.layout.game_result, null)
                                                    dialogView.findViewById<TextView>(R.id.maxscore).text =
                                                        "    ALL COUNTS : $maxScore"
                                                    dialogView.findViewById<TextView>(R.id.score).text =
                                                        "   JUST COUNTS : $hitScore"
                                                    dialogView.findViewById<TextView>(R.id.missscore).text =
                                                        "   MISS COUNTS : $missScore"
                                                    dialogView.findViewById<TextView>(R.id.result).text =
                                                        "        RESULT : " + (score * 100 / maxScore) + " %"


                                                    builder.setView(dialogView)
                                                        .setOnCancelListener {
                                                            binding.editTitle.setText(actionTitle.replace(
                                                                "_",
                                                                " ").uppercase(),
                                                                TextView.BufferType.NORMAL)
                                                            findViewById<View>(R.id.bpm).findViewById<EditText>(
                                                                R.id.bpmCount).isEnabled = false
                                                            stickyImmersiveMode()
                                                        }
                                                        .setTitle(result)
                                                        .setNegativeButton("OK") { _, _ ->
                                                            binding.editTitle.setText(actionTitle.replace(
                                                                "_",
                                                                " ").uppercase(),
                                                                TextView.BufferType.NORMAL)
                                                            findViewById<View>(R.id.bpm).findViewById<EditText>(
                                                                R.id.bpmCount).isEnabled = false
                                                            stickyImmersiveMode()
                                                        }
                                                    val dialog = builder.create()
                                                    dialog.show()
                                                    window.clearFlags(WindowManager.LayoutParams.FLAG_NOT_TOUCHABLE)
                                                    dialogView.findViewById<View>(R.id.result_main)
                                                        .setBackgroundColor(Color.parseColor("#e98e2f"))
                                                }
                                                (score * 100 / maxScore) >= 70 -> {
                                                    game1Result = R.color.good
                                                    if (mRealm.where(ResultSlot::class.java)
                                                            .equalTo("id", gameCheck)
                                                            .findFirst()?.game1 == null
                                                    ) {
                                                        resultCreate(gameCheck)
                                                    } else if (mRealm.where(ResultSlot::class.java)
                                                            .equalTo("id", gameCheck)
                                                            .findFirst()?.game1 != R.color.excellent && mRealm.where(
                                                            ResultSlot::class.java)
                                                            .equalTo("id", gameCheck)
                                                            .findFirst()?.game1 != R.color.great
                                                    ) {
                                                        resultUpdate(gameCheck)
                                                    }
                                                    result = "Good!"
                                                    val builder =
                                                        AlertDialog.Builder(this@MainActivity,
                                                            R.style.AppCompatAlertDialogStyle3)
                                                    val inflater = layoutInflater
                                                    val dialogView =
                                                        inflater.inflate(R.layout.game_result, null)
                                                    dialogView.findViewById<TextView>(R.id.maxscore).text =
                                                        "    ALL COUNTS : $maxScore"
                                                    dialogView.findViewById<TextView>(R.id.score).text =
                                                        "   JUST COUNTS : $hitScore"
                                                    dialogView.findViewById<TextView>(R.id.missscore).text =
                                                        "   MISS COUNTS : $missScore"
                                                    dialogView.findViewById<TextView>(R.id.result).text =
                                                        "        RESULT : " + (score * 100 / maxScore) + " %"


                                                    builder.setView(dialogView)
                                                        .setOnCancelListener {
                                                            binding.editTitle.setText(actionTitle.replace(
                                                                "_",
                                                                " ").uppercase(),
                                                                TextView.BufferType.NORMAL)
                                                            findViewById<View>(R.id.bpm).findViewById<EditText>(
                                                                R.id.bpmCount).isEnabled = false
                                                            stickyImmersiveMode()
                                                        }
                                                        .setTitle(result)
                                                        .setNegativeButton("OK") { _, _ ->
                                                            binding.editTitle.setText(actionTitle.replace(
                                                                "_",
                                                                " ").uppercase(),
                                                                TextView.BufferType.NORMAL)
                                                            findViewById<View>(R.id.bpm).findViewById<EditText>(
                                                                R.id.bpmCount).isEnabled = false
                                                            stickyImmersiveMode()
                                                        }
                                                    val dialog = builder.create()
                                                    dialog.show()
                                                    window.clearFlags(WindowManager.LayoutParams.FLAG_NOT_TOUCHABLE)
                                                    dialogView.findViewById<View>(R.id.result_main)
                                                        .setBackgroundColor(Color.parseColor("#dfd441"))
                                                }
                                                (score * 100 / maxScore) >= 60 -> {
                                                    result = "Nice try!"
                                                    val builder =
                                                        AlertDialog.Builder(this@MainActivity,
                                                            R.style.AppCompatAlertDialogStyle4)
                                                    val inflater = layoutInflater
                                                    val dialogView =
                                                        inflater.inflate(R.layout.game_result, null)
                                                    dialogView.findViewById<TextView>(R.id.maxscore).text =
                                                        "    ALL COUNTS : $maxScore"
                                                    dialogView.findViewById<TextView>(R.id.score).text =
                                                        "   JUST COUNTS : $hitScore"
                                                    dialogView.findViewById<TextView>(R.id.missscore).text =
                                                        "   MISS COUNTS : $missScore"
                                                    dialogView.findViewById<TextView>(R.id.result).text =
                                                        "        RESULT : " + (score * 100 / maxScore) + " %"


                                                    builder.setView(dialogView)
                                                        .setOnCancelListener {
                                                            binding.editTitle.setText(actionTitle.replace(
                                                                "_",
                                                                " ").uppercase(),
                                                                TextView.BufferType.NORMAL)
                                                            findViewById<View>(R.id.bpm).findViewById<EditText>(
                                                                R.id.bpmCount).isEnabled = false
                                                            stickyImmersiveMode()
                                                        }
                                                        .setTitle(result)
                                                        .setNegativeButton("OK") { _, _ ->
                                                            binding.editTitle.setText(actionTitle.replace(
                                                                "_",
                                                                " ").uppercase(),
                                                                TextView.BufferType.NORMAL)
                                                            findViewById<View>(R.id.bpm).findViewById<EditText>(
                                                                R.id.bpmCount).isEnabled = false
                                                            stickyImmersiveMode()
                                                        }
                                                    val dialog = builder.create()
                                                    dialog.show()
                                                    window.clearFlags(WindowManager.LayoutParams.FLAG_NOT_TOUCHABLE)
                                                    dialogView.findViewById<View>(R.id.result_main)
                                                        .setBackgroundColor(Color.parseColor("#e9e8e7"))
                                                }
                                                (score * 100 / maxScore) < 60 -> {
                                                    result = "Try again!"
                                                    val builder =
                                                        AlertDialog.Builder(this@MainActivity,
                                                            R.style.AppCompatAlertDialogStyle5)
                                                    val inflater = layoutInflater
                                                    val dialogView =
                                                        inflater.inflate(R.layout.game_result, null)
                                                    dialogView.findViewById<TextView>(R.id.maxscore).text =
                                                        "    ALL COUNTS : $maxScore"
                                                    dialogView.findViewById<TextView>(R.id.score).text =
                                                        "   JUST COUNTS : $hitScore"
                                                    dialogView.findViewById<TextView>(R.id.missscore).text =
                                                        "   MISS COUNTS : $missScore"
                                                    dialogView.findViewById<TextView>(R.id.result).text =
                                                        "        RESULT : " + (score * 100 / maxScore) + " %"


                                                    builder.setView(dialogView)
                                                        .setOnCancelListener {
                                                            binding.editTitle.setText(actionTitle.replace(
                                                                "_",
                                                                " ").uppercase(),
                                                                TextView.BufferType.NORMAL)
                                                            findViewById<View>(R.id.bpm).findViewById<EditText>(
                                                                R.id.bpmCount).isEnabled = false
                                                            stickyImmersiveMode()
                                                        }
                                                        .setTitle(result)
                                                        .setNegativeButton("OK") { _, _ ->
                                                            binding.editTitle.setText(actionTitle.replace(
                                                                "_",
                                                                " ").uppercase(),
                                                                TextView.BufferType.NORMAL)
                                                            findViewById<View>(R.id.bpm).findViewById<EditText>(
                                                                R.id.bpmCount).isEnabled = false
                                                            stickyImmersiveMode()
                                                        }
                                                    val dialog = builder.create()
                                                    dialog.show()
                                                    window.clearFlags(WindowManager.LayoutParams.FLAG_NOT_TOUCHABLE)
                                                    dialogView.findViewById<View>(R.id.result_main)
                                                        .setBackgroundColor(Color.parseColor("#ffffff"))
                                                }
                                            }
                                        }, 2000)
                                    } else {
                                        binding.editTitle.setText("PERIOD : $gameCount/8 SCORE : $score",
                                            TextView.BufferType.NORMAL)
                                        playTapTiming(a1,b1,c1,d1,e1,f1,g1,h1,i1,j1,k1,l1,m1,n1,o1)
                                        duplicateCheck(1)
                                    }
                                }
                                2 -> {
                                    findViewById<View>(R.id.sequencer_view).findViewById<TextView>(R.id.number16)
                                        .setBackgroundColor(Color.parseColor("#5A5A66"))
                                    findViewById<View>(R.id.sequencer_view).findViewById<TextView>(R.id.number)
                                        .setBackgroundColor(Color.parseColor("#FFFFFF"))

                                }
                                3 -> {
                                    playTapTiming(a2,b2,c2,d2,e2,f2,g2,h2,i2,j2,k2,l2,m2,n2,o2)
                                    duplicateCheck(2)
                                }
                                4 -> {
                                    findViewById<View>(R.id.sequencer_view).findViewById<TextView>(R.id.number)
                                        .setBackgroundColor(Color.parseColor("#5A5A66"))
                                    findViewById<View>(R.id.sequencer_view).findViewById<TextView>(R.id.number2)
                                        .setBackgroundColor(Color.parseColor("#FFFFFF"))
                                }
                                5 -> {
                                    playTapTiming(a3,b3,c3,d3,e3,f3,g3,h3,i3,j3,k3,l3,m3,n3,o3)
                                    duplicateCheck(3)
                                }
                                6 -> {
                                    findViewById<View>(R.id.sequencer_view).findViewById<TextView>(R.id.number2)
                                        .setBackgroundColor(Color.parseColor("#5A5A66"))
                                    findViewById<View>(R.id.sequencer_view).findViewById<TextView>(R.id.number3)
                                        .setBackgroundColor(Color.parseColor("#FFFFFF"))
                                }
                                7 -> {
                                    playTapTiming(a4,b4,c4,d4,e4,f4,g4,h4,i4,j4,k4,l4,m4,n4,o4)
                                    duplicateCheck(4)
                                }
                                8 -> {
                                    findViewById<View>(R.id.sequencer_view).findViewById<TextView>(R.id.number3)
                                        .setBackgroundColor(Color.parseColor("#5A5A66"))
                                    findViewById<View>(R.id.sequencer_view).findViewById<TextView>(R.id.number4)
                                        .setBackgroundColor(Color.parseColor("#FFFFFF"))
                                }
                                9 -> {
                                    playTapTiming(a5,b5,c5,d5,e5,f5,g5,h5,i5,j5,k5,l5,m5,n5,o5)
                                    duplicateCheck(5)
                                }
                                10 -> {
                                    findViewById<View>(R.id.sequencer_view).findViewById<TextView>(R.id.number4)
                                        .setBackgroundColor(Color.parseColor("#5A5A66"))
                                    findViewById<View>(R.id.sequencer_view).findViewById<TextView>(R.id.number5)
                                        .setBackgroundColor(Color.parseColor("#FFFFFF"))
                                }
                                11 -> {
                                    playTapTiming(a6,b6,c6,d6,e6,f6,g6,h6,i6,j6,k6,l6,m6,n6,o6)
                                    duplicateCheck(6)
                                }
                                12 -> {
                                    findViewById<View>(R.id.sequencer_view).findViewById<TextView>(R.id.number5)
                                        .setBackgroundColor(Color.parseColor("#5A5A66"))
                                    findViewById<View>(R.id.sequencer_view).findViewById<TextView>(R.id.number6)
                                        .setBackgroundColor(Color.parseColor("#FFFFFF"))
                                }
                                13 -> {
                                    playTapTiming(a7,b7,c7,d7,e7,f7,g7,h7,i7,j7,k7,l7,m7,n7,o7)
                                    duplicateCheck(7)
                                }
                                14 -> {
                                    findViewById<View>(R.id.sequencer_view).findViewById<TextView>(R.id.number6)
                                        .setBackgroundColor(Color.parseColor("#5A5A66"))
                                    findViewById<View>(R.id.sequencer_view).findViewById<TextView>(R.id.number7)
                                        .setBackgroundColor(Color.parseColor("#FFFFFF"))
                                }
                                15 -> {
                                    playTapTiming(a8,b8,c8,d8,e8,f8,g8,h8,i8,j8,k8,l8,m8,n8,o8)
                                    duplicateCheck(8)
                                }
                                16 -> {
                                    findViewById<View>(R.id.sequencer_view).findViewById<TextView>(R.id.number7)
                                        .setBackgroundColor(Color.parseColor("#5A5A66"))
                                    findViewById<View>(R.id.sequencer_view).findViewById<TextView>(R.id.number8)
                                        .setBackgroundColor(Color.parseColor("#FFFFFF"))
                                }
                                17 -> {
                                    playTapTiming(a9,b9,c9,d9,e9,f9,g9,h9,i9,j9,k9,l9,m9,n9,o9)
                                    duplicateCheck(9)
                                }
                                18 -> {
                                    findViewById<View>(R.id.sequencer_view).findViewById<TextView>(R.id.number8)
                                        .setBackgroundColor(Color.parseColor("#5A5A66"))
                                    findViewById<View>(R.id.sequencer_view).findViewById<TextView>(R.id.number9)
                                        .setBackgroundColor(Color.parseColor("#FFFFFF"))

                                }
                                19 -> {
                                    playTapTiming(a10,b10,c10,d10,e10,f10,g10,h10,i10,j10,k10,l10,m10,n10,o10)
                                    duplicateCheck(10)
                                }
                                20 -> {
                                    findViewById<View>(R.id.sequencer_view).findViewById<TextView>(R.id.number9)
                                        .setBackgroundColor(Color.parseColor("#5A5A66"))
                                    findViewById<View>(R.id.sequencer_view).findViewById<TextView>(R.id.number10)
                                        .setBackgroundColor(Color.parseColor("#FFFFFF"))
                                }
                                21 -> {
                                    playTapTiming(a11,b11,c11,d11,e11,f11,g11,h11,i11,j11,k11,l11,m11,n11,o11)
                                    duplicateCheck(11)
                                }
                                22 -> {
                                    findViewById<View>(R.id.sequencer_view).findViewById<TextView>(R.id.number10)
                                        .setBackgroundColor(Color.parseColor("#5A5A66"))
                                    findViewById<View>(R.id.sequencer_view).findViewById<TextView>(R.id.number11)
                                        .setBackgroundColor(Color.parseColor("#FFFFFF"))
                                }
                                23 -> {
                                    playTapTiming(a12,b12,c12,d12,e12,f12,g12,h12,i12,j12,k12,l12,m12,n12,o12)
                                    duplicateCheck(12)
                                }
                                24 -> {
                                    findViewById<View>(R.id.sequencer_view).findViewById<TextView>(R.id.number11)
                                        .setBackgroundColor(Color.parseColor("#5A5A66"))
                                    findViewById<View>(R.id.sequencer_view).findViewById<TextView>(R.id.number12)
                                        .setBackgroundColor(Color.parseColor("#FFFFFF"))
                                }
                                25 -> {
                                    playTapTiming(a13,b13,c13,d13,e13,f13,g13,h13,i13,j13,k13,l13,m13,n13,o13)
                                    duplicateCheck(13)
                                }
                                26 -> {
                                    findViewById<View>(R.id.sequencer_view).findViewById<TextView>(R.id.number12)
                                        .setBackgroundColor(Color.parseColor("#5A5A66"))
                                    findViewById<View>(R.id.sequencer_view).findViewById<TextView>(R.id.number13)
                                        .setBackgroundColor(Color.parseColor("#FFFFFF"))
                                }
                                27 -> {
                                    playTapTiming(a14,b14,c14,d14,e14,f14,g14,h14,i14,j14,k14,l14,m14,n14,o14)
                                    duplicateCheck(14)
                                }
                                28 -> {
                                    findViewById<View>(R.id.sequencer_view).findViewById<TextView>(R.id.number13)
                                        .setBackgroundColor(Color.parseColor("#5A5A66"))
                                    findViewById<View>(R.id.sequencer_view).findViewById<TextView>(R.id.number14)
                                        .setBackgroundColor(Color.parseColor("#FFFFFF"))
                                }
                                29 -> {
                                    playTapTiming(a15,b15,c15,d15,e15,f15,g15,h15,i15,j15,k15,l15,m15,n15,o15)
                                    duplicateCheck(15)
                                }
                                30 -> {
                                    findViewById<View>(R.id.sequencer_view).findViewById<TextView>(R.id.number14)
                                        .setBackgroundColor(Color.parseColor("#5A5A66"))
                                    findViewById<View>(R.id.sequencer_view).findViewById<TextView>(R.id.number15)
                                        .setBackgroundColor(Color.parseColor("#FFFFFF"))
                                }
                                31 -> {
                                    playTapTiming(a16,b16,c16,d16,e16,f16,g16,h16,i16,j16,k16,l16,m16,n16,o16)
                                    duplicateCheck(16)
                                }
                                32 -> {
                                    findViewById<View>(R.id.sequencer_view).findViewById<TextView>(R.id.number15)
                                        .setBackgroundColor(Color.parseColor("#5A5A66"))
                                    findViewById<View>(R.id.sequencer_view).findViewById<TextView>(R.id.number16)
                                        .setBackgroundColor(Color.parseColor("#FFFFFF"))
                                    sequencerCount = 0
                                    gameCount++
                                    if (sequencerSize >= sequencerMaxSize) {
                                        sequencerSize = 0
                                        findViewById<View>(R.id.line_measure).findViewById<TextView>(
                                            R.id.measure).text = (sequencerSize + 1).toString()
                                        changeSequence()
                                    } else {
                                        sequencerSize++
                                        findViewById<View>(R.id.line_measure).findViewById<TextView>(
                                            R.id.measure).text = (sequencerSize + 1).toString()
                                        changeSequence()
                                    }
                                }
                            }
                        }
                    })
                }
            }, 0, 7500 / sequencerBpm)
    }

    private fun sequencerStop() {
        findViewById<View>(R.id.sequencer_view).findViewById<TextView>(R.id.number).setBackgroundColor(Color.parseColor("#5A5A66"))
        findViewById<View>(R.id.sequencer_view).findViewById<TextView>(R.id.number2).setBackgroundColor(Color.parseColor("#5A5A66"))
        findViewById<View>(R.id.sequencer_view).findViewById<TextView>(R.id.number3).setBackgroundColor(Color.parseColor("#5A5A66"))
        findViewById<View>(R.id.sequencer_view).findViewById<TextView>(R.id.number4).setBackgroundColor(Color.parseColor("#5A5A66"))
        findViewById<View>(R.id.sequencer_view).findViewById<TextView>(R.id.number5).setBackgroundColor(Color.parseColor("#5A5A66"))
        findViewById<View>(R.id.sequencer_view).findViewById<TextView>(R.id.number6).setBackgroundColor(Color.parseColor("#5A5A66"))
        findViewById<View>(R.id.sequencer_view).findViewById<TextView>(R.id.number7).setBackgroundColor(Color.parseColor("#5A5A66"))
        findViewById<View>(R.id.sequencer_view).findViewById<TextView>(R.id.number8).setBackgroundColor(Color.parseColor("#5A5A66"))
        findViewById<View>(R.id.sequencer_view).findViewById<TextView>(R.id.number9).setBackgroundColor(Color.parseColor("#5A5A66"))
        findViewById<View>(R.id.sequencer_view).findViewById<TextView>(R.id.number10).setBackgroundColor(Color.parseColor("#5A5A66"))
        findViewById<View>(R.id.sequencer_view).findViewById<TextView>(R.id.number11).setBackgroundColor(Color.parseColor("#5A5A66"))
        findViewById<View>(R.id.sequencer_view).findViewById<TextView>(R.id.number12).setBackgroundColor(Color.parseColor("#5A5A66"))
        findViewById<View>(R.id.sequencer_view).findViewById<TextView>(R.id.number13).setBackgroundColor(Color.parseColor("#5A5A66"))
        findViewById<View>(R.id.sequencer_view).findViewById<TextView>(R.id.number14).setBackgroundColor(Color.parseColor("#5A5A66"))
        findViewById<View>(R.id.sequencer_view).findViewById<TextView>(R.id.number15).setBackgroundColor(Color.parseColor("#5A5A66"))
        findViewById<View>(R.id.sequencer_view).findViewById<TextView>(R.id.number16).setBackgroundColor(Color.parseColor("#5A5A66"))
        if (gameSwitch == 0) {
            findViewById<View>(R.id.bpm).findViewById<EditText>(R.id.bpmCount).isEnabled = true
        }
        findViewById<Spinner>(R.id.mode_spinner).isEnabled = true
        justification = 0
        sequencerCount = 0
        timer?.cancel()
        timer = null
    }

    private fun resetSequence() {
        a1 = mutableListOf(0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0)
        a2 = mutableListOf(0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0)
        a3 = mutableListOf(0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0)
        a4 = mutableListOf(0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0)
        a5 = mutableListOf(0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0)
        a6 = mutableListOf(0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0)
        a7 = mutableListOf(0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0)
        a8 = mutableListOf(0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0)
        a9 = mutableListOf(0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0)
        a10 = mutableListOf(0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0)
        a11 = mutableListOf(0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0)
        a12 = mutableListOf(0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0)
        a13 = mutableListOf(0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0)
        a14 = mutableListOf(0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0)
        a15 = mutableListOf(0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0)
        a16 = mutableListOf(0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0)
        b1 = mutableListOf(0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0)
        b2 = mutableListOf(0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0)
        b3 = mutableListOf(0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0)
        b4 = mutableListOf(0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0)
        b5 = mutableListOf(0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0)
        b6 = mutableListOf(0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0)
        b7 = mutableListOf(0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0)
        b8 = mutableListOf(0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0)
        b9 = mutableListOf(0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0)
        b10 = mutableListOf(0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0)
        b11 = mutableListOf(0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0)
        b12 = mutableListOf(0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0)
        b13 = mutableListOf(0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0)
        b14 = mutableListOf(0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0)
        b15 = mutableListOf(0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0)
        b16 = mutableListOf(0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0)
        c1 = mutableListOf(0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0)
        c2 = mutableListOf(0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0)
        c3 = mutableListOf(0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0)
        c4 = mutableListOf(0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0)
        c5 = mutableListOf(0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0)
        c6 = mutableListOf(0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0)
        c7 = mutableListOf(0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0)
        c8 = mutableListOf(0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0)
        c9 = mutableListOf(0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0)
        c10 = mutableListOf(0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0)
        c11 = mutableListOf(0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0)
        c12 = mutableListOf(0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0)
        c13 = mutableListOf(0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0)
        c14 = mutableListOf(0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0)
        c15 = mutableListOf(0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0)
        c16 = mutableListOf(0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0)
        d1 = mutableListOf(0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0)
        d2 = mutableListOf(0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0)
        d3 = mutableListOf(0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0)
        d4 = mutableListOf(0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0)
        d5 = mutableListOf(0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0)
        d6 = mutableListOf(0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0)
        d7 = mutableListOf(0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0)
        d8 = mutableListOf(0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0)
        d9 = mutableListOf(0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0)
        d10 = mutableListOf(0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0)
        d11 = mutableListOf(0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0)
        d12 = mutableListOf(0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0)
        d13 = mutableListOf(0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0)
        d14 = mutableListOf(0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0)
        d15 = mutableListOf(0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0)
        d16 = mutableListOf(0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0)
        e1 = mutableListOf(0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0)
        e2 = mutableListOf(0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0)
        e3 = mutableListOf(0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0)
        e4 = mutableListOf(0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0)
        e5 = mutableListOf(0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0)
        e6 = mutableListOf(0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0)
        e7 = mutableListOf(0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0)
        e8 = mutableListOf(0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0)
        e9 = mutableListOf(0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0)
        e10 = mutableListOf(0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0)
        e11 = mutableListOf(0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0)
        e12 = mutableListOf(0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0)
        e13 = mutableListOf(0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0)
        e14 = mutableListOf(0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0)
        e15 = mutableListOf(0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0)
        e16 = mutableListOf(0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0)
        f1 = mutableListOf(0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0)
        f2 = mutableListOf(0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0)
        f3 = mutableListOf(0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0)
        f4 = mutableListOf(0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0)
        f5 = mutableListOf(0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0)
        f6 = mutableListOf(0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0)
        f7 = mutableListOf(0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0)
        f8 = mutableListOf(0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0)
        f9 = mutableListOf(0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0)
        f10 = mutableListOf(0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0)
        f11 = mutableListOf(0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0)
        f12 = mutableListOf(0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0)
        f13 = mutableListOf(0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0)
        f14 = mutableListOf(0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0)
        f15 = mutableListOf(0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0)
        f16 = mutableListOf(0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0)
        g1 = mutableListOf(0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0)
        g2 = mutableListOf(0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0)
        g3 = mutableListOf(0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0)
        g4 = mutableListOf(0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0)
        g5 = mutableListOf(0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0)
        g6 = mutableListOf(0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0)
        g7 = mutableListOf(0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0)
        g8 = mutableListOf(0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0)
        g9 = mutableListOf(0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0)
        g10 = mutableListOf(0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0)
        g11 = mutableListOf(0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0)
        g12 = mutableListOf(0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0)
        g13 = mutableListOf(0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0)
        g14 = mutableListOf(0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0)
        g15 = mutableListOf(0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0)
        g16 = mutableListOf(0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0)
        h1 = mutableListOf(0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0)
        h2 = mutableListOf(0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0)
        h3 = mutableListOf(0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0)
        h4 = mutableListOf(0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0)
        h5 = mutableListOf(0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0)
        h6 = mutableListOf(0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0)
        h7 = mutableListOf(0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0)
        h8 = mutableListOf(0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0)
        h9 = mutableListOf(0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0)
        h10 = mutableListOf(0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0)
        h11 = mutableListOf(0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0)
        h12 = mutableListOf(0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0)
        h13 = mutableListOf(0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0)
        h14 = mutableListOf(0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0)
        h15 = mutableListOf(0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0)
        h16 = mutableListOf(0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0)
        i1 = mutableListOf(0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0)
        i2 = mutableListOf(0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0)
        i3 = mutableListOf(0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0)
        i4 = mutableListOf(0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0)
        i5 = mutableListOf(0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0)
        i6 = mutableListOf(0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0)
        i7 = mutableListOf(0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0)
        i8 = mutableListOf(0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0)
        i9 = mutableListOf(0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0)
        i10 = mutableListOf(0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0)
        i11 = mutableListOf(0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0)
        i12 = mutableListOf(0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0)
        i13 = mutableListOf(0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0)
        i14 = mutableListOf(0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0)
        i15 = mutableListOf(0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0)
        i16 = mutableListOf(0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0)
        j1 = mutableListOf(0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0)
        j2 = mutableListOf(0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0)
        j3 = mutableListOf(0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0)
        j4 = mutableListOf(0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0)
        j5 = mutableListOf(0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0)
        j6 = mutableListOf(0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0)
        j7 = mutableListOf(0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0)
        j8 = mutableListOf(0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0)
        j9 = mutableListOf(0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0)
        j10 = mutableListOf(0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0)
        j11 = mutableListOf(0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0)
        j12 = mutableListOf(0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0)
        j13 = mutableListOf(0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0)
        j14 = mutableListOf(0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0)
        j15 = mutableListOf(0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0)
        j16 = mutableListOf(0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0)
        k1 = mutableListOf(0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0)
        k2 = mutableListOf(0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0)
        k3 = mutableListOf(0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0)
        k4 = mutableListOf(0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0)
        k5 = mutableListOf(0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0)
        k6 = mutableListOf(0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0)
        k7 = mutableListOf(0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0)
        k8 = mutableListOf(0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0)
        k9 = mutableListOf(0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0)
        k10 = mutableListOf(0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0)
        k11 = mutableListOf(0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0)
        k12 = mutableListOf(0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0)
        k13 = mutableListOf(0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0)
        k14 = mutableListOf(0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0)
        k15 = mutableListOf(0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0)
        k16 = mutableListOf(0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0)
        l1 = mutableListOf(0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0)
        l2 = mutableListOf(0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0)
        l3 = mutableListOf(0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0)
        l4 = mutableListOf(0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0)
        l5 = mutableListOf(0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0)
        l6 = mutableListOf(0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0)
        l7 = mutableListOf(0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0)
        l8 = mutableListOf(0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0)
        l9 = mutableListOf(0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0)
        l10 = mutableListOf(0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0)
        l11 = mutableListOf(0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0)
        l12 = mutableListOf(0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0)
        l13 = mutableListOf(0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0)
        l14 = mutableListOf(0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0)
        l15 = mutableListOf(0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0)
        l16 = mutableListOf(0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0)
        m1 = mutableListOf(0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0)
        m2 = mutableListOf(0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0)
        m3 = mutableListOf(0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0)
        m4 = mutableListOf(0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0)
        m5 = mutableListOf(0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0)
        m6 = mutableListOf(0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0)
        m7 = mutableListOf(0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0)
        m8 = mutableListOf(0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0)
        m9 = mutableListOf(0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0)
        m10 = mutableListOf(0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0)
        m11 = mutableListOf(0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0)
        m12 = mutableListOf(0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0)
        m13 = mutableListOf(0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0)
        m14 = mutableListOf(0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0)
        m15 = mutableListOf(0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0)
        m16 = mutableListOf(0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0)
        n1 = mutableListOf(0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0)
        n2 = mutableListOf(0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0)
        n3 = mutableListOf(0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0)
        n4 = mutableListOf(0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0)
        n5 = mutableListOf(0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0)
        n6 = mutableListOf(0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0)
        n7 = mutableListOf(0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0)
        n8 = mutableListOf(0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0)
        n9 = mutableListOf(0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0)
        n10 = mutableListOf(0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0)
        n11 = mutableListOf(0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0)
        n12 = mutableListOf(0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0)
        n13 = mutableListOf(0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0)
        n14 = mutableListOf(0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0)
        n15 = mutableListOf(0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0)
        n16 = mutableListOf(0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0)
        o1 = mutableListOf(0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0)
        o2 = mutableListOf(0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0)
        o3 = mutableListOf(0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0)
        o4 = mutableListOf(0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0)
        o5 = mutableListOf(0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0)
        o6 = mutableListOf(0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0)
        o7 = mutableListOf(0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0)
        o8 = mutableListOf(0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0)
        o9 = mutableListOf(0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0)
        o10 = mutableListOf(0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0)
        o11 = mutableListOf(0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0)
        o12 = mutableListOf(0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0)
        o13 = mutableListOf(0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0)
        o14 = mutableListOf(0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0)
        o15 = mutableListOf(0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0)
        o16 = mutableListOf(0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0)
        resetColor()
    }

    private fun resetColor() {
        findViewById<View>(R.id.sequencer_list).findViewById<ImageView>(R.id.sequence).setBackgroundColor(Color.parseColor("#5A5A66"))
        findViewById<View>(R.id.sequencer_list).findViewById<ImageView>(R.id.sequence2).setBackgroundColor(Color.parseColor("#5A5A66"))
        findViewById<View>(R.id.sequencer_list).findViewById<ImageView>(R.id.sequence3).setBackgroundColor(Color.parseColor("#5A5A66"))
        findViewById<View>(R.id.sequencer_list).findViewById<ImageView>(R.id.sequence4).setBackgroundColor(Color.parseColor("#5A5A66"))
        findViewById<View>(R.id.sequencer_list).findViewById<ImageView>(R.id.sequence5).setBackgroundColor(Color.parseColor("#5A5A66"))
        findViewById<View>(R.id.sequencer_list).findViewById<ImageView>(R.id.sequence6).setBackgroundColor(Color.parseColor("#5A5A66"))
        findViewById<View>(R.id.sequencer_list).findViewById<ImageView>(R.id.sequence7).setBackgroundColor(Color.parseColor("#5A5A66"))
        findViewById<View>(R.id.sequencer_list).findViewById<ImageView>(R.id.sequence8).setBackgroundColor(Color.parseColor("#5A5A66"))
        findViewById<View>(R.id.sequencer_list).findViewById<ImageView>(R.id.sequence9).setBackgroundColor(Color.parseColor("#5A5A66"))
        findViewById<View>(R.id.sequencer_list).findViewById<ImageView>(R.id.sequence10).setBackgroundColor(Color.parseColor("#5A5A66"))
        findViewById<View>(R.id.sequencer_list).findViewById<ImageView>(R.id.sequence11).setBackgroundColor(Color.parseColor("#5A5A66"))
        findViewById<View>(R.id.sequencer_list).findViewById<ImageView>(R.id.sequence12).setBackgroundColor(Color.parseColor("#5A5A66"))
        findViewById<View>(R.id.sequencer_list).findViewById<ImageView>(R.id.sequence13).setBackgroundColor(Color.parseColor("#5A5A66"))
        findViewById<View>(R.id.sequencer_list).findViewById<ImageView>(R.id.sequence14).setBackgroundColor(Color.parseColor("#5A5A66"))
        findViewById<View>(R.id.sequencer_list).findViewById<ImageView>(R.id.sequence15).setBackgroundColor(Color.parseColor("#5A5A66"))
        findViewById<View>(R.id.sequencer_list).findViewById<ImageView>(R.id.sequence16).setBackgroundColor(Color.parseColor("#5A5A66"))
        findViewById<View>(R.id.sequencer_list2).findViewById<ImageView>(R.id.sequence).setBackgroundColor(Color.parseColor("#5A5A66"))
        findViewById<View>(R.id.sequencer_list2).findViewById<ImageView>(R.id.sequence2).setBackgroundColor(Color.parseColor("#5A5A66"))
        findViewById<View>(R.id.sequencer_list2).findViewById<ImageView>(R.id.sequence3).setBackgroundColor(Color.parseColor("#5A5A66"))
        findViewById<View>(R.id.sequencer_list2).findViewById<ImageView>(R.id.sequence4).setBackgroundColor(Color.parseColor("#5A5A66"))
        findViewById<View>(R.id.sequencer_list2).findViewById<ImageView>(R.id.sequence5).setBackgroundColor(Color.parseColor("#5A5A66"))
        findViewById<View>(R.id.sequencer_list2).findViewById<ImageView>(R.id.sequence6).setBackgroundColor(Color.parseColor("#5A5A66"))
        findViewById<View>(R.id.sequencer_list2).findViewById<ImageView>(R.id.sequence7).setBackgroundColor(Color.parseColor("#5A5A66"))
        findViewById<View>(R.id.sequencer_list2).findViewById<ImageView>(R.id.sequence8).setBackgroundColor(Color.parseColor("#5A5A66"))
        findViewById<View>(R.id.sequencer_list2).findViewById<ImageView>(R.id.sequence9).setBackgroundColor(Color.parseColor("#5A5A66"))
        findViewById<View>(R.id.sequencer_list2).findViewById<ImageView>(R.id.sequence10).setBackgroundColor(Color.parseColor("#5A5A66"))
        findViewById<View>(R.id.sequencer_list2).findViewById<ImageView>(R.id.sequence11).setBackgroundColor(Color.parseColor("#5A5A66"))
        findViewById<View>(R.id.sequencer_list2).findViewById<ImageView>(R.id.sequence12).setBackgroundColor(Color.parseColor("#5A5A66"))
        findViewById<View>(R.id.sequencer_list2).findViewById<ImageView>(R.id.sequence13).setBackgroundColor(Color.parseColor("#5A5A66"))
        findViewById<View>(R.id.sequencer_list2).findViewById<ImageView>(R.id.sequence14).setBackgroundColor(Color.parseColor("#5A5A66"))
        findViewById<View>(R.id.sequencer_list2).findViewById<ImageView>(R.id.sequence15).setBackgroundColor(Color.parseColor("#5A5A66"))
        findViewById<View>(R.id.sequencer_list2).findViewById<ImageView>(R.id.sequence16).setBackgroundColor(Color.parseColor("#5A5A66"))
        findViewById<View>(R.id.sequencer_list3).findViewById<ImageView>(R.id.sequence).setBackgroundColor(Color.parseColor("#5A5A66"))
        findViewById<View>(R.id.sequencer_list3).findViewById<ImageView>(R.id.sequence2).setBackgroundColor(Color.parseColor("#5A5A66"))
        findViewById<View>(R.id.sequencer_list3).findViewById<ImageView>(R.id.sequence3).setBackgroundColor(Color.parseColor("#5A5A66"))
        findViewById<View>(R.id.sequencer_list3).findViewById<ImageView>(R.id.sequence4).setBackgroundColor(Color.parseColor("#5A5A66"))
        findViewById<View>(R.id.sequencer_list3).findViewById<ImageView>(R.id.sequence5).setBackgroundColor(Color.parseColor("#5A5A66"))
        findViewById<View>(R.id.sequencer_list3).findViewById<ImageView>(R.id.sequence6).setBackgroundColor(Color.parseColor("#5A5A66"))
        findViewById<View>(R.id.sequencer_list3).findViewById<ImageView>(R.id.sequence7).setBackgroundColor(Color.parseColor("#5A5A66"))
        findViewById<View>(R.id.sequencer_list3).findViewById<ImageView>(R.id.sequence8).setBackgroundColor(Color.parseColor("#5A5A66"))
        findViewById<View>(R.id.sequencer_list3).findViewById<ImageView>(R.id.sequence9).setBackgroundColor(Color.parseColor("#5A5A66"))
        findViewById<View>(R.id.sequencer_list3).findViewById<ImageView>(R.id.sequence10).setBackgroundColor(Color.parseColor("#5A5A66"))
        findViewById<View>(R.id.sequencer_list3).findViewById<ImageView>(R.id.sequence11).setBackgroundColor(Color.parseColor("#5A5A66"))
        findViewById<View>(R.id.sequencer_list3).findViewById<ImageView>(R.id.sequence12).setBackgroundColor(Color.parseColor("#5A5A66"))
        findViewById<View>(R.id.sequencer_list3).findViewById<ImageView>(R.id.sequence13).setBackgroundColor(Color.parseColor("#5A5A66"))
        findViewById<View>(R.id.sequencer_list3).findViewById<ImageView>(R.id.sequence14).setBackgroundColor(Color.parseColor("#5A5A66"))
        findViewById<View>(R.id.sequencer_list3).findViewById<ImageView>(R.id.sequence15).setBackgroundColor(Color.parseColor("#5A5A66"))
        findViewById<View>(R.id.sequencer_list3).findViewById<ImageView>(R.id.sequence16).setBackgroundColor(Color.parseColor("#5A5A66"))
        findViewById<View>(R.id.sequencer_list4).findViewById<ImageView>(R.id.sequence).setBackgroundColor(Color.parseColor("#5A5A66"))
        findViewById<View>(R.id.sequencer_list4).findViewById<ImageView>(R.id.sequence2).setBackgroundColor(Color.parseColor("#5A5A66"))
        findViewById<View>(R.id.sequencer_list4).findViewById<ImageView>(R.id.sequence3).setBackgroundColor(Color.parseColor("#5A5A66"))
        findViewById<View>(R.id.sequencer_list4).findViewById<ImageView>(R.id.sequence4).setBackgroundColor(Color.parseColor("#5A5A66"))
        findViewById<View>(R.id.sequencer_list4).findViewById<ImageView>(R.id.sequence5).setBackgroundColor(Color.parseColor("#5A5A66"))
        findViewById<View>(R.id.sequencer_list4).findViewById<ImageView>(R.id.sequence6).setBackgroundColor(Color.parseColor("#5A5A66"))
        findViewById<View>(R.id.sequencer_list4).findViewById<ImageView>(R.id.sequence7).setBackgroundColor(Color.parseColor("#5A5A66"))
        findViewById<View>(R.id.sequencer_list4).findViewById<ImageView>(R.id.sequence8).setBackgroundColor(Color.parseColor("#5A5A66"))
        findViewById<View>(R.id.sequencer_list4).findViewById<ImageView>(R.id.sequence9).setBackgroundColor(Color.parseColor("#5A5A66"))
        findViewById<View>(R.id.sequencer_list4).findViewById<ImageView>(R.id.sequence10).setBackgroundColor(Color.parseColor("#5A5A66"))
        findViewById<View>(R.id.sequencer_list4).findViewById<ImageView>(R.id.sequence11).setBackgroundColor(Color.parseColor("#5A5A66"))
        findViewById<View>(R.id.sequencer_list4).findViewById<ImageView>(R.id.sequence12).setBackgroundColor(Color.parseColor("#5A5A66"))
        findViewById<View>(R.id.sequencer_list4).findViewById<ImageView>(R.id.sequence13).setBackgroundColor(Color.parseColor("#5A5A66"))
        findViewById<View>(R.id.sequencer_list4).findViewById<ImageView>(R.id.sequence14).setBackgroundColor(Color.parseColor("#5A5A66"))
        findViewById<View>(R.id.sequencer_list4).findViewById<ImageView>(R.id.sequence15).setBackgroundColor(Color.parseColor("#5A5A66"))
        findViewById<View>(R.id.sequencer_list4).findViewById<ImageView>(R.id.sequence16).setBackgroundColor(Color.parseColor("#5A5A66"))
        findViewById<View>(R.id.sequencer_list5).findViewById<ImageView>(R.id.sequence).setBackgroundColor(Color.parseColor("#5A5A66"))
        findViewById<View>(R.id.sequencer_list5).findViewById<ImageView>(R.id.sequence2).setBackgroundColor(Color.parseColor("#5A5A66"))
        findViewById<View>(R.id.sequencer_list5).findViewById<ImageView>(R.id.sequence3).setBackgroundColor(Color.parseColor("#5A5A66"))
        findViewById<View>(R.id.sequencer_list5).findViewById<ImageView>(R.id.sequence4).setBackgroundColor(Color.parseColor("#5A5A66"))
        findViewById<View>(R.id.sequencer_list5).findViewById<ImageView>(R.id.sequence5).setBackgroundColor(Color.parseColor("#5A5A66"))
        findViewById<View>(R.id.sequencer_list5).findViewById<ImageView>(R.id.sequence6).setBackgroundColor(Color.parseColor("#5A5A66"))
        findViewById<View>(R.id.sequencer_list5).findViewById<ImageView>(R.id.sequence7).setBackgroundColor(Color.parseColor("#5A5A66"))
        findViewById<View>(R.id.sequencer_list5).findViewById<ImageView>(R.id.sequence8).setBackgroundColor(Color.parseColor("#5A5A66"))
        findViewById<View>(R.id.sequencer_list5).findViewById<ImageView>(R.id.sequence9).setBackgroundColor(Color.parseColor("#5A5A66"))
        findViewById<View>(R.id.sequencer_list5).findViewById<ImageView>(R.id.sequence10).setBackgroundColor(Color.parseColor("#5A5A66"))
        findViewById<View>(R.id.sequencer_list5).findViewById<ImageView>(R.id.sequence11).setBackgroundColor(Color.parseColor("#5A5A66"))
        findViewById<View>(R.id.sequencer_list5).findViewById<ImageView>(R.id.sequence12).setBackgroundColor(Color.parseColor("#5A5A66"))
        findViewById<View>(R.id.sequencer_list5).findViewById<ImageView>(R.id.sequence13).setBackgroundColor(Color.parseColor("#5A5A66"))
        findViewById<View>(R.id.sequencer_list5).findViewById<ImageView>(R.id.sequence14).setBackgroundColor(Color.parseColor("#5A5A66"))
        findViewById<View>(R.id.sequencer_list5).findViewById<ImageView>(R.id.sequence15).setBackgroundColor(Color.parseColor("#5A5A66"))
        findViewById<View>(R.id.sequencer_list5).findViewById<ImageView>(R.id.sequence16).setBackgroundColor(Color.parseColor("#5A5A66"))
        findViewById<View>(R.id.sequencer_list6).findViewById<ImageView>(R.id.sequence).setBackgroundColor(Color.parseColor("#5A5A66"))
        findViewById<View>(R.id.sequencer_list6).findViewById<ImageView>(R.id.sequence2).setBackgroundColor(Color.parseColor("#5A5A66"))
        findViewById<View>(R.id.sequencer_list6).findViewById<ImageView>(R.id.sequence3).setBackgroundColor(Color.parseColor("#5A5A66"))
        findViewById<View>(R.id.sequencer_list6).findViewById<ImageView>(R.id.sequence4).setBackgroundColor(Color.parseColor("#5A5A66"))
        findViewById<View>(R.id.sequencer_list6).findViewById<ImageView>(R.id.sequence5).setBackgroundColor(Color.parseColor("#5A5A66"))
        findViewById<View>(R.id.sequencer_list6).findViewById<ImageView>(R.id.sequence6).setBackgroundColor(Color.parseColor("#5A5A66"))
        findViewById<View>(R.id.sequencer_list6).findViewById<ImageView>(R.id.sequence7).setBackgroundColor(Color.parseColor("#5A5A66"))
        findViewById<View>(R.id.sequencer_list6).findViewById<ImageView>(R.id.sequence8).setBackgroundColor(Color.parseColor("#5A5A66"))
        findViewById<View>(R.id.sequencer_list6).findViewById<ImageView>(R.id.sequence9).setBackgroundColor(Color.parseColor("#5A5A66"))
        findViewById<View>(R.id.sequencer_list6).findViewById<ImageView>(R.id.sequence10).setBackgroundColor(Color.parseColor("#5A5A66"))
        findViewById<View>(R.id.sequencer_list6).findViewById<ImageView>(R.id.sequence11).setBackgroundColor(Color.parseColor("#5A5A66"))
        findViewById<View>(R.id.sequencer_list6).findViewById<ImageView>(R.id.sequence12).setBackgroundColor(Color.parseColor("#5A5A66"))
        findViewById<View>(R.id.sequencer_list6).findViewById<ImageView>(R.id.sequence13).setBackgroundColor(Color.parseColor("#5A5A66"))
        findViewById<View>(R.id.sequencer_list6).findViewById<ImageView>(R.id.sequence14).setBackgroundColor(Color.parseColor("#5A5A66"))
        findViewById<View>(R.id.sequencer_list6).findViewById<ImageView>(R.id.sequence15).setBackgroundColor(Color.parseColor("#5A5A66"))
        findViewById<View>(R.id.sequencer_list6).findViewById<ImageView>(R.id.sequence16).setBackgroundColor(Color.parseColor("#5A5A66"))
        findViewById<View>(R.id.sequencer_list7).findViewById<ImageView>(R.id.sequence).setBackgroundColor(Color.parseColor("#5A5A66"))
        findViewById<View>(R.id.sequencer_list7).findViewById<ImageView>(R.id.sequence2).setBackgroundColor(Color.parseColor("#5A5A66"))
        findViewById<View>(R.id.sequencer_list7).findViewById<ImageView>(R.id.sequence3).setBackgroundColor(Color.parseColor("#5A5A66"))
        findViewById<View>(R.id.sequencer_list7).findViewById<ImageView>(R.id.sequence4).setBackgroundColor(Color.parseColor("#5A5A66"))
        findViewById<View>(R.id.sequencer_list7).findViewById<ImageView>(R.id.sequence5).setBackgroundColor(Color.parseColor("#5A5A66"))
        findViewById<View>(R.id.sequencer_list7).findViewById<ImageView>(R.id.sequence6).setBackgroundColor(Color.parseColor("#5A5A66"))
        findViewById<View>(R.id.sequencer_list7).findViewById<ImageView>(R.id.sequence7).setBackgroundColor(Color.parseColor("#5A5A66"))
        findViewById<View>(R.id.sequencer_list7).findViewById<ImageView>(R.id.sequence8).setBackgroundColor(Color.parseColor("#5A5A66"))
        findViewById<View>(R.id.sequencer_list7).findViewById<ImageView>(R.id.sequence9).setBackgroundColor(Color.parseColor("#5A5A66"))
        findViewById<View>(R.id.sequencer_list7).findViewById<ImageView>(R.id.sequence10).setBackgroundColor(Color.parseColor("#5A5A66"))
        findViewById<View>(R.id.sequencer_list7).findViewById<ImageView>(R.id.sequence11).setBackgroundColor(Color.parseColor("#5A5A66"))
        findViewById<View>(R.id.sequencer_list7).findViewById<ImageView>(R.id.sequence12).setBackgroundColor(Color.parseColor("#5A5A66"))
        findViewById<View>(R.id.sequencer_list7).findViewById<ImageView>(R.id.sequence13).setBackgroundColor(Color.parseColor("#5A5A66"))
        findViewById<View>(R.id.sequencer_list7).findViewById<ImageView>(R.id.sequence14).setBackgroundColor(Color.parseColor("#5A5A66"))
        findViewById<View>(R.id.sequencer_list7).findViewById<ImageView>(R.id.sequence15).setBackgroundColor(Color.parseColor("#5A5A66"))
        findViewById<View>(R.id.sequencer_list7).findViewById<ImageView>(R.id.sequence16).setBackgroundColor(Color.parseColor("#5A5A66"))
        findViewById<View>(R.id.sequencer_list8).findViewById<ImageView>(R.id.sequence).setBackgroundColor(Color.parseColor("#5A5A66"))
        findViewById<View>(R.id.sequencer_list8).findViewById<ImageView>(R.id.sequence2).setBackgroundColor(Color.parseColor("#5A5A66"))
        findViewById<View>(R.id.sequencer_list8).findViewById<ImageView>(R.id.sequence3).setBackgroundColor(Color.parseColor("#5A5A66"))
        findViewById<View>(R.id.sequencer_list8).findViewById<ImageView>(R.id.sequence4).setBackgroundColor(Color.parseColor("#5A5A66"))
        findViewById<View>(R.id.sequencer_list8).findViewById<ImageView>(R.id.sequence5).setBackgroundColor(Color.parseColor("#5A5A66"))
        findViewById<View>(R.id.sequencer_list8).findViewById<ImageView>(R.id.sequence6).setBackgroundColor(Color.parseColor("#5A5A66"))
        findViewById<View>(R.id.sequencer_list8).findViewById<ImageView>(R.id.sequence7).setBackgroundColor(Color.parseColor("#5A5A66"))
        findViewById<View>(R.id.sequencer_list8).findViewById<ImageView>(R.id.sequence8).setBackgroundColor(Color.parseColor("#5A5A66"))
        findViewById<View>(R.id.sequencer_list8).findViewById<ImageView>(R.id.sequence9).setBackgroundColor(Color.parseColor("#5A5A66"))
        findViewById<View>(R.id.sequencer_list8).findViewById<ImageView>(R.id.sequence10).setBackgroundColor(Color.parseColor("#5A5A66"))
        findViewById<View>(R.id.sequencer_list8).findViewById<ImageView>(R.id.sequence11).setBackgroundColor(Color.parseColor("#5A5A66"))
        findViewById<View>(R.id.sequencer_list8).findViewById<ImageView>(R.id.sequence12).setBackgroundColor(Color.parseColor("#5A5A66"))
        findViewById<View>(R.id.sequencer_list8).findViewById<ImageView>(R.id.sequence13).setBackgroundColor(Color.parseColor("#5A5A66"))
        findViewById<View>(R.id.sequencer_list8).findViewById<ImageView>(R.id.sequence14).setBackgroundColor(Color.parseColor("#5A5A66"))
        findViewById<View>(R.id.sequencer_list8).findViewById<ImageView>(R.id.sequence15).setBackgroundColor(Color.parseColor("#5A5A66"))
        findViewById<View>(R.id.sequencer_list8).findViewById<ImageView>(R.id.sequence16).setBackgroundColor(Color.parseColor("#5A5A66"))
        findViewById<View>(R.id.sequencer_list9).findViewById<ImageView>(R.id.sequence).setBackgroundColor(Color.parseColor("#5A5A66"))
        findViewById<View>(R.id.sequencer_list9).findViewById<ImageView>(R.id.sequence2).setBackgroundColor(Color.parseColor("#5A5A66"))
        findViewById<View>(R.id.sequencer_list9).findViewById<ImageView>(R.id.sequence3).setBackgroundColor(Color.parseColor("#5A5A66"))
        findViewById<View>(R.id.sequencer_list9).findViewById<ImageView>(R.id.sequence4).setBackgroundColor(Color.parseColor("#5A5A66"))
        findViewById<View>(R.id.sequencer_list9).findViewById<ImageView>(R.id.sequence5).setBackgroundColor(Color.parseColor("#5A5A66"))
        findViewById<View>(R.id.sequencer_list9).findViewById<ImageView>(R.id.sequence6).setBackgroundColor(Color.parseColor("#5A5A66"))
        findViewById<View>(R.id.sequencer_list9).findViewById<ImageView>(R.id.sequence7).setBackgroundColor(Color.parseColor("#5A5A66"))
        findViewById<View>(R.id.sequencer_list9).findViewById<ImageView>(R.id.sequence8).setBackgroundColor(Color.parseColor("#5A5A66"))
        findViewById<View>(R.id.sequencer_list9).findViewById<ImageView>(R.id.sequence9).setBackgroundColor(Color.parseColor("#5A5A66"))
        findViewById<View>(R.id.sequencer_list9).findViewById<ImageView>(R.id.sequence10).setBackgroundColor(Color.parseColor("#5A5A66"))
        findViewById<View>(R.id.sequencer_list9).findViewById<ImageView>(R.id.sequence11).setBackgroundColor(Color.parseColor("#5A5A66"))
        findViewById<View>(R.id.sequencer_list9).findViewById<ImageView>(R.id.sequence12).setBackgroundColor(Color.parseColor("#5A5A66"))
        findViewById<View>(R.id.sequencer_list9).findViewById<ImageView>(R.id.sequence13).setBackgroundColor(Color.parseColor("#5A5A66"))
        findViewById<View>(R.id.sequencer_list9).findViewById<ImageView>(R.id.sequence14).setBackgroundColor(Color.parseColor("#5A5A66"))
        findViewById<View>(R.id.sequencer_list9).findViewById<ImageView>(R.id.sequence15).setBackgroundColor(Color.parseColor("#5A5A66"))
        findViewById<View>(R.id.sequencer_list9).findViewById<ImageView>(R.id.sequence16).setBackgroundColor(Color.parseColor("#5A5A66"))
        findViewById<View>(R.id.sequencer_list10).findViewById<ImageView>(R.id.sequence).setBackgroundColor(Color.parseColor("#5A5A66"))
        findViewById<View>(R.id.sequencer_list10).findViewById<ImageView>(R.id.sequence2).setBackgroundColor(Color.parseColor("#5A5A66"))
        findViewById<View>(R.id.sequencer_list10).findViewById<ImageView>(R.id.sequence3).setBackgroundColor(Color.parseColor("#5A5A66"))
        findViewById<View>(R.id.sequencer_list10).findViewById<ImageView>(R.id.sequence4).setBackgroundColor(Color.parseColor("#5A5A66"))
        findViewById<View>(R.id.sequencer_list10).findViewById<ImageView>(R.id.sequence5).setBackgroundColor(Color.parseColor("#5A5A66"))
        findViewById<View>(R.id.sequencer_list10).findViewById<ImageView>(R.id.sequence6).setBackgroundColor(Color.parseColor("#5A5A66"))
        findViewById<View>(R.id.sequencer_list10).findViewById<ImageView>(R.id.sequence7).setBackgroundColor(Color.parseColor("#5A5A66"))
        findViewById<View>(R.id.sequencer_list10).findViewById<ImageView>(R.id.sequence8).setBackgroundColor(Color.parseColor("#5A5A66"))
        findViewById<View>(R.id.sequencer_list10).findViewById<ImageView>(R.id.sequence9).setBackgroundColor(Color.parseColor("#5A5A66"))
        findViewById<View>(R.id.sequencer_list10).findViewById<ImageView>(R.id.sequence10).setBackgroundColor(Color.parseColor("#5A5A66"))
        findViewById<View>(R.id.sequencer_list10).findViewById<ImageView>(R.id.sequence11).setBackgroundColor(Color.parseColor("#5A5A66"))
        findViewById<View>(R.id.sequencer_list10).findViewById<ImageView>(R.id.sequence12).setBackgroundColor(Color.parseColor("#5A5A66"))
        findViewById<View>(R.id.sequencer_list10).findViewById<ImageView>(R.id.sequence13).setBackgroundColor(Color.parseColor("#5A5A66"))
        findViewById<View>(R.id.sequencer_list10).findViewById<ImageView>(R.id.sequence14).setBackgroundColor(Color.parseColor("#5A5A66"))
        findViewById<View>(R.id.sequencer_list10).findViewById<ImageView>(R.id.sequence15).setBackgroundColor(Color.parseColor("#5A5A66"))
        findViewById<View>(R.id.sequencer_list10).findViewById<ImageView>(R.id.sequence16).setBackgroundColor(Color.parseColor("#5A5A66"))
        findViewById<View>(R.id.sequencer_list11).findViewById<ImageView>(R.id.sequence).setBackgroundColor(Color.parseColor("#5A5A66"))
        findViewById<View>(R.id.sequencer_list11).findViewById<ImageView>(R.id.sequence2).setBackgroundColor(Color.parseColor("#5A5A66"))
        findViewById<View>(R.id.sequencer_list11).findViewById<ImageView>(R.id.sequence3).setBackgroundColor(Color.parseColor("#5A5A66"))
        findViewById<View>(R.id.sequencer_list11).findViewById<ImageView>(R.id.sequence4).setBackgroundColor(Color.parseColor("#5A5A66"))
        findViewById<View>(R.id.sequencer_list11).findViewById<ImageView>(R.id.sequence5).setBackgroundColor(Color.parseColor("#5A5A66"))
        findViewById<View>(R.id.sequencer_list11).findViewById<ImageView>(R.id.sequence6).setBackgroundColor(Color.parseColor("#5A5A66"))
        findViewById<View>(R.id.sequencer_list11).findViewById<ImageView>(R.id.sequence7).setBackgroundColor(Color.parseColor("#5A5A66"))
        findViewById<View>(R.id.sequencer_list11).findViewById<ImageView>(R.id.sequence8).setBackgroundColor(Color.parseColor("#5A5A66"))
        findViewById<View>(R.id.sequencer_list11).findViewById<ImageView>(R.id.sequence9).setBackgroundColor(Color.parseColor("#5A5A66"))
        findViewById<View>(R.id.sequencer_list11).findViewById<ImageView>(R.id.sequence10).setBackgroundColor(Color.parseColor("#5A5A66"))
        findViewById<View>(R.id.sequencer_list11).findViewById<ImageView>(R.id.sequence11).setBackgroundColor(Color.parseColor("#5A5A66"))
        findViewById<View>(R.id.sequencer_list11).findViewById<ImageView>(R.id.sequence12).setBackgroundColor(Color.parseColor("#5A5A66"))
        findViewById<View>(R.id.sequencer_list11).findViewById<ImageView>(R.id.sequence13).setBackgroundColor(Color.parseColor("#5A5A66"))
        findViewById<View>(R.id.sequencer_list11).findViewById<ImageView>(R.id.sequence14).setBackgroundColor(Color.parseColor("#5A5A66"))
        findViewById<View>(R.id.sequencer_list11).findViewById<ImageView>(R.id.sequence15).setBackgroundColor(Color.parseColor("#5A5A66"))
        findViewById<View>(R.id.sequencer_list11).findViewById<ImageView>(R.id.sequence16).setBackgroundColor(Color.parseColor("#5A5A66"))
        findViewById<View>(R.id.sequencer_list12).findViewById<ImageView>(R.id.sequence).setBackgroundColor(Color.parseColor("#5A5A66"))
        findViewById<View>(R.id.sequencer_list12).findViewById<ImageView>(R.id.sequence2).setBackgroundColor(Color.parseColor("#5A5A66"))
        findViewById<View>(R.id.sequencer_list12).findViewById<ImageView>(R.id.sequence3).setBackgroundColor(Color.parseColor("#5A5A66"))
        findViewById<View>(R.id.sequencer_list12).findViewById<ImageView>(R.id.sequence4).setBackgroundColor(Color.parseColor("#5A5A66"))
        findViewById<View>(R.id.sequencer_list12).findViewById<ImageView>(R.id.sequence5).setBackgroundColor(Color.parseColor("#5A5A66"))
        findViewById<View>(R.id.sequencer_list12).findViewById<ImageView>(R.id.sequence6).setBackgroundColor(Color.parseColor("#5A5A66"))
        findViewById<View>(R.id.sequencer_list12).findViewById<ImageView>(R.id.sequence7).setBackgroundColor(Color.parseColor("#5A5A66"))
        findViewById<View>(R.id.sequencer_list12).findViewById<ImageView>(R.id.sequence8).setBackgroundColor(Color.parseColor("#5A5A66"))
        findViewById<View>(R.id.sequencer_list12).findViewById<ImageView>(R.id.sequence9).setBackgroundColor(Color.parseColor("#5A5A66"))
        findViewById<View>(R.id.sequencer_list12).findViewById<ImageView>(R.id.sequence10).setBackgroundColor(Color.parseColor("#5A5A66"))
        findViewById<View>(R.id.sequencer_list12).findViewById<ImageView>(R.id.sequence11).setBackgroundColor(Color.parseColor("#5A5A66"))
        findViewById<View>(R.id.sequencer_list12).findViewById<ImageView>(R.id.sequence12).setBackgroundColor(Color.parseColor("#5A5A66"))
        findViewById<View>(R.id.sequencer_list12).findViewById<ImageView>(R.id.sequence13).setBackgroundColor(Color.parseColor("#5A5A66"))
        findViewById<View>(R.id.sequencer_list12).findViewById<ImageView>(R.id.sequence14).setBackgroundColor(Color.parseColor("#5A5A66"))
        findViewById<View>(R.id.sequencer_list12).findViewById<ImageView>(R.id.sequence15).setBackgroundColor(Color.parseColor("#5A5A66"))
        findViewById<View>(R.id.sequencer_list12).findViewById<ImageView>(R.id.sequence16).setBackgroundColor(Color.parseColor("#5A5A66"))
        findViewById<View>(R.id.sequencer_list13).findViewById<ImageView>(R.id.sequence).setBackgroundColor(Color.parseColor("#5A5A66"))
        findViewById<View>(R.id.sequencer_list13).findViewById<ImageView>(R.id.sequence2).setBackgroundColor(Color.parseColor("#5A5A66"))
        findViewById<View>(R.id.sequencer_list13).findViewById<ImageView>(R.id.sequence3).setBackgroundColor(Color.parseColor("#5A5A66"))
        findViewById<View>(R.id.sequencer_list13).findViewById<ImageView>(R.id.sequence4).setBackgroundColor(Color.parseColor("#5A5A66"))
        findViewById<View>(R.id.sequencer_list13).findViewById<ImageView>(R.id.sequence5).setBackgroundColor(Color.parseColor("#5A5A66"))
        findViewById<View>(R.id.sequencer_list13).findViewById<ImageView>(R.id.sequence6).setBackgroundColor(Color.parseColor("#5A5A66"))
        findViewById<View>(R.id.sequencer_list13).findViewById<ImageView>(R.id.sequence7).setBackgroundColor(Color.parseColor("#5A5A66"))
        findViewById<View>(R.id.sequencer_list13).findViewById<ImageView>(R.id.sequence8).setBackgroundColor(Color.parseColor("#5A5A66"))
        findViewById<View>(R.id.sequencer_list13).findViewById<ImageView>(R.id.sequence9).setBackgroundColor(Color.parseColor("#5A5A66"))
        findViewById<View>(R.id.sequencer_list13).findViewById<ImageView>(R.id.sequence10).setBackgroundColor(Color.parseColor("#5A5A66"))
        findViewById<View>(R.id.sequencer_list13).findViewById<ImageView>(R.id.sequence11).setBackgroundColor(Color.parseColor("#5A5A66"))
        findViewById<View>(R.id.sequencer_list13).findViewById<ImageView>(R.id.sequence12).setBackgroundColor(Color.parseColor("#5A5A66"))
        findViewById<View>(R.id.sequencer_list13).findViewById<ImageView>(R.id.sequence13).setBackgroundColor(Color.parseColor("#5A5A66"))
        findViewById<View>(R.id.sequencer_list13).findViewById<ImageView>(R.id.sequence14).setBackgroundColor(Color.parseColor("#5A5A66"))
        findViewById<View>(R.id.sequencer_list13).findViewById<ImageView>(R.id.sequence15).setBackgroundColor(Color.parseColor("#5A5A66"))
        findViewById<View>(R.id.sequencer_list13).findViewById<ImageView>(R.id.sequence16).setBackgroundColor(Color.parseColor("#5A5A66"))
        findViewById<View>(R.id.sequencer_list14).findViewById<ImageView>(R.id.sequence).setBackgroundColor(Color.parseColor("#5A5A66"))
        findViewById<View>(R.id.sequencer_list14).findViewById<ImageView>(R.id.sequence2).setBackgroundColor(Color.parseColor("#5A5A66"))
        findViewById<View>(R.id.sequencer_list14).findViewById<ImageView>(R.id.sequence3).setBackgroundColor(Color.parseColor("#5A5A66"))
        findViewById<View>(R.id.sequencer_list14).findViewById<ImageView>(R.id.sequence4).setBackgroundColor(Color.parseColor("#5A5A66"))
        findViewById<View>(R.id.sequencer_list14).findViewById<ImageView>(R.id.sequence5).setBackgroundColor(Color.parseColor("#5A5A66"))
        findViewById<View>(R.id.sequencer_list14).findViewById<ImageView>(R.id.sequence6).setBackgroundColor(Color.parseColor("#5A5A66"))
        findViewById<View>(R.id.sequencer_list14).findViewById<ImageView>(R.id.sequence7).setBackgroundColor(Color.parseColor("#5A5A66"))
        findViewById<View>(R.id.sequencer_list14).findViewById<ImageView>(R.id.sequence8).setBackgroundColor(Color.parseColor("#5A5A66"))
        findViewById<View>(R.id.sequencer_list14).findViewById<ImageView>(R.id.sequence9).setBackgroundColor(Color.parseColor("#5A5A66"))
        findViewById<View>(R.id.sequencer_list14).findViewById<ImageView>(R.id.sequence10).setBackgroundColor(Color.parseColor("#5A5A66"))
        findViewById<View>(R.id.sequencer_list14).findViewById<ImageView>(R.id.sequence11).setBackgroundColor(Color.parseColor("#5A5A66"))
        findViewById<View>(R.id.sequencer_list14).findViewById<ImageView>(R.id.sequence12).setBackgroundColor(Color.parseColor("#5A5A66"))
        findViewById<View>(R.id.sequencer_list14).findViewById<ImageView>(R.id.sequence13).setBackgroundColor(Color.parseColor("#5A5A66"))
        findViewById<View>(R.id.sequencer_list14).findViewById<ImageView>(R.id.sequence14).setBackgroundColor(Color.parseColor("#5A5A66"))
        findViewById<View>(R.id.sequencer_list14).findViewById<ImageView>(R.id.sequence15).setBackgroundColor(Color.parseColor("#5A5A66"))
        findViewById<View>(R.id.sequencer_list14).findViewById<ImageView>(R.id.sequence16).setBackgroundColor(Color.parseColor("#5A5A66"))
        findViewById<View>(R.id.sequencer_list15).findViewById<ImageView>(R.id.sequence).setBackgroundColor(Color.parseColor("#5A5A66"))
        findViewById<View>(R.id.sequencer_list15).findViewById<ImageView>(R.id.sequence2).setBackgroundColor(Color.parseColor("#5A5A66"))
        findViewById<View>(R.id.sequencer_list15).findViewById<ImageView>(R.id.sequence3).setBackgroundColor(Color.parseColor("#5A5A66"))
        findViewById<View>(R.id.sequencer_list15).findViewById<ImageView>(R.id.sequence4).setBackgroundColor(Color.parseColor("#5A5A66"))
        findViewById<View>(R.id.sequencer_list15).findViewById<ImageView>(R.id.sequence5).setBackgroundColor(Color.parseColor("#5A5A66"))
        findViewById<View>(R.id.sequencer_list15).findViewById<ImageView>(R.id.sequence6).setBackgroundColor(Color.parseColor("#5A5A66"))
        findViewById<View>(R.id.sequencer_list15).findViewById<ImageView>(R.id.sequence7).setBackgroundColor(Color.parseColor("#5A5A66"))
        findViewById<View>(R.id.sequencer_list15).findViewById<ImageView>(R.id.sequence8).setBackgroundColor(Color.parseColor("#5A5A66"))
        findViewById<View>(R.id.sequencer_list15).findViewById<ImageView>(R.id.sequence9).setBackgroundColor(Color.parseColor("#5A5A66"))
        findViewById<View>(R.id.sequencer_list15).findViewById<ImageView>(R.id.sequence10).setBackgroundColor(Color.parseColor("#5A5A66"))
        findViewById<View>(R.id.sequencer_list15).findViewById<ImageView>(R.id.sequence11).setBackgroundColor(Color.parseColor("#5A5A66"))
        findViewById<View>(R.id.sequencer_list15).findViewById<ImageView>(R.id.sequence12).setBackgroundColor(Color.parseColor("#5A5A66"))
        findViewById<View>(R.id.sequencer_list15).findViewById<ImageView>(R.id.sequence13).setBackgroundColor(Color.parseColor("#5A5A66"))
        findViewById<View>(R.id.sequencer_list15).findViewById<ImageView>(R.id.sequence14).setBackgroundColor(Color.parseColor("#5A5A66"))
        findViewById<View>(R.id.sequencer_list15).findViewById<ImageView>(R.id.sequence15).setBackgroundColor(Color.parseColor("#5A5A66"))
        findViewById<View>(R.id.sequencer_list15).findViewById<ImageView>(R.id.sequence16).setBackgroundColor(Color.parseColor("#5A5A66"))
    }

    private fun changeSequence() {
        resetColor()
        if ( a1[sequencerSize] == 1 ) { findViewById<View>(R.id.sequencer_list).findViewById<ImageView>(R.id.sequence).setBackgroundColor(Color.parseColor("#d03933")) }
        if ( a2[sequencerSize] == 1 ) { findViewById<View>(R.id.sequencer_list).findViewById<ImageView>(R.id.sequence2).setBackgroundColor(Color.parseColor("#d03933")) }
        if ( a3[sequencerSize] == 1 ) { findViewById<View>(R.id.sequencer_list).findViewById<ImageView>(R.id.sequence3).setBackgroundColor(Color.parseColor("#d03933")) }
        if ( a4[sequencerSize] == 1 ) { findViewById<View>(R.id.sequencer_list).findViewById<ImageView>(R.id.sequence4).setBackgroundColor(Color.parseColor("#d03933")) }
        if ( a5[sequencerSize] == 1 ) { findViewById<View>(R.id.sequencer_list).findViewById<ImageView>(R.id.sequence5).setBackgroundColor(Color.parseColor("#d03933")) }
        if ( a6[sequencerSize] == 1 ) { findViewById<View>(R.id.sequencer_list).findViewById<ImageView>(R.id.sequence6).setBackgroundColor(Color.parseColor("#d03933")) }
        if ( a7[sequencerSize] == 1 ) { findViewById<View>(R.id.sequencer_list).findViewById<ImageView>(R.id.sequence7).setBackgroundColor(Color.parseColor("#d03933")) }
        if ( a8[sequencerSize] == 1 ) { findViewById<View>(R.id.sequencer_list).findViewById<ImageView>(R.id.sequence8).setBackgroundColor(Color.parseColor("#d03933")) }
        if ( a9[sequencerSize] == 1 ) { findViewById<View>(R.id.sequencer_list).findViewById<ImageView>(R.id.sequence9).setBackgroundColor(Color.parseColor("#d03933")) }
        if ( a10[sequencerSize] == 1 ) { findViewById<View>(R.id.sequencer_list).findViewById<ImageView>(R.id.sequence10).setBackgroundColor(Color.parseColor("#d03933")) }
        if ( a11[sequencerSize] == 1 ) { findViewById<View>(R.id.sequencer_list).findViewById<ImageView>(R.id.sequence11).setBackgroundColor(Color.parseColor("#d03933")) }
        if ( a12[sequencerSize] == 1 ) { findViewById<View>(R.id.sequencer_list).findViewById<ImageView>(R.id.sequence12).setBackgroundColor(Color.parseColor("#d03933")) }
        if ( a13[sequencerSize] == 1 ) { findViewById<View>(R.id.sequencer_list).findViewById<ImageView>(R.id.sequence13).setBackgroundColor(Color.parseColor("#d03933")) }
        if ( a14[sequencerSize] == 1 ) { findViewById<View>(R.id.sequencer_list).findViewById<ImageView>(R.id.sequence14).setBackgroundColor(Color.parseColor("#d03933")) }
        if ( a15[sequencerSize] == 1 ) { findViewById<View>(R.id.sequencer_list).findViewById<ImageView>(R.id.sequence15).setBackgroundColor(Color.parseColor("#d03933")) }
        if ( a16[sequencerSize] == 1 ) { findViewById<View>(R.id.sequencer_list).findViewById<ImageView>(R.id.sequence16).setBackgroundColor(Color.parseColor("#d03933")) }
        if ( b1[sequencerSize] == 1 ) { findViewById<View>(R.id.sequencer_list2).findViewById<ImageView>(R.id.sequence).setBackgroundColor(Color.parseColor("#e98e2f")) }
        if ( b2[sequencerSize] == 1 ) { findViewById<View>(R.id.sequencer_list2).findViewById<ImageView>(R.id.sequence2).setBackgroundColor(Color.parseColor("#e98e2f")) }
        if ( b3[sequencerSize] == 1 ) { findViewById<View>(R.id.sequencer_list2).findViewById<ImageView>(R.id.sequence3).setBackgroundColor(Color.parseColor("#e98e2f")) }
        if ( b4[sequencerSize] == 1 ) { findViewById<View>(R.id.sequencer_list2).findViewById<ImageView>(R.id.sequence4).setBackgroundColor(Color.parseColor("#e98e2f")) }
        if ( b5[sequencerSize] == 1 ) { findViewById<View>(R.id.sequencer_list2).findViewById<ImageView>(R.id.sequence5).setBackgroundColor(Color.parseColor("#e98e2f")) }
        if ( b6[sequencerSize] == 1 ) { findViewById<View>(R.id.sequencer_list2).findViewById<ImageView>(R.id.sequence6).setBackgroundColor(Color.parseColor("#e98e2f")) }
        if ( b7[sequencerSize] == 1 ) { findViewById<View>(R.id.sequencer_list2).findViewById<ImageView>(R.id.sequence7).setBackgroundColor(Color.parseColor("#e98e2f")) }
        if ( b8[sequencerSize] == 1 ) { findViewById<View>(R.id.sequencer_list2).findViewById<ImageView>(R.id.sequence8).setBackgroundColor(Color.parseColor("#e98e2f")) }
        if ( b9[sequencerSize] == 1 ) { findViewById<View>(R.id.sequencer_list2).findViewById<ImageView>(R.id.sequence9).setBackgroundColor(Color.parseColor("#e98e2f")) }
        if ( b10[sequencerSize] == 1 ) { findViewById<View>(R.id.sequencer_list2).findViewById<ImageView>(R.id.sequence10).setBackgroundColor(Color.parseColor("#e98e2f")) }
        if ( b11[sequencerSize] == 1 ) { findViewById<View>(R.id.sequencer_list2).findViewById<ImageView>(R.id.sequence11).setBackgroundColor(Color.parseColor("#e98e2f")) }
        if ( b12[sequencerSize] == 1 ) { findViewById<View>(R.id.sequencer_list2).findViewById<ImageView>(R.id.sequence12).setBackgroundColor(Color.parseColor("#e98e2f")) }
        if ( b13[sequencerSize] == 1 ) { findViewById<View>(R.id.sequencer_list2).findViewById<ImageView>(R.id.sequence13).setBackgroundColor(Color.parseColor("#e98e2f")) }
        if ( b14[sequencerSize] == 1 ) { findViewById<View>(R.id.sequencer_list2).findViewById<ImageView>(R.id.sequence14).setBackgroundColor(Color.parseColor("#e98e2f")) }
        if ( b15[sequencerSize] == 1 ) { findViewById<View>(R.id.sequencer_list2).findViewById<ImageView>(R.id.sequence15).setBackgroundColor(Color.parseColor("#e98e2f")) }
        if ( b16[sequencerSize] == 1 ) { findViewById<View>(R.id.sequencer_list2).findViewById<ImageView>(R.id.sequence16).setBackgroundColor(Color.parseColor("#e98e2f")) }
        if ( c1[sequencerSize] == 1 ) { findViewById<View>(R.id.sequencer_list3).findViewById<ImageView>(R.id.sequence).setBackgroundColor(Color.parseColor("#dfd441")) }
        if ( c2[sequencerSize] == 1 ) { findViewById<View>(R.id.sequencer_list3).findViewById<ImageView>(R.id.sequence2).setBackgroundColor(Color.parseColor("#dfd441")) }
        if ( c3[sequencerSize] == 1 ) { findViewById<View>(R.id.sequencer_list3).findViewById<ImageView>(R.id.sequence3).setBackgroundColor(Color.parseColor("#dfd441")) }
        if ( c4[sequencerSize] == 1 ) { findViewById<View>(R.id.sequencer_list3).findViewById<ImageView>(R.id.sequence4).setBackgroundColor(Color.parseColor("#dfd441")) }
        if ( c5[sequencerSize] == 1 ) { findViewById<View>(R.id.sequencer_list3).findViewById<ImageView>(R.id.sequence5).setBackgroundColor(Color.parseColor("#dfd441")) }
        if ( c6[sequencerSize] == 1 ) { findViewById<View>(R.id.sequencer_list3).findViewById<ImageView>(R.id.sequence6).setBackgroundColor(Color.parseColor("#dfd441")) }
        if ( c7[sequencerSize] == 1 ) { findViewById<View>(R.id.sequencer_list3).findViewById<ImageView>(R.id.sequence7).setBackgroundColor(Color.parseColor("#dfd441")) }
        if ( c8[sequencerSize] == 1 ) { findViewById<View>(R.id.sequencer_list3).findViewById<ImageView>(R.id.sequence8).setBackgroundColor(Color.parseColor("#dfd441")) }
        if ( c9[sequencerSize] == 1 ) { findViewById<View>(R.id.sequencer_list3).findViewById<ImageView>(R.id.sequence9).setBackgroundColor(Color.parseColor("#dfd441")) }
        if ( c10[sequencerSize] == 1 ) { findViewById<View>(R.id.sequencer_list3).findViewById<ImageView>(R.id.sequence10).setBackgroundColor(Color.parseColor("#dfd441")) }
        if ( c11[sequencerSize] == 1 ) { findViewById<View>(R.id.sequencer_list3).findViewById<ImageView>(R.id.sequence11).setBackgroundColor(Color.parseColor("#dfd441")) }
        if ( c12[sequencerSize] == 1 ) { findViewById<View>(R.id.sequencer_list3).findViewById<ImageView>(R.id.sequence12).setBackgroundColor(Color.parseColor("#dfd441")) }
        if ( c13[sequencerSize] == 1 ) { findViewById<View>(R.id.sequencer_list3).findViewById<ImageView>(R.id.sequence13).setBackgroundColor(Color.parseColor("#dfd441")) }
        if ( c14[sequencerSize] == 1 ) { findViewById<View>(R.id.sequencer_list3).findViewById<ImageView>(R.id.sequence14).setBackgroundColor(Color.parseColor("#dfd441")) }
        if ( c15[sequencerSize] == 1 ) { findViewById<View>(R.id.sequencer_list3).findViewById<ImageView>(R.id.sequence15).setBackgroundColor(Color.parseColor("#dfd441")) }
        if ( c16[sequencerSize] == 1 ) { findViewById<View>(R.id.sequencer_list3).findViewById<ImageView>(R.id.sequence16).setBackgroundColor(Color.parseColor("#dfd441")) }
        if ( d1[sequencerSize] == 1 ) { findViewById<View>(R.id.sequencer_list4).findViewById<ImageView>(R.id.sequence).setBackgroundColor(Color.parseColor("#e9e8e7")) }
        if ( d2[sequencerSize] == 1 ) { findViewById<View>(R.id.sequencer_list4).findViewById<ImageView>(R.id.sequence2).setBackgroundColor(Color.parseColor("#e9e8e7")) }
        if ( d3[sequencerSize] == 1 ) { findViewById<View>(R.id.sequencer_list4).findViewById<ImageView>(R.id.sequence3).setBackgroundColor(Color.parseColor("#e9e8e7")) }
        if ( d4[sequencerSize] == 1 ) { findViewById<View>(R.id.sequencer_list4).findViewById<ImageView>(R.id.sequence4).setBackgroundColor(Color.parseColor("#e9e8e7")) }
        if ( d5[sequencerSize] == 1 ) { findViewById<View>(R.id.sequencer_list4).findViewById<ImageView>(R.id.sequence5).setBackgroundColor(Color.parseColor("#e9e8e7")) }
        if ( d6[sequencerSize] == 1 ) { findViewById<View>(R.id.sequencer_list4).findViewById<ImageView>(R.id.sequence6).setBackgroundColor(Color.parseColor("#e9e8e7")) }
        if ( d7[sequencerSize] == 1 ) { findViewById<View>(R.id.sequencer_list4).findViewById<ImageView>(R.id.sequence7).setBackgroundColor(Color.parseColor("#e9e8e7")) }
        if ( d8[sequencerSize] == 1 ) { findViewById<View>(R.id.sequencer_list4).findViewById<ImageView>(R.id.sequence8).setBackgroundColor(Color.parseColor("#e9e8e7")) }
        if ( d9[sequencerSize] == 1 ) { findViewById<View>(R.id.sequencer_list4).findViewById<ImageView>(R.id.sequence9).setBackgroundColor(Color.parseColor("#e9e8e7")) }
        if ( d10[sequencerSize] == 1 ) { findViewById<View>(R.id.sequencer_list4).findViewById<ImageView>(R.id.sequence10).setBackgroundColor(Color.parseColor("#e9e8e7")) }
        if ( d11[sequencerSize] == 1 ) { findViewById<View>(R.id.sequencer_list4).findViewById<ImageView>(R.id.sequence11).setBackgroundColor(Color.parseColor("#e9e8e7")) }
        if ( d12[sequencerSize] == 1 ) { findViewById<View>(R.id.sequencer_list4).findViewById<ImageView>(R.id.sequence12).setBackgroundColor(Color.parseColor("#e9e8e7")) }
        if ( d13[sequencerSize] == 1 ) { findViewById<View>(R.id.sequencer_list4).findViewById<ImageView>(R.id.sequence13).setBackgroundColor(Color.parseColor("#e9e8e7")) }
        if ( d14[sequencerSize] == 1 ) { findViewById<View>(R.id.sequencer_list4).findViewById<ImageView>(R.id.sequence14).setBackgroundColor(Color.parseColor("#e9e8e7")) }
        if ( d15[sequencerSize] == 1 ) { findViewById<View>(R.id.sequencer_list4).findViewById<ImageView>(R.id.sequence15).setBackgroundColor(Color.parseColor("#e9e8e7")) }
        if ( d16[sequencerSize] == 1 ) { findViewById<View>(R.id.sequencer_list4).findViewById<ImageView>(R.id.sequence16).setBackgroundColor(Color.parseColor("#e9e8e7")) }
        if ( e1[sequencerSize] == 1 ) { findViewById<View>(R.id.sequencer_list5).findViewById<ImageView>(R.id.sequence).setBackgroundColor(Color.parseColor("#ffffff")) }
        if ( e2[sequencerSize] == 1 ) { findViewById<View>(R.id.sequencer_list5).findViewById<ImageView>(R.id.sequence2).setBackgroundColor(Color.parseColor("#ffffff")) }
        if ( e3[sequencerSize] == 1 ) { findViewById<View>(R.id.sequencer_list5).findViewById<ImageView>(R.id.sequence3).setBackgroundColor(Color.parseColor("#ffffff")) }
        if ( e4[sequencerSize] == 1 ) { findViewById<View>(R.id.sequencer_list5).findViewById<ImageView>(R.id.sequence4).setBackgroundColor(Color.parseColor("#ffffff")) }
        if ( e5[sequencerSize] == 1 ) { findViewById<View>(R.id.sequencer_list5).findViewById<ImageView>(R.id.sequence5).setBackgroundColor(Color.parseColor("#ffffff")) }
        if ( e6[sequencerSize] == 1 ) { findViewById<View>(R.id.sequencer_list5).findViewById<ImageView>(R.id.sequence6).setBackgroundColor(Color.parseColor("#ffffff")) }
        if ( e7[sequencerSize] == 1 ) { findViewById<View>(R.id.sequencer_list5).findViewById<ImageView>(R.id.sequence7).setBackgroundColor(Color.parseColor("#ffffff")) }
        if ( e8[sequencerSize] == 1 ) { findViewById<View>(R.id.sequencer_list5).findViewById<ImageView>(R.id.sequence8).setBackgroundColor(Color.parseColor("#ffffff")) }
        if ( e9[sequencerSize] == 1 ) { findViewById<View>(R.id.sequencer_list5).findViewById<ImageView>(R.id.sequence9).setBackgroundColor(Color.parseColor("#ffffff")) }
        if ( e10[sequencerSize] == 1 ) { findViewById<View>(R.id.sequencer_list5).findViewById<ImageView>(R.id.sequence10).setBackgroundColor(Color.parseColor("#ffffff")) }
        if ( e11[sequencerSize] == 1 ) { findViewById<View>(R.id.sequencer_list5).findViewById<ImageView>(R.id.sequence11).setBackgroundColor(Color.parseColor("#ffffff")) }
        if ( e12[sequencerSize] == 1 ) { findViewById<View>(R.id.sequencer_list5).findViewById<ImageView>(R.id.sequence12).setBackgroundColor(Color.parseColor("#ffffff")) }
        if ( e13[sequencerSize] == 1 ) { findViewById<View>(R.id.sequencer_list5).findViewById<ImageView>(R.id.sequence13).setBackgroundColor(Color.parseColor("#ffffff")) }
        if ( e14[sequencerSize] == 1 ) { findViewById<View>(R.id.sequencer_list5).findViewById<ImageView>(R.id.sequence14).setBackgroundColor(Color.parseColor("#ffffff")) }
        if ( e15[sequencerSize] == 1 ) { findViewById<View>(R.id.sequencer_list5).findViewById<ImageView>(R.id.sequence15).setBackgroundColor(Color.parseColor("#ffffff")) }
        if ( e16[sequencerSize] == 1 ) { findViewById<View>(R.id.sequencer_list5).findViewById<ImageView>(R.id.sequence16).setBackgroundColor(Color.parseColor("#ffffff")) }
        if ( f1[sequencerSize] == 1 ) { findViewById<View>(R.id.sequencer_list6).findViewById<ImageView>(R.id.sequence).setBackgroundColor(Color.parseColor("#d03933")) }
        if ( f2[sequencerSize] == 1 ) { findViewById<View>(R.id.sequencer_list6).findViewById<ImageView>(R.id.sequence2).setBackgroundColor(Color.parseColor("#d03933")) }
        if ( f3[sequencerSize] == 1 ) { findViewById<View>(R.id.sequencer_list6).findViewById<ImageView>(R.id.sequence3).setBackgroundColor(Color.parseColor("#d03933")) }
        if ( f4[sequencerSize] == 1 ) { findViewById<View>(R.id.sequencer_list6).findViewById<ImageView>(R.id.sequence4).setBackgroundColor(Color.parseColor("#d03933")) }
        if ( f5[sequencerSize] == 1 ) { findViewById<View>(R.id.sequencer_list6).findViewById<ImageView>(R.id.sequence5).setBackgroundColor(Color.parseColor("#d03933")) }
        if ( f6[sequencerSize] == 1 ) { findViewById<View>(R.id.sequencer_list6).findViewById<ImageView>(R.id.sequence6).setBackgroundColor(Color.parseColor("#d03933")) }
        if ( f7[sequencerSize] == 1 ) { findViewById<View>(R.id.sequencer_list6).findViewById<ImageView>(R.id.sequence7).setBackgroundColor(Color.parseColor("#d03933")) }
        if ( f8[sequencerSize] == 1 ) { findViewById<View>(R.id.sequencer_list6).findViewById<ImageView>(R.id.sequence8).setBackgroundColor(Color.parseColor("#d03933")) }
        if ( f9[sequencerSize] == 1 ) { findViewById<View>(R.id.sequencer_list6).findViewById<ImageView>(R.id.sequence9).setBackgroundColor(Color.parseColor("#d03933")) }
        if ( f10[sequencerSize] == 1 ) { findViewById<View>(R.id.sequencer_list6).findViewById<ImageView>(R.id.sequence10).setBackgroundColor(Color.parseColor("#d03933")) }
        if ( f11[sequencerSize] == 1 ) { findViewById<View>(R.id.sequencer_list6).findViewById<ImageView>(R.id.sequence11).setBackgroundColor(Color.parseColor("#d03933")) }
        if ( f12[sequencerSize] == 1 ) { findViewById<View>(R.id.sequencer_list6).findViewById<ImageView>(R.id.sequence12).setBackgroundColor(Color.parseColor("#d03933")) }
        if ( f13[sequencerSize] == 1 ) { findViewById<View>(R.id.sequencer_list6).findViewById<ImageView>(R.id.sequence13).setBackgroundColor(Color.parseColor("#d03933")) }
        if ( f14[sequencerSize] == 1 ) { findViewById<View>(R.id.sequencer_list6).findViewById<ImageView>(R.id.sequence14).setBackgroundColor(Color.parseColor("#d03933")) }
        if ( f15[sequencerSize] == 1 ) { findViewById<View>(R.id.sequencer_list6).findViewById<ImageView>(R.id.sequence15).setBackgroundColor(Color.parseColor("#d03933")) }
        if ( f16[sequencerSize] == 1 ) { findViewById<View>(R.id.sequencer_list6).findViewById<ImageView>(R.id.sequence16).setBackgroundColor(Color.parseColor("#d03933")) }
        if ( g1[sequencerSize] == 1 ) { findViewById<View>(R.id.sequencer_list7).findViewById<ImageView>(R.id.sequence).setBackgroundColor(Color.parseColor("#e98e2f")) }
        if ( g2[sequencerSize] == 1 ) { findViewById<View>(R.id.sequencer_list7).findViewById<ImageView>(R.id.sequence2).setBackgroundColor(Color.parseColor("#e98e2f")) }
        if ( g3[sequencerSize] == 1 ) { findViewById<View>(R.id.sequencer_list7).findViewById<ImageView>(R.id.sequence3).setBackgroundColor(Color.parseColor("#e98e2f")) }
        if ( g4[sequencerSize] == 1 ) { findViewById<View>(R.id.sequencer_list7).findViewById<ImageView>(R.id.sequence4).setBackgroundColor(Color.parseColor("#e98e2f")) }
        if ( g5[sequencerSize] == 1 ) { findViewById<View>(R.id.sequencer_list7).findViewById<ImageView>(R.id.sequence5).setBackgroundColor(Color.parseColor("#e98e2f")) }
        if ( g6[sequencerSize] == 1 ) { findViewById<View>(R.id.sequencer_list7).findViewById<ImageView>(R.id.sequence6).setBackgroundColor(Color.parseColor("#e98e2f")) }
        if ( g7[sequencerSize] == 1 ) { findViewById<View>(R.id.sequencer_list7).findViewById<ImageView>(R.id.sequence7).setBackgroundColor(Color.parseColor("#e98e2f")) }
        if ( g8[sequencerSize] == 1 ) { findViewById<View>(R.id.sequencer_list7).findViewById<ImageView>(R.id.sequence8).setBackgroundColor(Color.parseColor("#e98e2f")) }
        if ( g9[sequencerSize] == 1 ) { findViewById<View>(R.id.sequencer_list7).findViewById<ImageView>(R.id.sequence9).setBackgroundColor(Color.parseColor("#e98e2f")) }
        if ( g10[sequencerSize] == 1 ) { findViewById<View>(R.id.sequencer_list7).findViewById<ImageView>(R.id.sequence10).setBackgroundColor(Color.parseColor("#e98e2f")) }
        if ( g11[sequencerSize] == 1 ) { findViewById<View>(R.id.sequencer_list7).findViewById<ImageView>(R.id.sequence11).setBackgroundColor(Color.parseColor("#e98e2f")) }
        if ( g12[sequencerSize] == 1 ) { findViewById<View>(R.id.sequencer_list7).findViewById<ImageView>(R.id.sequence12).setBackgroundColor(Color.parseColor("#e98e2f")) }
        if ( g13[sequencerSize] == 1 ) { findViewById<View>(R.id.sequencer_list7).findViewById<ImageView>(R.id.sequence13).setBackgroundColor(Color.parseColor("#e98e2f")) }
        if ( g14[sequencerSize] == 1 ) { findViewById<View>(R.id.sequencer_list7).findViewById<ImageView>(R.id.sequence14).setBackgroundColor(Color.parseColor("#e98e2f")) }
        if ( g15[sequencerSize] == 1 ) { findViewById<View>(R.id.sequencer_list7).findViewById<ImageView>(R.id.sequence15).setBackgroundColor(Color.parseColor("#e98e2f")) }
        if ( g16[sequencerSize] == 1 ) { findViewById<View>(R.id.sequencer_list7).findViewById<ImageView>(R.id.sequence16).setBackgroundColor(Color.parseColor("#e98e2f")) }
        if ( h1[sequencerSize] == 1 ) { findViewById<View>(R.id.sequencer_list8).findViewById<ImageView>(R.id.sequence).setBackgroundColor(Color.parseColor("#dfd441")) }
        if ( h2[sequencerSize] == 1 ) { findViewById<View>(R.id.sequencer_list8).findViewById<ImageView>(R.id.sequence2).setBackgroundColor(Color.parseColor("#dfd441")) }
        if ( h3[sequencerSize] == 1 ) { findViewById<View>(R.id.sequencer_list8).findViewById<ImageView>(R.id.sequence3).setBackgroundColor(Color.parseColor("#dfd441")) }
        if ( h4[sequencerSize] == 1 ) { findViewById<View>(R.id.sequencer_list8).findViewById<ImageView>(R.id.sequence4).setBackgroundColor(Color.parseColor("#dfd441")) }
        if ( h5[sequencerSize] == 1 ) { findViewById<View>(R.id.sequencer_list8).findViewById<ImageView>(R.id.sequence5).setBackgroundColor(Color.parseColor("#dfd441")) }
        if ( h6[sequencerSize] == 1 ) { findViewById<View>(R.id.sequencer_list8).findViewById<ImageView>(R.id.sequence6).setBackgroundColor(Color.parseColor("#dfd441")) }
        if ( h7[sequencerSize] == 1 ) { findViewById<View>(R.id.sequencer_list8).findViewById<ImageView>(R.id.sequence7).setBackgroundColor(Color.parseColor("#dfd441")) }
        if ( h8[sequencerSize] == 1 ) { findViewById<View>(R.id.sequencer_list8).findViewById<ImageView>(R.id.sequence8).setBackgroundColor(Color.parseColor("#dfd441")) }
        if ( h9[sequencerSize] == 1 ) { findViewById<View>(R.id.sequencer_list8).findViewById<ImageView>(R.id.sequence9).setBackgroundColor(Color.parseColor("#dfd441")) }
        if ( h10[sequencerSize] == 1 ) { findViewById<View>(R.id.sequencer_list8).findViewById<ImageView>(R.id.sequence10).setBackgroundColor(Color.parseColor("#dfd441")) }
        if ( h11[sequencerSize] == 1 ) { findViewById<View>(R.id.sequencer_list8).findViewById<ImageView>(R.id.sequence11).setBackgroundColor(Color.parseColor("#dfd441")) }
        if ( h12[sequencerSize] == 1 ) { findViewById<View>(R.id.sequencer_list8).findViewById<ImageView>(R.id.sequence12).setBackgroundColor(Color.parseColor("#dfd441")) }
        if ( h13[sequencerSize] == 1 ) { findViewById<View>(R.id.sequencer_list8).findViewById<ImageView>(R.id.sequence13).setBackgroundColor(Color.parseColor("#dfd441")) }
        if ( h14[sequencerSize] == 1 ) { findViewById<View>(R.id.sequencer_list8).findViewById<ImageView>(R.id.sequence14).setBackgroundColor(Color.parseColor("#dfd441")) }
        if ( h15[sequencerSize] == 1 ) { findViewById<View>(R.id.sequencer_list8).findViewById<ImageView>(R.id.sequence15).setBackgroundColor(Color.parseColor("#dfd441")) }
        if ( h16[sequencerSize] == 1 ) { findViewById<View>(R.id.sequencer_list8).findViewById<ImageView>(R.id.sequence16).setBackgroundColor(Color.parseColor("#dfd441")) }
        if ( i1[sequencerSize] == 1 ) { findViewById<View>(R.id.sequencer_list9).findViewById<ImageView>(R.id.sequence).setBackgroundColor(Color.parseColor("#e9e8e7")) }
        if ( i2[sequencerSize] == 1 ) { findViewById<View>(R.id.sequencer_list9).findViewById<ImageView>(R.id.sequence2).setBackgroundColor(Color.parseColor("#e9e8e7")) }
        if ( i3[sequencerSize] == 1 ) { findViewById<View>(R.id.sequencer_list9).findViewById<ImageView>(R.id.sequence3).setBackgroundColor(Color.parseColor("#e9e8e7")) }
        if ( i4[sequencerSize] == 1 ) { findViewById<View>(R.id.sequencer_list9).findViewById<ImageView>(R.id.sequence4).setBackgroundColor(Color.parseColor("#e9e8e7")) }
        if ( i5[sequencerSize] == 1 ) { findViewById<View>(R.id.sequencer_list9).findViewById<ImageView>(R.id.sequence5).setBackgroundColor(Color.parseColor("#e9e8e7")) }
        if ( i6[sequencerSize] == 1 ) { findViewById<View>(R.id.sequencer_list9).findViewById<ImageView>(R.id.sequence6).setBackgroundColor(Color.parseColor("#e9e8e7")) }
        if ( i7[sequencerSize] == 1 ) { findViewById<View>(R.id.sequencer_list9).findViewById<ImageView>(R.id.sequence7).setBackgroundColor(Color.parseColor("#e9e8e7")) }
        if ( i8[sequencerSize] == 1 ) { findViewById<View>(R.id.sequencer_list9).findViewById<ImageView>(R.id.sequence8).setBackgroundColor(Color.parseColor("#e9e8e7")) }
        if ( i9[sequencerSize] == 1 ) { findViewById<View>(R.id.sequencer_list9).findViewById<ImageView>(R.id.sequence9).setBackgroundColor(Color.parseColor("#e9e8e7")) }
        if ( i10[sequencerSize] == 1 ) { findViewById<View>(R.id.sequencer_list9).findViewById<ImageView>(R.id.sequence10).setBackgroundColor(Color.parseColor("#e9e8e7")) }
        if ( i11[sequencerSize] == 1 ) { findViewById<View>(R.id.sequencer_list9).findViewById<ImageView>(R.id.sequence11).setBackgroundColor(Color.parseColor("#e9e8e7")) }
        if ( i12[sequencerSize] == 1 ) { findViewById<View>(R.id.sequencer_list9).findViewById<ImageView>(R.id.sequence12).setBackgroundColor(Color.parseColor("#e9e8e7")) }
        if ( i13[sequencerSize] == 1 ) { findViewById<View>(R.id.sequencer_list9).findViewById<ImageView>(R.id.sequence13).setBackgroundColor(Color.parseColor("#e9e8e7")) }
        if ( i14[sequencerSize] == 1 ) { findViewById<View>(R.id.sequencer_list9).findViewById<ImageView>(R.id.sequence14).setBackgroundColor(Color.parseColor("#e9e8e7")) }
        if ( i15[sequencerSize] == 1 ) { findViewById<View>(R.id.sequencer_list9).findViewById<ImageView>(R.id.sequence15).setBackgroundColor(Color.parseColor("#e9e8e7")) }
        if ( i16[sequencerSize] == 1 ) { findViewById<View>(R.id.sequencer_list9).findViewById<ImageView>(R.id.sequence16).setBackgroundColor(Color.parseColor("#e9e8e7")) }
        if ( j1[sequencerSize] == 1 ) { findViewById<View>(R.id.sequencer_list10).findViewById<ImageView>(R.id.sequence).setBackgroundColor(Color.parseColor("#ffffff")) }
        if ( j2[sequencerSize] == 1 ) { findViewById<View>(R.id.sequencer_list10).findViewById<ImageView>(R.id.sequence2).setBackgroundColor(Color.parseColor("#ffffff")) }
        if ( j3[sequencerSize] == 1 ) { findViewById<View>(R.id.sequencer_list10).findViewById<ImageView>(R.id.sequence3).setBackgroundColor(Color.parseColor("#ffffff")) }
        if ( j4[sequencerSize] == 1 ) { findViewById<View>(R.id.sequencer_list10).findViewById<ImageView>(R.id.sequence4).setBackgroundColor(Color.parseColor("#ffffff")) }
        if ( j5[sequencerSize] == 1 ) { findViewById<View>(R.id.sequencer_list10).findViewById<ImageView>(R.id.sequence5).setBackgroundColor(Color.parseColor("#ffffff")) }
        if ( j6[sequencerSize] == 1 ) { findViewById<View>(R.id.sequencer_list10).findViewById<ImageView>(R.id.sequence6).setBackgroundColor(Color.parseColor("#ffffff")) }
        if ( j7[sequencerSize] == 1 ) { findViewById<View>(R.id.sequencer_list10).findViewById<ImageView>(R.id.sequence7).setBackgroundColor(Color.parseColor("#ffffff")) }
        if ( j8[sequencerSize] == 1 ) { findViewById<View>(R.id.sequencer_list10).findViewById<ImageView>(R.id.sequence8).setBackgroundColor(Color.parseColor("#ffffff")) }
        if ( j9[sequencerSize] == 1 ) { findViewById<View>(R.id.sequencer_list10).findViewById<ImageView>(R.id.sequence9).setBackgroundColor(Color.parseColor("#ffffff")) }
        if ( j10[sequencerSize] == 1 ) { findViewById<View>(R.id.sequencer_list10).findViewById<ImageView>(R.id.sequence10).setBackgroundColor(Color.parseColor("#ffffff")) }
        if ( j11[sequencerSize] == 1 ) { findViewById<View>(R.id.sequencer_list10).findViewById<ImageView>(R.id.sequence11).setBackgroundColor(Color.parseColor("#ffffff")) }
        if ( j12[sequencerSize] == 1 ) { findViewById<View>(R.id.sequencer_list10).findViewById<ImageView>(R.id.sequence12).setBackgroundColor(Color.parseColor("#ffffff")) }
        if ( j13[sequencerSize] == 1 ) { findViewById<View>(R.id.sequencer_list10).findViewById<ImageView>(R.id.sequence13).setBackgroundColor(Color.parseColor("#ffffff")) }
        if ( j14[sequencerSize] == 1 ) { findViewById<View>(R.id.sequencer_list10).findViewById<ImageView>(R.id.sequence14).setBackgroundColor(Color.parseColor("#ffffff")) }
        if ( j15[sequencerSize] == 1 ) { findViewById<View>(R.id.sequencer_list10).findViewById<ImageView>(R.id.sequence15).setBackgroundColor(Color.parseColor("#ffffff")) }
        if ( j16[sequencerSize] == 1 ) { findViewById<View>(R.id.sequencer_list10).findViewById<ImageView>(R.id.sequence16).setBackgroundColor(Color.parseColor("#ffffff")) }
        if ( k1[sequencerSize] == 1 ) { findViewById<View>(R.id.sequencer_list11).findViewById<ImageView>(R.id.sequence).setBackgroundColor(Color.parseColor("#d03933")) }
        if ( k2[sequencerSize] == 1 ) { findViewById<View>(R.id.sequencer_list11).findViewById<ImageView>(R.id.sequence2).setBackgroundColor(Color.parseColor("#d03933")) }
        if ( k3[sequencerSize] == 1 ) { findViewById<View>(R.id.sequencer_list11).findViewById<ImageView>(R.id.sequence3).setBackgroundColor(Color.parseColor("#d03933")) }
        if ( k4[sequencerSize] == 1 ) { findViewById<View>(R.id.sequencer_list11).findViewById<ImageView>(R.id.sequence4).setBackgroundColor(Color.parseColor("#d03933")) }
        if ( k5[sequencerSize] == 1 ) { findViewById<View>(R.id.sequencer_list11).findViewById<ImageView>(R.id.sequence5).setBackgroundColor(Color.parseColor("#d03933")) }
        if ( k6[sequencerSize] == 1 ) { findViewById<View>(R.id.sequencer_list11).findViewById<ImageView>(R.id.sequence6).setBackgroundColor(Color.parseColor("#d03933")) }
        if ( k7[sequencerSize] == 1 ) { findViewById<View>(R.id.sequencer_list11).findViewById<ImageView>(R.id.sequence7).setBackgroundColor(Color.parseColor("#d03933")) }
        if ( k8[sequencerSize] == 1 ) { findViewById<View>(R.id.sequencer_list11).findViewById<ImageView>(R.id.sequence8).setBackgroundColor(Color.parseColor("#d03933")) }
        if ( k9[sequencerSize] == 1 ) { findViewById<View>(R.id.sequencer_list11).findViewById<ImageView>(R.id.sequence9).setBackgroundColor(Color.parseColor("#d03933")) }
        if ( k10[sequencerSize] == 1 ) { findViewById<View>(R.id.sequencer_list11).findViewById<ImageView>(R.id.sequence10).setBackgroundColor(Color.parseColor("#d03933")) }
        if ( k11[sequencerSize] == 1 ) { findViewById<View>(R.id.sequencer_list11).findViewById<ImageView>(R.id.sequence11).setBackgroundColor(Color.parseColor("#d03933")) }
        if ( k12[sequencerSize] == 1 ) { findViewById<View>(R.id.sequencer_list11).findViewById<ImageView>(R.id.sequence12).setBackgroundColor(Color.parseColor("#d03933")) }
        if ( k13[sequencerSize] == 1 ) { findViewById<View>(R.id.sequencer_list11).findViewById<ImageView>(R.id.sequence13).setBackgroundColor(Color.parseColor("#d03933")) }
        if ( k14[sequencerSize] == 1 ) { findViewById<View>(R.id.sequencer_list11).findViewById<ImageView>(R.id.sequence14).setBackgroundColor(Color.parseColor("#d03933")) }
        if ( k15[sequencerSize] == 1 ) { findViewById<View>(R.id.sequencer_list11).findViewById<ImageView>(R.id.sequence15).setBackgroundColor(Color.parseColor("#d03933")) }
        if ( k16[sequencerSize] == 1 ) { findViewById<View>(R.id.sequencer_list11).findViewById<ImageView>(R.id.sequence16).setBackgroundColor(Color.parseColor("#d03933")) }
        if ( l1[sequencerSize] == 1 ) { findViewById<View>(R.id.sequencer_list12).findViewById<ImageView>(R.id.sequence).setBackgroundColor(Color.parseColor("#e98e2f")) }
        if ( l2[sequencerSize] == 1 ) { findViewById<View>(R.id.sequencer_list12).findViewById<ImageView>(R.id.sequence2).setBackgroundColor(Color.parseColor("#e98e2f")) }
        if ( l3[sequencerSize] == 1 ) { findViewById<View>(R.id.sequencer_list12).findViewById<ImageView>(R.id.sequence3).setBackgroundColor(Color.parseColor("#e98e2f")) }
        if ( l4[sequencerSize] == 1 ) { findViewById<View>(R.id.sequencer_list12).findViewById<ImageView>(R.id.sequence4).setBackgroundColor(Color.parseColor("#e98e2f")) }
        if ( l5[sequencerSize] == 1 ) { findViewById<View>(R.id.sequencer_list12).findViewById<ImageView>(R.id.sequence5).setBackgroundColor(Color.parseColor("#e98e2f")) }
        if ( l6[sequencerSize] == 1 ) { findViewById<View>(R.id.sequencer_list12).findViewById<ImageView>(R.id.sequence6).setBackgroundColor(Color.parseColor("#e98e2f")) }
        if ( l7[sequencerSize] == 1 ) { findViewById<View>(R.id.sequencer_list12).findViewById<ImageView>(R.id.sequence7).setBackgroundColor(Color.parseColor("#e98e2f")) }
        if ( l8[sequencerSize] == 1 ) { findViewById<View>(R.id.sequencer_list12).findViewById<ImageView>(R.id.sequence8).setBackgroundColor(Color.parseColor("#e98e2f")) }
        if ( l9[sequencerSize] == 1 ) { findViewById<View>(R.id.sequencer_list12).findViewById<ImageView>(R.id.sequence9).setBackgroundColor(Color.parseColor("#e98e2f")) }
        if ( l10[sequencerSize] == 1 ) { findViewById<View>(R.id.sequencer_list12).findViewById<ImageView>(R.id.sequence10).setBackgroundColor(Color.parseColor("#e98e2f")) }
        if ( l11[sequencerSize] == 1 ) { findViewById<View>(R.id.sequencer_list12).findViewById<ImageView>(R.id.sequence11).setBackgroundColor(Color.parseColor("#e98e2f")) }
        if ( l12[sequencerSize] == 1 ) { findViewById<View>(R.id.sequencer_list12).findViewById<ImageView>(R.id.sequence12).setBackgroundColor(Color.parseColor("#e98e2f")) }
        if ( l13[sequencerSize] == 1 ) { findViewById<View>(R.id.sequencer_list12).findViewById<ImageView>(R.id.sequence13).setBackgroundColor(Color.parseColor("#e98e2f")) }
        if ( l14[sequencerSize] == 1 ) { findViewById<View>(R.id.sequencer_list12).findViewById<ImageView>(R.id.sequence14).setBackgroundColor(Color.parseColor("#e98e2f")) }
        if ( l15[sequencerSize] == 1 ) { findViewById<View>(R.id.sequencer_list12).findViewById<ImageView>(R.id.sequence15).setBackgroundColor(Color.parseColor("#e98e2f")) }
        if ( l16[sequencerSize] == 1 ) { findViewById<View>(R.id.sequencer_list12).findViewById<ImageView>(R.id.sequence16).setBackgroundColor(Color.parseColor("#e98e2f")) }
        if ( m1[sequencerSize] == 1 ) { findViewById<View>(R.id.sequencer_list13).findViewById<ImageView>(R.id.sequence).setBackgroundColor(Color.parseColor("#dfd441")) }
        if ( m2[sequencerSize] == 1 ) { findViewById<View>(R.id.sequencer_list13).findViewById<ImageView>(R.id.sequence2).setBackgroundColor(Color.parseColor("#dfd441")) }
        if ( m3[sequencerSize] == 1 ) { findViewById<View>(R.id.sequencer_list13).findViewById<ImageView>(R.id.sequence3).setBackgroundColor(Color.parseColor("#dfd441")) }
        if ( m4[sequencerSize] == 1 ) { findViewById<View>(R.id.sequencer_list13).findViewById<ImageView>(R.id.sequence4).setBackgroundColor(Color.parseColor("#dfd441")) }
        if ( m5[sequencerSize] == 1 ) { findViewById<View>(R.id.sequencer_list13).findViewById<ImageView>(R.id.sequence5).setBackgroundColor(Color.parseColor("#dfd441")) }
        if ( m6[sequencerSize] == 1 ) { findViewById<View>(R.id.sequencer_list13).findViewById<ImageView>(R.id.sequence6).setBackgroundColor(Color.parseColor("#dfd441")) }
        if ( m7[sequencerSize] == 1 ) { findViewById<View>(R.id.sequencer_list13).findViewById<ImageView>(R.id.sequence7).setBackgroundColor(Color.parseColor("#dfd441")) }
        if ( m8[sequencerSize] == 1 ) { findViewById<View>(R.id.sequencer_list13).findViewById<ImageView>(R.id.sequence8).setBackgroundColor(Color.parseColor("#dfd441")) }
        if ( m9[sequencerSize] == 1 ) { findViewById<View>(R.id.sequencer_list13).findViewById<ImageView>(R.id.sequence9).setBackgroundColor(Color.parseColor("#dfd441")) }
        if ( m10[sequencerSize] == 1 ) { findViewById<View>(R.id.sequencer_list13).findViewById<ImageView>(R.id.sequence10).setBackgroundColor(Color.parseColor("#dfd441")) }
        if ( m11[sequencerSize] == 1 ) { findViewById<View>(R.id.sequencer_list13).findViewById<ImageView>(R.id.sequence11).setBackgroundColor(Color.parseColor("#dfd441")) }
        if ( m12[sequencerSize] == 1 ) { findViewById<View>(R.id.sequencer_list13).findViewById<ImageView>(R.id.sequence12).setBackgroundColor(Color.parseColor("#dfd441")) }
        if ( m13[sequencerSize] == 1 ) { findViewById<View>(R.id.sequencer_list13).findViewById<ImageView>(R.id.sequence13).setBackgroundColor(Color.parseColor("#dfd441")) }
        if ( m14[sequencerSize] == 1 ) { findViewById<View>(R.id.sequencer_list13).findViewById<ImageView>(R.id.sequence14).setBackgroundColor(Color.parseColor("#dfd441")) }
        if ( m15[sequencerSize] == 1 ) { findViewById<View>(R.id.sequencer_list13).findViewById<ImageView>(R.id.sequence15).setBackgroundColor(Color.parseColor("#dfd441")) }
        if ( m16[sequencerSize] == 1 ) { findViewById<View>(R.id.sequencer_list13).findViewById<ImageView>(R.id.sequence16).setBackgroundColor(Color.parseColor("#dfd441")) }
        if ( n1[sequencerSize] == 1 ) { findViewById<View>(R.id.sequencer_list14).findViewById<ImageView>(R.id.sequence).setBackgroundColor(Color.parseColor("#e9e8e7")) }
        if ( n2[sequencerSize] == 1 ) { findViewById<View>(R.id.sequencer_list14).findViewById<ImageView>(R.id.sequence2).setBackgroundColor(Color.parseColor("#e9e8e7")) }
        if ( n3[sequencerSize] == 1 ) { findViewById<View>(R.id.sequencer_list14).findViewById<ImageView>(R.id.sequence3).setBackgroundColor(Color.parseColor("#e9e8e7")) }
        if ( n4[sequencerSize] == 1 ) { findViewById<View>(R.id.sequencer_list14).findViewById<ImageView>(R.id.sequence4).setBackgroundColor(Color.parseColor("#e9e8e7")) }
        if ( n5[sequencerSize] == 1 ) { findViewById<View>(R.id.sequencer_list14).findViewById<ImageView>(R.id.sequence5).setBackgroundColor(Color.parseColor("#e9e8e7")) }
        if ( n6[sequencerSize] == 1 ) { findViewById<View>(R.id.sequencer_list14).findViewById<ImageView>(R.id.sequence6).setBackgroundColor(Color.parseColor("#e9e8e7")) }
        if ( n7[sequencerSize] == 1 ) { findViewById<View>(R.id.sequencer_list14).findViewById<ImageView>(R.id.sequence7).setBackgroundColor(Color.parseColor("#e9e8e7")) }
        if ( n8[sequencerSize] == 1 ) { findViewById<View>(R.id.sequencer_list14).findViewById<ImageView>(R.id.sequence8).setBackgroundColor(Color.parseColor("#e9e8e7")) }
        if ( n9[sequencerSize] == 1 ) { findViewById<View>(R.id.sequencer_list14).findViewById<ImageView>(R.id.sequence9).setBackgroundColor(Color.parseColor("#e9e8e7")) }
        if ( n10[sequencerSize] == 1 ) { findViewById<View>(R.id.sequencer_list14).findViewById<ImageView>(R.id.sequence10).setBackgroundColor(Color.parseColor("#e9e8e7")) }
        if ( n11[sequencerSize] == 1 ) { findViewById<View>(R.id.sequencer_list14).findViewById<ImageView>(R.id.sequence11).setBackgroundColor(Color.parseColor("#e9e8e7")) }
        if ( n12[sequencerSize] == 1 ) { findViewById<View>(R.id.sequencer_list14).findViewById<ImageView>(R.id.sequence12).setBackgroundColor(Color.parseColor("#e9e8e7")) }
        if ( n13[sequencerSize] == 1 ) { findViewById<View>(R.id.sequencer_list14).findViewById<ImageView>(R.id.sequence13).setBackgroundColor(Color.parseColor("#e9e8e7")) }
        if ( n14[sequencerSize] == 1 ) { findViewById<View>(R.id.sequencer_list14).findViewById<ImageView>(R.id.sequence14).setBackgroundColor(Color.parseColor("#e9e8e7")) }
        if ( n15[sequencerSize] == 1 ) { findViewById<View>(R.id.sequencer_list14).findViewById<ImageView>(R.id.sequence15).setBackgroundColor(Color.parseColor("#e9e8e7")) }
        if ( n16[sequencerSize] == 1 ) { findViewById<View>(R.id.sequencer_list14).findViewById<ImageView>(R.id.sequence16).setBackgroundColor(Color.parseColor("#e9e8e7")) }
        if ( o1[sequencerSize] == 1 ) { findViewById<View>(R.id.sequencer_list15).findViewById<ImageView>(R.id.sequence).setBackgroundColor(Color.parseColor("#ffffff")) }
        if ( o2[sequencerSize] == 1 ) { findViewById<View>(R.id.sequencer_list15).findViewById<ImageView>(R.id.sequence2).setBackgroundColor(Color.parseColor("#ffffff")) }
        if ( o3[sequencerSize] == 1 ) { findViewById<View>(R.id.sequencer_list15).findViewById<ImageView>(R.id.sequence3).setBackgroundColor(Color.parseColor("#ffffff")) }
        if ( o4[sequencerSize] == 1 ) { findViewById<View>(R.id.sequencer_list15).findViewById<ImageView>(R.id.sequence4).setBackgroundColor(Color.parseColor("#ffffff")) }
        if ( o5[sequencerSize] == 1 ) { findViewById<View>(R.id.sequencer_list15).findViewById<ImageView>(R.id.sequence5).setBackgroundColor(Color.parseColor("#ffffff")) }
        if ( o6[sequencerSize] == 1 ) { findViewById<View>(R.id.sequencer_list15).findViewById<ImageView>(R.id.sequence6).setBackgroundColor(Color.parseColor("#ffffff")) }
        if ( o7[sequencerSize] == 1 ) { findViewById<View>(R.id.sequencer_list15).findViewById<ImageView>(R.id.sequence7).setBackgroundColor(Color.parseColor("#ffffff")) }
        if ( o8[sequencerSize] == 1 ) { findViewById<View>(R.id.sequencer_list15).findViewById<ImageView>(R.id.sequence8).setBackgroundColor(Color.parseColor("#ffffff")) }
        if ( o9[sequencerSize] == 1 ) { findViewById<View>(R.id.sequencer_list15).findViewById<ImageView>(R.id.sequence9).setBackgroundColor(Color.parseColor("#ffffff")) }
        if ( o10[sequencerSize] == 1 ) { findViewById<View>(R.id.sequencer_list15).findViewById<ImageView>(R.id.sequence10).setBackgroundColor(Color.parseColor("#ffffff")) }
        if ( o11[sequencerSize] == 1 ) { findViewById<View>(R.id.sequencer_list15).findViewById<ImageView>(R.id.sequence11).setBackgroundColor(Color.parseColor("#ffffff")) }
        if ( o12[sequencerSize] == 1 ) { findViewById<View>(R.id.sequencer_list15).findViewById<ImageView>(R.id.sequence12).setBackgroundColor(Color.parseColor("#ffffff")) }
        if ( o13[sequencerSize] == 1 ) { findViewById<View>(R.id.sequencer_list15).findViewById<ImageView>(R.id.sequence13).setBackgroundColor(Color.parseColor("#ffffff")) }
        if ( o14[sequencerSize] == 1 ) { findViewById<View>(R.id.sequencer_list15).findViewById<ImageView>(R.id.sequence14).setBackgroundColor(Color.parseColor("#ffffff")) }
        if ( o15[sequencerSize] == 1 ) { findViewById<View>(R.id.sequencer_list15).findViewById<ImageView>(R.id.sequence15).setBackgroundColor(Color.parseColor("#ffffff")) }
        if ( o16[sequencerSize] == 1 ) { findViewById<View>(R.id.sequencer_list15).findViewById<ImageView>(R.id.sequence16).setBackgroundColor(Color.parseColor("#ffffff")) }
        }

    @SuppressLint("SetTextI18n")
    private fun soundRandom() {
        padText1 = (aSoundList+bSoundList+cSoundList+dSoundList+eSoundList+fSoundList+gSoundList+hSoundList+iSoundList+jSoundList+kSoundList+lSoundList).random().name.replace(".ogg","")
        padText2 = (aSoundList+bSoundList+cSoundList+dSoundList+eSoundList+fSoundList+gSoundList+hSoundList+iSoundList+jSoundList+kSoundList+lSoundList).random().name.replace(".ogg","")
        padText3 = (aSoundList+bSoundList+cSoundList+dSoundList+eSoundList+fSoundList+gSoundList+hSoundList+iSoundList+jSoundList+kSoundList+lSoundList).random().name.replace(".ogg","")
        padText4 = (aSoundList+bSoundList+cSoundList+dSoundList+eSoundList+fSoundList+gSoundList+hSoundList+iSoundList+jSoundList+kSoundList+lSoundList).random().name.replace(".ogg","")
        padText5 = (aSoundList+bSoundList+cSoundList+dSoundList+eSoundList+fSoundList+gSoundList+hSoundList+iSoundList+jSoundList+kSoundList+lSoundList).random().name.replace(".ogg","")
        padText6 = (aSoundList+bSoundList+cSoundList+dSoundList+eSoundList+fSoundList+gSoundList+hSoundList+iSoundList+jSoundList+kSoundList+lSoundList).random().name.replace(".ogg","")
        padText7 = (aSoundList+bSoundList+cSoundList+dSoundList+eSoundList+fSoundList+gSoundList+hSoundList+iSoundList+jSoundList+kSoundList+lSoundList).random().name.replace(".ogg","")
        padText8 = (aSoundList+bSoundList+cSoundList+dSoundList+eSoundList+fSoundList+gSoundList+hSoundList+iSoundList+jSoundList+kSoundList+lSoundList).random().name.replace(".ogg","")
        padText9 = (aSoundList+bSoundList+cSoundList+dSoundList+eSoundList+fSoundList+gSoundList+hSoundList+iSoundList+jSoundList+kSoundList+lSoundList).random().name.replace(".ogg","")
        padText10 = (aSoundList+bSoundList+cSoundList+dSoundList+eSoundList+fSoundList+gSoundList+hSoundList+iSoundList+jSoundList+kSoundList+lSoundList).random().name.replace(".ogg","")
        padText11 = (aSoundList+bSoundList+cSoundList+dSoundList+eSoundList+fSoundList+gSoundList+hSoundList+iSoundList+jSoundList+kSoundList+lSoundList).random().name.replace(".ogg","")
        padText12 = (aSoundList+bSoundList+cSoundList+dSoundList+eSoundList+fSoundList+gSoundList+hSoundList+iSoundList+jSoundList+kSoundList+lSoundList).random().name.replace(".ogg","")
        padText13 = (aSoundList+bSoundList+cSoundList+dSoundList+eSoundList+fSoundList+gSoundList+hSoundList+iSoundList+jSoundList+kSoundList+lSoundList).random().name.replace(".ogg","")
        padText14 = (aSoundList+bSoundList+cSoundList+dSoundList+eSoundList+fSoundList+gSoundList+hSoundList+iSoundList+jSoundList+kSoundList+lSoundList).random().name.replace(".ogg","")
        padText15 = (aSoundList+bSoundList+cSoundList+dSoundList+eSoundList+fSoundList+gSoundList+hSoundList+iSoundList+jSoundList+kSoundList+lSoundList).random().name.replace(".ogg","")
        binding.includeMainView.textView.text = padText1.replace("tr_8", "TR-8").replace("tr_909", "TR-909").replace("_"," ").uppercase()
        binding.includeMainView2.textView.text = padText2.replace("tr_8", "TR-8").replace("tr_909", "TR-909").replace("_"," ").uppercase()
        binding.includeMainView3.textView.text = padText3.replace("tr_8", "TR-8").replace("tr_909", "TR-909").replace("_"," ").uppercase()
        binding.includeMainView4.textView.text = padText4.replace("tr_8", "TR-8").replace("tr_909", "TR-909").replace("_"," ").uppercase()
        binding.includeMainView5.textView.text = padText5.replace("tr_8", "TR-8").replace("tr_909", "TR-909").replace("_"," ").uppercase()
        binding.includeMainView6.textView.text = padText6.replace("tr_8", "TR-8").replace("tr_909", "TR-909").replace("_"," ").uppercase()
        binding.includeMainView7.textView.text = padText7.replace("tr_8", "TR-8").replace("tr_909", "TR-909").replace("_"," ").uppercase()
        binding.includeMainView8.textView.text = padText8.replace("tr_8", "TR-8").replace("tr_909", "TR-909").replace("_"," ").uppercase()
        binding.includeMainView9.textView.text = padText9.replace("tr_8", "TR-8").replace("tr_909", "TR-909").replace("_"," ").uppercase()
        binding.includeMainView10.textView.text = padText10.replace("tr_8", "TR-8").replace("tr_909", "TR-909").replace("_"," ").uppercase()
        binding.includeMainView11.textView.text = padText11.replace("tr_8", "TR-8").replace("tr_909", "TR-909").replace("_"," ").uppercase()
        binding.includeMainView12.textView.text = padText12.replace("tr_8", "TR-8").replace("tr_909", "TR-909").replace("_"," ").uppercase()
        binding.includeMainView13.textView.text = padText13.replace("tr_8", "TR-8").replace("tr_909", "TR-909").replace("_"," ").uppercase()
        binding.includeMainView14.textView.text = padText14.replace("tr_8", "TR-8").replace("tr_909", "TR-909").replace("_"," ").uppercase()
        binding.includeMainView15.textView.text = padText15.replace("tr_8", "TR-8").replace("tr_909", "TR-909").replace("_"," ").uppercase()
        findViewById<View>(R.id.tuning_sequencer).findViewById<TextView>(R.id.change_sound).text = padText1.replace("tr_8", "TR-8").replace("tr_909", "TR-909").replace("_"," ").uppercase()
        findViewById<View>(R.id.tuning_sequencer2).findViewById<TextView>(R.id.change_sound).text = padText4.replace("tr_8", "TR-8").replace("tr_909", "TR-909").replace("_"," ").uppercase()
        findViewById<View>(R.id.tuning_sequencer3).findViewById<TextView>(R.id.change_sound).text = padText7.replace("tr_8", "TR-8").replace("tr_909", "TR-909").replace("_"," ").uppercase()
        findViewById<View>(R.id.tuning_sequencer4).findViewById<TextView>(R.id.change_sound).text = padText10.replace("tr_8", "TR-8").replace("tr_909", "TR-909").replace("_"," ").uppercase()
        findViewById<View>(R.id.tuning_sequencer5).findViewById<TextView>(R.id.change_sound).text = padText13.replace("tr_8", "TR-8").replace("tr_909", "TR-909").replace("_"," ").uppercase()
        findViewById<View>(R.id.tuning_sequencer6).findViewById<TextView>(R.id.change_sound).text = padText2.replace("tr_8", "TR-8").replace("tr_909", "TR-909").replace("_"," ").uppercase()
        findViewById<View>(R.id.tuning_sequencer7).findViewById<TextView>(R.id.change_sound).text = padText5.replace("tr_8", "TR-8").replace("tr_909", "TR-909").replace("_"," ").uppercase()
        findViewById<View>(R.id.tuning_sequencer8).findViewById<TextView>(R.id.change_sound).text = padText8.replace("tr_8", "TR-8").replace("tr_909", "TR-909").replace("_"," ").uppercase()
        findViewById<View>(R.id.tuning_sequencer9).findViewById<TextView>(R.id.change_sound).text = padText11.replace("tr_8", "TR-8").replace("tr_909", "TR-909").replace("_"," ").uppercase()
        findViewById<View>(R.id.tuning_sequencer10).findViewById<TextView>(R.id.change_sound).text = padText14.replace("tr_8", "TR-8").replace("tr_909", "TR-909").replace("_"," ").uppercase()
        findViewById<View>(R.id.tuning_sequencer11).findViewById<TextView>(R.id.change_sound).text = padText3.replace("tr_8", "TR-8").replace("tr_909", "TR-909").replace("_"," ").uppercase()
        findViewById<View>(R.id.tuning_sequencer12).findViewById<TextView>(R.id.change_sound).text = padText6.replace("tr_8", "TR-8").replace("tr_909", "TR-909").replace("_"," ").uppercase()
        findViewById<View>(R.id.tuning_sequencer13).findViewById<TextView>(R.id.change_sound).text = padText9.replace("tr_8", "TR-8").replace("tr_909", "TR-909").replace("_"," ").uppercase()
        findViewById<View>(R.id.tuning_sequencer14).findViewById<TextView>(R.id.change_sound).text = padText12.replace("tr_8", "TR-8").replace("tr_909", "TR-909").replace("_"," ").uppercase()
        findViewById<View>(R.id.tuning_sequencer15).findViewById<TextView>(R.id.change_sound).text = padText15.replace("tr_8", "TR-8").replace("tr_909", "TR-909").replace("_"," ").uppercase()
        findViewById<View>(R.id.include_view).findViewById<TextView>(R.id.padText).text = soundPoolVolume.toString().replace("f", "") + "            " + soundPoolTempo.toString().replace("f", "") + "\n" + padText1.replace("tr_8", "TR-8").replace("tr_909", "TR-909").replace("_"," ").uppercase()
        findViewById<View>(R.id.include_view2).findViewById<TextView>(R.id.padText).text = soundPoolVolume2.toString().replace("f", "") + "            " + soundPoolTempo2.toString().replace("f", "") + "\n" + padText2.replace("tr_8", "TR-8").replace("tr_909", "TR-909").replace("_"," ").uppercase()
        findViewById<View>(R.id.include_view3).findViewById<TextView>(R.id.padText).text = soundPoolVolume3.toString().replace("f", "") + "            " + soundPoolTempo3.toString().replace("f", "") + "\n" + padText3.replace("tr_8", "TR-8").replace("tr_909", "TR-909").replace("_"," ").uppercase()
        findViewById<View>(R.id.include_view4).findViewById<TextView>(R.id.padText).text = soundPoolVolume4.toString().replace("f", "") + "            " + soundPoolTempo4.toString().replace("f", "") + "\n" + padText4.replace("tr_8", "TR-8").replace("tr_909", "TR-909").replace("_"," ").uppercase()
        findViewById<View>(R.id.include_view5).findViewById<TextView>(R.id.padText).text = soundPoolVolume5.toString().replace("f", "") + "            " + soundPoolTempo5.toString().replace("f", "") + "\n" + padText5.replace("tr_8", "TR-8").replace("tr_909", "TR-909").replace("_"," ").uppercase()
        findViewById<View>(R.id.include_view6).findViewById<TextView>(R.id.padText).text = soundPoolVolume6.toString().replace("f", "") + "            " + soundPoolTempo6.toString().replace("f", "") + "\n" + padText6.replace("tr_8", "TR-8").replace("tr_909", "TR-909").replace("_"," ").uppercase()
        findViewById<View>(R.id.include_view7).findViewById<TextView>(R.id.padText).text = soundPoolVolume7.toString().replace("f", "") + "            " + soundPoolTempo7.toString().replace("f", "") + "\n" + padText7.replace("tr_8", "TR-8").replace("tr_909", "TR-909").replace("_"," ").uppercase()
        findViewById<View>(R.id.include_view8).findViewById<TextView>(R.id.padText).text = soundPoolVolume8.toString().replace("f", "") + "            " + soundPoolTempo8.toString().replace("f", "") + "\n" + padText8.replace("tr_8", "TR-8").replace("tr_909", "TR-909").replace("_"," ").uppercase()
        findViewById<View>(R.id.include_view9).findViewById<TextView>(R.id.padText).text = soundPoolVolume9.toString().replace("f", "") + "            " + soundPoolTempo9.toString().replace("f", "") + "\n" + padText9.replace("tr_8", "TR-8").replace("tr_909", "TR-909").replace("_"," ").uppercase()
        findViewById<View>(R.id.include_view10).findViewById<TextView>(R.id.padText).text = soundPoolVolume10.toString().replace("f", "") + "            " + soundPoolTempo10.toString().replace("f", "") + "\n" + padText10.replace("tr_8", "TR-8").replace("tr_909", "TR-909").replace("_"," ").uppercase()
        findViewById<View>(R.id.include_view11).findViewById<TextView>(R.id.padText).text = soundPoolVolume11.toString().replace("f", "") + "            " + soundPoolTempo11.toString().replace("f", "") + "\n" + padText11.replace("tr_8", "TR-8").replace("tr_909", "TR-909").replace("_"," ").uppercase()
        findViewById<View>(R.id.include_view12).findViewById<TextView>(R.id.padText).text = soundPoolVolume12.toString().replace("f", "") + "            " + soundPoolTempo12.toString().replace("f", "") + "\n" + padText12.replace("tr_8", "TR-8").replace("tr_909", "TR-909").replace("_"," ").uppercase()
        findViewById<View>(R.id.include_view13).findViewById<TextView>(R.id.padText).text = soundPoolVolume13.toString().replace("f", "") + "            " + soundPoolTempo13.toString().replace("f", "") + "\n" + padText13.replace("tr_8", "TR-8").replace("tr_909", "TR-909").replace("_"," ").uppercase()
        findViewById<View>(R.id.include_view14).findViewById<TextView>(R.id.padText).text = soundPoolVolume14.toString().replace("f", "") + "            " + soundPoolTempo14.toString().replace("f", "") + "\n" + padText14.replace("tr_8", "TR-8").replace("tr_909", "TR-909").replace("_"," ").uppercase()
        findViewById<View>(R.id.include_view15).findViewById<TextView>(R.id.padText).text = soundPoolVolume15.toString().replace("f", "") + "            " + soundPoolTempo15.toString().replace("f", "") + "\n" + padText15.replace("tr_8", "TR-8").replace("tr_909", "TR-909").replace("_"," ").uppercase()
        sound1 = soundPool.load(assets.openFd("$padText1.ogg"), 1)
        sound2 = soundPool.load(assets.openFd("$padText2.ogg"), 1)
        sound3 = soundPool.load(assets.openFd("$padText3.ogg"), 1)
        sound4 = soundPool.load(assets.openFd("$padText4.ogg"), 1)
        sound5 = soundPool.load(assets.openFd("$padText5.ogg"), 1)
        sound6 = soundPool.load(assets.openFd("$padText6.ogg"), 1)
        sound7 = soundPool.load(assets.openFd("$padText7.ogg"), 1)
        sound8 = soundPool.load(assets.openFd("$padText8.ogg"), 1)
        sound9 = soundPool.load(assets.openFd("$padText9.ogg"), 1)
        sound10 = soundPool.load(assets.openFd("$padText10.ogg"), 1)
        sound11 = soundPool.load(assets.openFd("$padText11.ogg"), 1)
        sound12 = soundPool.load(assets.openFd("$padText12.ogg"), 1)
        sound13 = soundPool.load(assets.openFd("$padText13.ogg"), 1)
        sound14 = soundPool.load(assets.openFd("$padText14.ogg"), 1)
        sound15 = soundPool.load(assets.openFd("$padText15.ogg"), 1)
    }

    @SuppressLint("SetTextI18n", "CutPasteId")
    private fun createNew() {
        sequencerStop()
        resetSequence()
        padSequence = 1
        sequencerMaxSize = 0
        sequencerSize = 0
        sequencerBpm = 120
        trackCount = 10
        findViewById<View>(R.id.bpm).findViewById<EditText>(R.id.bpmCount).setText("120", TextView.BufferType.NORMAL)
        findViewById<View>(R.id.line_measure).findViewById<TextView>(R.id.measure).text = (sequencerSize + 1).toString()
        findViewById<View>(R.id.line_measure).findViewById<TextView>(R.id.measure_max).text = (sequencerMaxSize + 1).toString()
        findViewById<View>(R.id.line_measure).findViewById<TextView>(R.id.track_count).text = trackCount.toString()
    }

    @SuppressLint("SetTextI18n", "CutPasteId")
    private fun hiphopSequence() {
        sequencerStop()
        resetSequence()
        padSequence = 1
        sequencerMaxSize = 0
        sequencerSize = 0
        sequencerBpm = 80
        trackCount = 3
        findViewById<View>(R.id.bpm).findViewById<EditText>(R.id.bpmCount).setText("80", TextView.BufferType.NORMAL)
        findViewById<View>(R.id.line_measure).findViewById<TextView>(R.id.measure).text = (sequencerSize + 1).toString()
        findViewById<View>(R.id.line_measure).findViewById<TextView>(R.id.measure_max).text = (sequencerMaxSize + 1).toString()
        findViewById<View>(R.id.line_measure).findViewById<TextView>(R.id.track_count).text = trackCount.toString()
        a1[0] = 1
        a5[0] = 1
        a9[0] = 1
        a13[0] = 1
        b5[0] = 1
        b13[0] = 1
        c1[0] = 1
        c3[0] = 1
        c11[0] = 1
    }

    @SuppressLint("SetTextI18n", "CutPasteId")
    private fun reggaetonSequence() {
        sequencerStop()
        resetSequence()
        padSequence = 1
        sequencerMaxSize = 1
        sequencerSize = 0
        sequencerBpm = 90
        trackCount = 3
        findViewById<View>(R.id.bpm).findViewById<EditText>(R.id.bpmCount).setText("90", TextView.BufferType.NORMAL)
        findViewById<View>(R.id.line_measure).findViewById<TextView>(R.id.measure).text = (sequencerSize + 1).toString()
        findViewById<View>(R.id.line_measure).findViewById<TextView>(R.id.measure_max).text = (sequencerMaxSize + 1).toString()
        findViewById<View>(R.id.line_measure).findViewById<TextView>(R.id.track_count).text = trackCount.toString()
        a1[0] = 1
        a5[0] = 1
        a9[0] = 1
        a13[0] = 1
        b4[0] = 1
        b7[0] = 1
        b12[0] = 1
        b15[0] = 1
        c4[0] = 1
        c7[0] = 1
        c12[0] = 1
        c15[0] = 1

        a1[1] = 1
        a5[1] = 1
        a9[1] = 1
        a13[1] = 1
        b4[1] = 1
        b7[1] = 1
        b10[1] = 1
        b12[1] = 1
        b15[1] = 1
        c4[1] = 1
        c7[1] = 1
        c10[1] = 1
        c12[1] = 1
        c15[1] = 1
    }

    @SuppressLint("SetTextI18n", "CutPasteId")
    private fun electronicaSequence() {
        sequencerStop()
        resetSequence()
        padSequence = 1
        sequencerMaxSize = 0
        sequencerSize = 0
        sequencerBpm = 90
        trackCount = 4
        findViewById<View>(R.id.bpm).findViewById<EditText>(R.id.bpmCount).setText("90", TextView.BufferType.NORMAL)
        findViewById<View>(R.id.line_measure).findViewById<TextView>(R.id.measure).text = (sequencerSize + 1).toString()
        findViewById<View>(R.id.line_measure).findViewById<TextView>(R.id.measure_max).text = (sequencerMaxSize + 1).toString()
        findViewById<View>(R.id.line_measure).findViewById<TextView>(R.id.track_count).text = trackCount.toString()
        a1[0] = 1
        a2[0] = 1
        a3[0] = 1
        a4[0] = 1
        a5[0] = 1
        a6[0] = 1
        a7[0] = 1
        a8[0] = 1
        a9[0] = 1
        a10[0] = 1
        a11[0] = 1
        a12[0] = 1
        a13[0] = 1
        a14[0] = 1
        a15[0] = 1
        a16[0] = 1
        b13[0] = 1
        c1[0] = 1
        c7[0] = 1
        c12[0] = 1
        d4[0] = 1
    }

    @SuppressLint("SetTextI18n", "CutPasteId")
    private fun dubstepSequence() {
        sequencerStop()
        resetSequence()
        padSequence = 1
        sequencerMaxSize = 0
        sequencerSize = 0
        sequencerBpm = 140
        trackCount = 4
        findViewById<View>(R.id.bpm).findViewById<EditText>(R.id.bpmCount).setText("140", TextView.BufferType.NORMAL)
        findViewById<View>(R.id.line_measure).findViewById<TextView>(R.id.measure).text = (sequencerSize + 1).toString()
        findViewById<View>(R.id.line_measure).findViewById<TextView>(R.id.measure_max).text = (sequencerMaxSize + 1).toString()
        findViewById<View>(R.id.line_measure).findViewById<TextView>(R.id.track_count).text = trackCount.toString()
        a1[0] = 1
        a3[0] = 1
        a4[0] = 1
        a7[0] = 1
        a11[0] = 1
        a14[0] = 1
        b9[0] = 1
        b16[0] = 1
        c1[0] = 1
        c4[0] = 1
        c7[0] = 1
        c15[0] = 1
        d1[0] = 1
    }

    @SuppressLint("SetTextI18n", "CutPasteId")
    private fun houseSequence() {
        sequencerStop()
        resetSequence()
        padSequence = 1
        sequencerMaxSize = 0
        sequencerSize = 0
        sequencerBpm = 130
        trackCount = 5
        findViewById<View>(R.id.bpm).findViewById<EditText>(R.id.bpmCount).setText("130", TextView.BufferType.NORMAL)
        findViewById<View>(R.id.line_measure).findViewById<TextView>(R.id.measure).text = (sequencerSize + 1).toString()
        findViewById<View>(R.id.line_measure).findViewById<TextView>(R.id.measure_max).text = (sequencerMaxSize + 1).toString()
        findViewById<View>(R.id.line_measure).findViewById<TextView>(R.id.track_count).text = trackCount.toString()
        a1[0] = 1
        a5[0] = 1
        a9[0] = 1
        a13[0] = 1
        b3[0] = 1
        b7[0] = 1
        b11[0] = 1
        b15[0] = 1
        c4[0] = 1
        c7[0] = 1
        c10[0] = 1
        c15[0] = 1
        d1[0] = 1
        d5[0] = 1
        d9[0] = 1
        d13[0] = 1
        e5[0] = 1
    }

    @SuppressLint("SetTextI18n", "CutPasteId")
    private fun discoSequence() {
        sequencerStop()
        resetSequence()
        padSequence = 1
        sequencerMaxSize = 0
        sequencerSize = 0
        sequencerBpm = 110
        trackCount = 5
        findViewById<View>(R.id.bpm).findViewById<EditText>(R.id.bpmCount).setText("110", TextView.BufferType.NORMAL)
        findViewById<View>(R.id.line_measure).findViewById<TextView>(R.id.measure).text = (sequencerSize + 1).toString()
        findViewById<View>(R.id.line_measure).findViewById<TextView>(R.id.measure_max).text = (sequencerMaxSize + 1).toString()
        findViewById<View>(R.id.line_measure).findViewById<TextView>(R.id.track_count).text = trackCount.toString()
        a1[0] = 1
        a5[0] = 1
        a7[0] = 1
        a9[0] = 1
        a13[0] = 1
        b3[0] = 1
        b11[0] = 1
        b15[0] = 1
        c5[0] = 1
        c8[0] = 1
        c16[0] = 1
        d1[0] = 1
        d7[0] = 1
        d13[0] = 1
        e5[0] = 1
        e11[0] = 1
        e13[0] = 1
    }

    @SuppressLint("SetTextI18n", "CutPasteId")
    private fun technoSequence() {
        sequencerStop()
        resetSequence()
        padSequence = 1
        sequencerMaxSize = 0
        sequencerSize = 0
        sequencerBpm = 110
        trackCount = 5
        findViewById<View>(R.id.bpm).findViewById<EditText>(R.id.bpmCount).setText("110", TextView.BufferType.NORMAL)
        findViewById<View>(R.id.line_measure).findViewById<TextView>(R.id.measure).text = (sequencerSize + 1).toString()
        findViewById<View>(R.id.line_measure).findViewById<TextView>(R.id.measure_max).text = (sequencerMaxSize + 1).toString()
        findViewById<View>(R.id.line_measure).findViewById<TextView>(R.id.track_count).text = trackCount.toString()
        a1[0] = 1
        a2[0] = 1
        a5[0] = 1
        a6[0] = 1
        a9[0] = 1
        a10[0] = 1
        a13[0] = 1
        a14[0] = 1
        b3[0] = 1
        b7[0] = 1
        b11[0] = 1
        b15[0] = 1
        c5[0] = 1
        c13[0] = 1
        c16[0] = 1
        d1[0] = 1
        d5[0] = 1
        d9[0] = 1
        d13[0] = 1
        e5[0] = 1
    }

    @SuppressLint("SetTextI18n", "CutPasteId")
    private fun eurobeatSequence() {
        sequencerStop()
        resetSequence()
        padSequence = 1
        sequencerMaxSize = 0
        sequencerSize = 0
        sequencerBpm = 130
        trackCount = 4
        findViewById<View>(R.id.bpm).findViewById<EditText>(R.id.bpmCount).setText("130", TextView.BufferType.NORMAL)
        findViewById<View>(R.id.line_measure).findViewById<TextView>(R.id.measure).text = (sequencerSize + 1).toString()
        findViewById<View>(R.id.line_measure).findViewById<TextView>(R.id.measure_max).text = (sequencerMaxSize + 1).toString()
        findViewById<View>(R.id.line_measure).findViewById<TextView>(R.id.track_count).text = trackCount.toString()
        a1[0] = 1
        a3[0] = 1
        a5[0] = 1
        a7[0] = 1
        a9[0] = 1
        a11[0] = 1
        a13[0] = 1
        a15[0] = 1
        b2[0] = 1
        b3[0] = 1
        b7[0] = 1
        b8[0] = 1
        b10[0] = 1
        b11[0] = 1
        b14[0] = 1
        b15[0] = 1
        b16[0] = 1
        c5[0] = 1
        c13[0] = 1
        d1[0] = 1
        d5[0] = 1
        d9[0] = 1
        d13[0] = 1
    }

    @SuppressLint("SetTextI18n", "CutPasteId")
    private fun twostepSequence() {
        sequencerStop()
        resetSequence()
        padSequence = 1
        sequencerMaxSize = 0
        sequencerSize = 0
        sequencerBpm = 100
        trackCount = 5
        findViewById<View>(R.id.bpm).findViewById<EditText>(R.id.bpmCount).setText("100", TextView.BufferType.NORMAL)
        findViewById<View>(R.id.line_measure).findViewById<TextView>(R.id.measure).text = (sequencerSize + 1).toString()
        findViewById<View>(R.id.line_measure).findViewById<TextView>(R.id.measure_max).text = (sequencerMaxSize + 1).toString()
        findViewById<View>(R.id.line_measure).findViewById<TextView>(R.id.track_count).text = trackCount.toString()
        a1[0] = 1
        a3[0] = 1
        a5[0] = 1
        a7[0] = 1
        a9[0] = 1
        a10[0] = 1
        a11[0] = 1
        a13[0] = 1
        b15[0] = 1
        c5[0] = 1
        c13[0] = 1
        d1[0] = 1
        d7[0] = 1
        d11[0] = 1
        d16[0] = 1
        e1[0] = 1
        e3[0] = 1
        e5[0] = 1
        e6[0] = 1
        e7[0] = 1
        e9[0] = 1
        e11[0] = 1
        e13[0] = 1
        e14[0] = 1
        e15[0] = 1
    }

    @SuppressLint("SetTextI18n", "CutPasteId")
    private fun drumnbassSequence() {
        sequencerStop()
        resetSequence()
        padSequence = 1
        sequencerMaxSize = 0
        sequencerSize = 0
        sequencerBpm = 170
        trackCount = 4
        findViewById<View>(R.id.bpm).findViewById<EditText>(R.id.bpmCount).setText("170", TextView.BufferType.NORMAL)
        findViewById<View>(R.id.line_measure).findViewById<TextView>(R.id.measure).text = (sequencerSize + 1).toString()
        findViewById<View>(R.id.line_measure).findViewById<TextView>(R.id.measure_max).text = (sequencerMaxSize + 1).toString()
        findViewById<View>(R.id.line_measure).findViewById<TextView>(R.id.track_count).text = trackCount.toString()
        a1[0] = 1
        a3[0] = 1
        a6[0] = 1
        a8[0] = 1
        a15[0] = 1
        b5[0] = 1
        b9[0] = 1
        b11[0] = 1
        b12[0] = 1
        b15[0] = 1
        c7[0] = 1
        c13[0] = 1
        c15[0] = 1
        c16[0] = 1
        d1[0] = 1
        d4[0] = 1
        d5[0] = 1
        d8[0] = 1
        d10[0] = 1
        d11[0] = 1
        d14[0] = 1
    }

    @SuppressLint("SetTextI18n", "CutPasteId")
    private fun beat1Sequence() {
        sequencerStop()
        resetSequence()
        padSequence = 1
        sequencerMaxSize = 1
        sequencerSize = 0
        sequencerBpm = 120
        trackCount = 2
        findViewById<View>(R.id.bpm).findViewById<EditText>(R.id.bpmCount).setText("120", TextView.BufferType.NORMAL)
        findViewById<View>(R.id.line_measure).findViewById<TextView>(R.id.measure).text = (sequencerSize + 1).toString()
        findViewById<View>(R.id.line_measure).findViewById<TextView>(R.id.measure_max).text = (sequencerMaxSize + 1).toString()
        findViewById<View>(R.id.line_measure).findViewById<TextView>(R.id.track_count).text = trackCount.toString()
        a1[0] = 1
        a9[0] = 1
        b5[0] = 1
        b13[0] = 1

        a1[1] = 1
        a7[1] = 1
        a9[1] = 1
        b5[1] = 1
        b13[1] = 1
    }

    @SuppressLint("SetTextI18n", "CutPasteId")
    private fun beat2Sequence() {
        sequencerStop()
        resetSequence()
        padSequence = 1
        sequencerMaxSize = 1
        sequencerSize = 0
        sequencerBpm = 120
        trackCount = 3
        findViewById<View>(R.id.bpm).findViewById<EditText>(R.id.bpmCount).setText("120", TextView.BufferType.NORMAL)
        findViewById<View>(R.id.line_measure).findViewById<TextView>(R.id.measure).text = (sequencerSize + 1).toString()
        findViewById<View>(R.id.line_measure).findViewById<TextView>(R.id.measure_max).text = (sequencerMaxSize + 1).toString()
        findViewById<View>(R.id.line_measure).findViewById<TextView>(R.id.track_count).text = trackCount.toString()
        a1[0] = 1
        a3[0] = 1
        a5[0] = 1
        a8[0] = 1
        a10[0] = 1
        a12[0] = 1
        a13[0] = 1
        b5[0] = 1
        b6[0] = 1
        b8[0] = 1
        b10[0] = 1
        b12[0] = 1
        b13[0] = 1
        b15[0] = 1
        c5[0] = 1
        c8[0] = 1
        c10[0] = 1
        c13[0] = 1

        a1[1] = 1
        a3[1] = 1
        a5[1] = 1
        a8[1] = 1
        a10[1] = 1
        a12[1] = 1
        a13[1] = 1
        b5[1] = 1
        b6[1] = 1
        b8[1] = 1
        b10[1] = 1
        b12[1] = 1
        b13[1] = 1
        b15[1] = 1
        c5[1] = 1
        c6[1] = 1
        c8[1] = 1
        c10[1] = 1
        c12[1] = 1
        c13[1] = 1
    }

    @SuppressLint("SetTextI18n", "CutPasteId")
    private fun beat3Sequence() {
        sequencerStop()
        resetSequence()
        padSequence = 1
        sequencerMaxSize = 1
        sequencerSize = 0
        sequencerBpm = 100
        trackCount = 5
        findViewById<View>(R.id.bpm).findViewById<EditText>(R.id.bpmCount).setText("100", TextView.BufferType.NORMAL)
        findViewById<View>(R.id.line_measure).findViewById<TextView>(R.id.measure).text = (sequencerSize + 1).toString()
        findViewById<View>(R.id.line_measure).findViewById<TextView>(R.id.measure_max).text = (sequencerMaxSize + 1).toString()
        findViewById<View>(R.id.line_measure).findViewById<TextView>(R.id.track_count).text = trackCount.toString()
        a1[0] = 1
        a3[0] = 1
        a7[0] = 1
        a11[0] = 1
        a14[0] = 1
        b5[0] = 1
        b8[0] = 1
        b10[0] = 1
        b13[0] = 1
        d1[0] = 1
        d5[0] = 1
        d9[0] = 1
        d13[0] = 1
        e14[0] = 1

        a1[1] = 1
        a3[1] = 1
        a7[1] = 1
        a11[1] = 1
        a14[1] = 1
        b5[1] = 1
        b8[1] = 1
        b10[1] = 1
        b12[1] = 1
        b13[1] = 1
        b15[1] = 1
        c4[1] = 1
        c9[1] = 1
        c13[1] = 1
        d1[1] = 1
        d5[1] = 1
        d9[1] = 1
        d11[1] = 1
        d13[1] = 1
        e6[1] = 1
        e10[1] = 1
        e14[1] = 1
    }

    @SuppressLint("SetTextI18n", "CutPasteId")
    private fun beat5Sequence() {
        sequencerStop()
        resetSequence()
        padSequence = 1
        sequencerMaxSize = 0
        sequencerSize = 0
        sequencerBpm = 110
        trackCount = 3
        findViewById<View>(R.id.bpm).findViewById<EditText>(R.id.bpmCount).setText("110", TextView.BufferType.NORMAL)
        findViewById<View>(R.id.line_measure).findViewById<TextView>(R.id.measure).text = (sequencerSize + 1).toString()
        findViewById<View>(R.id.line_measure).findViewById<TextView>(R.id.measure_max).text = (sequencerMaxSize + 1).toString()
        findViewById<View>(R.id.line_measure).findViewById<TextView>(R.id.track_count).text = trackCount.toString()
        a1[0] = 1
        a3[0] = 1
        a5[0] = 1
        a7[0] = 1
        a9[0] = 1
        a11[0] = 1
        a13[0] = 1
        a15[0] = 1
        b5[0] = 1
        b8[0] = 1
        b10[0] = 1
        b13[0] = 1
        c1[0] = 1
        c11[0] = 1
    }

    @SuppressLint("SetTextI18n", "CutPasteId")
    private fun beat6Sequence() {
        sequencerStop()
        resetSequence()
        padSequence = 1
        sequencerMaxSize = 0
        sequencerSize = 0
        sequencerBpm = 100
        trackCount = 3
        findViewById<View>(R.id.bpm).findViewById<EditText>(R.id.bpmCount).setText("100", TextView.BufferType.NORMAL)
        findViewById<View>(R.id.line_measure).findViewById<TextView>(R.id.measure).text = (sequencerSize + 1).toString()
        findViewById<View>(R.id.line_measure).findViewById<TextView>(R.id.measure_max).text = (sequencerMaxSize + 1).toString()
        findViewById<View>(R.id.line_measure).findViewById<TextView>(R.id.track_count).text = trackCount.toString()
        a1[0] = 1
        a4[0] = 1
        a11[0] = 1
        a16[0] = 1
        b5[0] = 1
        b10[0] = 1
        b13[0] = 1
        c11[0] = 1
        c13[0] = 1
    }

    @SuppressLint("SetTextI18n", "CutPasteId")
    private fun beat7Sequence() {
        sequencerStop()
        resetSequence()
        padSequence = 1
        sequencerMaxSize = 0
        sequencerSize = 0
        sequencerBpm = 90
        trackCount = 3
        findViewById<View>(R.id.bpm).findViewById<EditText>(R.id.bpmCount).setText("90", TextView.BufferType.NORMAL)
        findViewById<View>(R.id.line_measure).findViewById<TextView>(R.id.measure).text = (sequencerSize + 1).toString()
        findViewById<View>(R.id.line_measure).findViewById<TextView>(R.id.measure_max).text = (sequencerMaxSize + 1).toString()
        findViewById<View>(R.id.line_measure).findViewById<TextView>(R.id.track_count).text = trackCount.toString()
        a1[0] = 1
        a3[0] = 1
        a5[0] = 1
        a7[0] = 1
        a9[0] = 1
        a11[0] = 1
        a13[0] = 1
        a15[0] = 1
        b5[0] = 1
        b13[0] = 1
        c1[0] = 1
        c3[0] = 1
        c11[0] = 1
        c12[0] = 1
        c16[0] = 1
    }

    @SuppressLint("SetTextI18n", "CutPasteId")
    private fun beat8Sequence() {
        sequencerStop()
        resetSequence()
        padSequence = 1
        sequencerMaxSize = 0
        sequencerSize = 0
        sequencerBpm = 100
        trackCount = 4
        findViewById<View>(R.id.bpm).findViewById<EditText>(R.id.bpmCount).setText("100", TextView.BufferType.NORMAL)
        findViewById<View>(R.id.line_measure).findViewById<TextView>(R.id.measure).text = (sequencerSize + 1).toString()
        findViewById<View>(R.id.line_measure).findViewById<TextView>(R.id.measure_max).text = (sequencerMaxSize + 1).toString()
        findViewById<View>(R.id.line_measure).findViewById<TextView>(R.id.track_count).text = trackCount.toString()
        a1[0] = 1
        a3[0] = 1
        a5[0] = 1
        a7[0] = 1
        a9[0] = 1
        a11[0] = 1
        a13[0] = 1
        a15[0] = 1
        b5[0] = 1
        b13[0] = 1
        c1[0] = 1
        c3[0] = 1
        c4[0] = 1
        c11[0] = 1
        c16[0] = 1
        d11[0] = 1
    }

    @SuppressLint("SetTextI18n", "CutPasteId")
    private fun beat9Sequence() {
        sequencerStop()
        resetSequence()
        padSequence = 1
        sequencerMaxSize = 1
        sequencerSize = 0
        sequencerBpm = 120
        trackCount = 2
        findViewById<View>(R.id.bpm).findViewById<EditText>(R.id.bpmCount).setText("120", TextView.BufferType.NORMAL)
        findViewById<View>(R.id.line_measure).findViewById<TextView>(R.id.measure).text = (sequencerSize + 1).toString()
        findViewById<View>(R.id.line_measure).findViewById<TextView>(R.id.measure_max).text = (sequencerMaxSize + 1).toString()
        findViewById<View>(R.id.line_measure).findViewById<TextView>(R.id.track_count).text = trackCount.toString()
        a1[0] = 1
        a7[0] = 1
        a11[0] = 1
        b5[0] = 1
        b13[0] = 1

        a1[1] = 1
        a7[1] = 1
        a9[1] = 1
        a11[1] = 1
        b5[1] = 1
        b8[1] = 1
        b10[1] = 1
        b13[1] = 1
    }

    @SuppressLint("ClickableViewAccessibility", "SetTextI18n", "Range", "CutPasteId", "ShowToast",
        "UseCompatLoadingForDrawables")
    override fun onCreate(savedInstanceState: Bundle?) {
        super.onCreate(savedInstanceState)
        binding = ActivityMainBinding.inflate(layoutInflater)
            .apply { setContentView(this.root) }

        setSupportActionBar(findViewById(R.id.toolbar_main))

        FirebaseMessaging.getInstance().token.addOnCompleteListener(OnCompleteListener { task ->
            if (!task.isSuccessful) {
                Log.w("MainActivity", "Fetching FCM registration token failed", task.exception)
                return@OnCompleteListener
            }

            val token = task.result

            Log.d("MainActivity", "Current token: $token")
        })

        stickyImmersiveMode()
        initAdMob()
        loadAdMob()
        loadRewardedAd()

        Realm.init(this)
        val realmConfig = RealmConfiguration.Builder()
            .deleteRealmIfMigrationNeeded()
            .allowWritesOnUiThread(true)
            .build()
        mRealm = Realm.getInstance(realmConfig)


        binding.includeMainView.textView.text = padText1.replace("tr_8", "TR-8").replace("tr_909", "TR-909").replace("_"," ").uppercase()
        binding.includeMainView2.textView.text = padText2.replace("tr_8", "TR-8").replace("tr_909", "TR-909").replace("_"," ").uppercase()
        binding.includeMainView3.textView.text = padText3.replace("tr_8", "TR-8").replace("tr_909", "TR-909").replace("_"," ").uppercase()
        binding.includeMainView4.textView.text = padText4.replace("tr_8", "TR-8").replace("tr_909", "TR-909").replace("_"," ").uppercase()
        binding.includeMainView5.textView.text = padText5.replace("tr_8", "TR-8").replace("tr_909", "TR-909").replace("_"," ").uppercase()
        binding.includeMainView6.textView.text = padText6.replace("tr_8", "TR-8").replace("tr_909", "TR-909").replace("_"," ").uppercase()
        binding.includeMainView7.textView.text = padText7.replace("tr_8", "TR-8").replace("tr_909", "TR-909").replace("_"," ").uppercase()
        binding.includeMainView8.textView.text = padText8.replace("tr_8", "TR-8").replace("tr_909", "TR-909").replace("_"," ").uppercase()
        binding.includeMainView9.textView.text = padText9.replace("tr_8", "TR-8").replace("tr_909", "TR-909").replace("_"," ").uppercase()
        binding.includeMainView10.textView.text = padText10.replace("tr_8", "TR-8").replace("tr_909", "TR-909").replace("_"," ").uppercase()
        binding.includeMainView11.textView.text = padText11.replace("tr_8", "TR-8").replace("tr_909", "TR-909").replace("_"," ").uppercase()
        binding.includeMainView12.textView.text = padText12.replace("tr_8", "TR-8").replace("tr_909", "TR-909").replace("_"," ").uppercase()
        binding.includeMainView13.textView.text = padText13.replace("tr_8", "TR-8").replace("tr_909", "TR-909").replace("_"," ").uppercase()
        binding.includeMainView14.textView.text = padText14.replace("tr_8", "TR-8").replace("tr_909", "TR-909").replace("_"," ").uppercase()
        binding.includeMainView15.textView.text = padText15.replace("tr_8", "TR-8").replace("tr_909", "TR-909").replace("_"," ").uppercase()
        findViewById<View>(R.id.tuning_sequencer).findViewById<TextView>(R.id.change_sound).text = padText1.replace("tr_8", "TR-8").replace("tr_909", "TR-909").replace("_"," ").uppercase()
        findViewById<View>(R.id.tuning_sequencer2).findViewById<TextView>(R.id.change_sound).text = padText4.replace("tr_8", "TR-8").replace("tr_909", "TR-909").replace("_"," ").uppercase()
        findViewById<View>(R.id.tuning_sequencer3).findViewById<TextView>(R.id.change_sound).text = padText7.replace("tr_8", "TR-8").replace("tr_909", "TR-909").replace("_"," ").uppercase()
        findViewById<View>(R.id.tuning_sequencer4).findViewById<TextView>(R.id.change_sound).text = padText10.replace("tr_8", "TR-8").replace("tr_909", "TR-909").replace("_"," ").uppercase()
        findViewById<View>(R.id.tuning_sequencer5).findViewById<TextView>(R.id.change_sound).text = padText13.replace("tr_8", "TR-8").replace("tr_909", "TR-909").replace("_"," ").uppercase()
        findViewById<View>(R.id.tuning_sequencer6).findViewById<TextView>(R.id.change_sound).text = padText2.replace("tr_8", "TR-8").replace("tr_909", "TR-909").replace("_"," ").uppercase()
        findViewById<View>(R.id.tuning_sequencer7).findViewById<TextView>(R.id.change_sound).text = padText5.replace("tr_8", "TR-8").replace("tr_909", "TR-909").replace("_"," ").uppercase()
        findViewById<View>(R.id.tuning_sequencer8).findViewById<TextView>(R.id.change_sound).text = padText8.replace("tr_8", "TR-8").replace("tr_909", "TR-909").replace("_"," ").uppercase()
        findViewById<View>(R.id.tuning_sequencer9).findViewById<TextView>(R.id.change_sound).text = padText11.replace("tr_8", "TR-8").replace("tr_909", "TR-909").replace("_"," ").uppercase()
        findViewById<View>(R.id.tuning_sequencer10).findViewById<TextView>(R.id.change_sound).text = padText14.replace("tr_8", "TR-8").replace("tr_909", "TR-909").replace("_"," ").uppercase()
        findViewById<View>(R.id.tuning_sequencer11).findViewById<TextView>(R.id.change_sound).text = padText3.replace("tr_8", "TR-8").replace("tr_909", "TR-909").replace("_"," ").uppercase()
        findViewById<View>(R.id.tuning_sequencer12).findViewById<TextView>(R.id.change_sound).text = padText6.replace("tr_8", "TR-8").replace("tr_909", "TR-909").replace("_"," ").uppercase()
        findViewById<View>(R.id.tuning_sequencer13).findViewById<TextView>(R.id.change_sound).text = padText9.replace("tr_8", "TR-8").replace("tr_909", "TR-909").replace("_"," ").uppercase()
        findViewById<View>(R.id.tuning_sequencer14).findViewById<TextView>(R.id.change_sound).text = padText12.replace("tr_8", "TR-8").replace("tr_909", "TR-909").replace("_"," ").uppercase()
        findViewById<View>(R.id.tuning_sequencer15).findViewById<TextView>(R.id.change_sound).text = padText15.replace("tr_8", "TR-8").replace("tr_909", "TR-909").replace("_"," ").uppercase()
        findViewById<View>(R.id.include_view).findViewById<TextView>(R.id.padText).text = soundPoolVolume.toString().replace("f", "") + "            " + soundPoolTempo.toString().replace("f", "") + "\n" + padText1.replace("tr_8", "TR-8").replace("tr_909", "TR-909").replace("_"," ").uppercase()
        findViewById<View>(R.id.include_view2).findViewById<TextView>(R.id.padText).text = soundPoolVolume2.toString().replace("f", "") + "            " + soundPoolTempo2.toString().replace("f", "") + "\n" + padText2.replace("tr_8", "TR-8").replace("tr_909", "TR-909").replace("_"," ").uppercase()
        findViewById<View>(R.id.include_view3).findViewById<TextView>(R.id.padText).text = soundPoolVolume3.toString().replace("f", "") + "            " + soundPoolTempo3.toString().replace("f", "") + "\n" + padText3.replace("tr_8", "TR-8").replace("tr_909", "TR-909").replace("_"," ").uppercase()
        findViewById<View>(R.id.include_view4).findViewById<TextView>(R.id.padText).text = soundPoolVolume4.toString().replace("f", "") + "            " + soundPoolTempo4.toString().replace("f", "") + "\n" + padText4.replace("tr_8", "TR-8").replace("tr_909", "TR-909").replace("_"," ").uppercase()
        findViewById<View>(R.id.include_view5).findViewById<TextView>(R.id.padText).text = soundPoolVolume5.toString().replace("f", "") + "            " + soundPoolTempo5.toString().replace("f", "") + "\n" + padText5.replace("tr_8", "TR-8").replace("tr_909", "TR-909").replace("_"," ").uppercase()
        findViewById<View>(R.id.include_view6).findViewById<TextView>(R.id.padText).text = soundPoolVolume6.toString().replace("f", "") + "            " + soundPoolTempo6.toString().replace("f", "") + "\n" + padText6.replace("tr_8", "TR-8").replace("tr_909", "TR-909").replace("_"," ").uppercase()
        findViewById<View>(R.id.include_view7).findViewById<TextView>(R.id.padText).text = soundPoolVolume7.toString().replace("f", "") + "            " + soundPoolTempo7.toString().replace("f", "") + "\n" + padText7.replace("tr_8", "TR-8").replace("tr_909", "TR-909").replace("_"," ").uppercase()
        findViewById<View>(R.id.include_view8).findViewById<TextView>(R.id.padText).text = soundPoolVolume8.toString().replace("f", "") + "            " + soundPoolTempo8.toString().replace("f", "") + "\n" + padText8.replace("tr_8", "TR-8").replace("tr_909", "TR-909").replace("_"," ").uppercase()
        findViewById<View>(R.id.include_view9).findViewById<TextView>(R.id.padText).text = soundPoolVolume9.toString().replace("f", "") + "            " + soundPoolTempo9.toString().replace("f", "") + "\n" + padText9.replace("tr_8", "TR-8").replace("tr_909", "TR-909").replace("_"," ").uppercase()
        findViewById<View>(R.id.include_view10).findViewById<TextView>(R.id.padText).text = soundPoolVolume10.toString().replace("f", "") + "            " + soundPoolTempo10.toString().replace("f", "") + "\n" + padText10.replace("tr_8", "TR-8").replace("tr_909", "TR-909").replace("_"," ").uppercase()
        findViewById<View>(R.id.include_view11).findViewById<TextView>(R.id.padText).text = soundPoolVolume11.toString().replace("f", "") + "            " + soundPoolTempo11.toString().replace("f", "") + "\n" + padText11.replace("tr_8", "TR-8").replace("tr_909", "TR-909").replace("_"," ").uppercase()
        findViewById<View>(R.id.include_view12).findViewById<TextView>(R.id.padText).text = soundPoolVolume12.toString().replace("f", "") + "            " + soundPoolTempo12.toString().replace("f", "") + "\n" + padText12.replace("tr_8", "TR-8").replace("tr_909", "TR-909").replace("_"," ").uppercase()
        findViewById<View>(R.id.include_view13).findViewById<TextView>(R.id.padText).text = soundPoolVolume13.toString().replace("f", "") + "            " + soundPoolTempo13.toString().replace("f", "") + "\n" + padText13.replace("tr_8", "TR-8").replace("tr_909", "TR-909").replace("_"," ").uppercase()
        findViewById<View>(R.id.include_view14).findViewById<TextView>(R.id.padText).text = soundPoolVolume14.toString().replace("f", "") + "            " + soundPoolTempo14.toString().replace("f", "") + "\n" + padText14.replace("tr_8", "TR-8").replace("tr_909", "TR-909").replace("_"," ").uppercase()
        findViewById<View>(R.id.include_view15).findViewById<TextView>(R.id.padText).text = soundPoolVolume15.toString().replace("f", "") + "            " + soundPoolTempo15.toString().replace("f", "") + "\n" + padText15.replace("tr_8", "TR-8").replace("tr_909", "TR-909").replace("_"," ").uppercase()

        findViewById<View>(R.id.include_main_view).findViewById<ImageView>(R.id.background_view).setImageResource(R.drawable.my_ripple3)
        findViewById<View>(R.id.include_main_view2).findViewById<ImageView>(R.id.background_view).setImageResource(R.drawable.my_ripple3)
        findViewById<View>(R.id.include_main_view3).findViewById<ImageView>(R.id.background_view).setImageResource(R.drawable.my_ripple3)
        findViewById<View>(R.id.include_main_view4).findViewById<ImageView>(R.id.background_view).setImageResource(R.drawable.my_ripple4)
        findViewById<View>(R.id.include_main_view5).findViewById<ImageView>(R.id.background_view).setImageResource(R.drawable.my_ripple4)
        findViewById<View>(R.id.include_main_view6).findViewById<ImageView>(R.id.background_view).setImageResource(R.drawable.my_ripple4)
        findViewById<View>(R.id.include_main_view7).findViewById<ImageView>(R.id.background_view).setImageResource(R.drawable.my_ripple5)
        findViewById<View>(R.id.include_main_view8).findViewById<ImageView>(R.id.background_view).setImageResource(R.drawable.my_ripple5)
        findViewById<View>(R.id.include_main_view9).findViewById<ImageView>(R.id.background_view).setImageResource(R.drawable.my_ripple5)
        findViewById<View>(R.id.include_main_view10).findViewById<ImageView>(R.id.background_view).setImageResource(R.drawable.my_ripple6)
        findViewById<View>(R.id.include_main_view11).findViewById<ImageView>(R.id.background_view).setImageResource(R.drawable.my_ripple6)
        findViewById<View>(R.id.include_main_view12).findViewById<ImageView>(R.id.background_view).setImageResource(R.drawable.my_ripple6)
        findViewById<View>(R.id.include_main_view13).findViewById<ImageView>(R.id.background_view).setImageResource(R.drawable.my_ripple7)
        findViewById<View>(R.id.include_main_view14).findViewById<ImageView>(R.id.background_view).setImageResource(R.drawable.my_ripple7)
        findViewById<View>(R.id.include_main_view15).findViewById<ImageView>(R.id.background_view).setImageResource(R.drawable.my_ripple7)

        if (colorCheck == 1) {
            if (resources.configuration.orientation == Configuration.ORIENTATION_PORTRAIT) {
                findViewById<View>(R.id.include_main_view).findViewById<ImageView>(R.id.imageView).setImageResource(R.drawable.my_ripple3)
                findViewById<View>(R.id.include_main_view2).findViewById<ImageView>(R.id.imageView).setImageResource(R.drawable.my_ripple3)
                findViewById<View>(R.id.include_main_view3).findViewById<ImageView>(R.id.imageView).setImageResource(R.drawable.my_ripple3)
                findViewById<View>(R.id.include_main_view4).findViewById<ImageView>(R.id.imageView).setImageResource(R.drawable.my_ripple4)
                findViewById<View>(R.id.include_main_view5).findViewById<ImageView>(R.id.imageView).setImageResource(R.drawable.my_ripple4)
                findViewById<View>(R.id.include_main_view6).findViewById<ImageView>(R.id.imageView).setImageResource(R.drawable.my_ripple4)
                findViewById<View>(R.id.include_main_view7).findViewById<ImageView>(R.id.imageView).setImageResource(R.drawable.my_ripple5)
                findViewById<View>(R.id.include_main_view8).findViewById<ImageView>(R.id.imageView).setImageResource(R.drawable.my_ripple5)
                findViewById<View>(R.id.include_main_view9).findViewById<ImageView>(R.id.imageView).setImageResource(R.drawable.my_ripple5)
                findViewById<View>(R.id.include_main_view10).findViewById<ImageView>(R.id.imageView).setImageResource(R.drawable.my_ripple6)
                findViewById<View>(R.id.include_main_view11).findViewById<ImageView>(R.id.imageView).setImageResource(R.drawable.my_ripple6)
                findViewById<View>(R.id.include_main_view12).findViewById<ImageView>(R.id.imageView).setImageResource(R.drawable.my_ripple6)
                findViewById<View>(R.id.include_main_view13).findViewById<ImageView>(R.id.imageView).setImageResource(R.drawable.my_ripple7)
                findViewById<View>(R.id.include_main_view14).findViewById<ImageView>(R.id.imageView).setImageResource(R.drawable.my_ripple7)
                findViewById<View>(R.id.include_main_view15).findViewById<ImageView>(R.id.imageView).setImageResource(R.drawable.my_ripple7)
            } else if (resources.configuration.orientation == Configuration.ORIENTATION_LANDSCAPE) {
                findViewById<View>(R.id.include_main_view).findViewById<ImageView>(R.id.imageView).setImageResource(R.drawable.my_ripple3)
                findViewById<View>(R.id.include_main_view2).findViewById<ImageView>(R.id.imageView).setImageResource(R.drawable.my_ripple3)
                findViewById<View>(R.id.include_main_view3).findViewById<ImageView>(R.id.imageView).setImageResource(R.drawable.my_ripple3)
                findViewById<View>(R.id.include_main_view4).findViewById<ImageView>(R.id.imageView).setImageResource(R.drawable.my_ripple4)
                findViewById<View>(R.id.include_main_view5).findViewById<ImageView>(R.id.imageView).setImageResource(R.drawable.my_ripple4)
                findViewById<View>(R.id.include_main_view6).findViewById<ImageView>(R.id.imageView).setImageResource(R.drawable.my_ripple4)
                findViewById<View>(R.id.include_main_view7).findViewById<ImageView>(R.id.imageView).setImageResource(R.drawable.my_ripple5)
                findViewById<View>(R.id.include_main_view8).findViewById<ImageView>(R.id.imageView).setImageResource(R.drawable.my_ripple5)
                findViewById<View>(R.id.include_main_view9).findViewById<ImageView>(R.id.imageView).setImageResource(R.drawable.my_ripple5)
                findViewById<View>(R.id.include_main_view10).findViewById<ImageView>(R.id.imageView).setImageResource(R.drawable.my_ripple6)
                findViewById<View>(R.id.include_main_view11).findViewById<ImageView>(R.id.imageView).setImageResource(R.drawable.my_ripple6)
                findViewById<View>(R.id.include_main_view12).findViewById<ImageView>(R.id.imageView).setImageResource(R.drawable.my_ripple6)
                findViewById<View>(R.id.include_main_view13).findViewById<ImageView>(R.id.imageView).setImageResource(R.drawable.my_ripple7)
                findViewById<View>(R.id.include_main_view14).findViewById<ImageView>(R.id.imageView).setImageResource(R.drawable.my_ripple7)
                findViewById<View>(R.id.include_main_view15).findViewById<ImageView>(R.id.imageView).setImageResource(R.drawable.my_ripple7)
            }
        } else {
            if (resources.configuration.orientation == Configuration.ORIENTATION_PORTRAIT) {
                findViewById<View>(R.id.include_main_view).findViewById<ImageView>(R.id.imageView).setImageResource(R.drawable.my_ripple)
                findViewById<View>(R.id.include_main_view2).findViewById<ImageView>(R.id.imageView).setImageResource(R.drawable.my_ripple)
                findViewById<View>(R.id.include_main_view3).findViewById<ImageView>(R.id.imageView).setImageResource(R.drawable.my_ripple)
                findViewById<View>(R.id.include_main_view4).findViewById<ImageView>(R.id.imageView).setImageResource(R.drawable.my_ripple)
                findViewById<View>(R.id.include_main_view5).findViewById<ImageView>(R.id.imageView).setImageResource(R.drawable.my_ripple)
                findViewById<View>(R.id.include_main_view6).findViewById<ImageView>(R.id.imageView).setImageResource(R.drawable.my_ripple)
                findViewById<View>(R.id.include_main_view7).findViewById<ImageView>(R.id.imageView).setImageResource(R.drawable.my_ripple)
                findViewById<View>(R.id.include_main_view8).findViewById<ImageView>(R.id.imageView).setImageResource(R.drawable.my_ripple)
                findViewById<View>(R.id.include_main_view9).findViewById<ImageView>(R.id.imageView).setImageResource(R.drawable.my_ripple)
                findViewById<View>(R.id.include_main_view10).findViewById<ImageView>(R.id.imageView).setImageResource(R.drawable.my_ripple)
                findViewById<View>(R.id.include_main_view11).findViewById<ImageView>(R.id.imageView).setImageResource(R.drawable.my_ripple)
                findViewById<View>(R.id.include_main_view12).findViewById<ImageView>(R.id.imageView).setImageResource(R.drawable.my_ripple)
                findViewById<View>(R.id.include_main_view13).findViewById<ImageView>(R.id.imageView).setImageResource(R.drawable.my_ripple)
                findViewById<View>(R.id.include_main_view14).findViewById<ImageView>(R.id.imageView).setImageResource(R.drawable.my_ripple)
                findViewById<View>(R.id.include_main_view15).findViewById<ImageView>(R.id.imageView).setImageResource(R.drawable.my_ripple)
            } else if (resources.configuration.orientation == Configuration.ORIENTATION_LANDSCAPE) {
                findViewById<View>(R.id.include_main_view).findViewById<ImageView>(R.id.imageView).setImageResource(R.drawable.my_ripple)
                findViewById<View>(R.id.include_main_view2).findViewById<ImageView>(R.id.imageView).setImageResource(R.drawable.my_ripple)
                findViewById<View>(R.id.include_main_view3).findViewById<ImageView>(R.id.imageView).setImageResource(R.drawable.my_ripple)
                findViewById<View>(R.id.include_main_view4).findViewById<ImageView>(R.id.imageView).setImageResource(R.drawable.my_ripple)
                findViewById<View>(R.id.include_main_view5).findViewById<ImageView>(R.id.imageView).setImageResource(R.drawable.my_ripple)
                findViewById<View>(R.id.include_main_view6).findViewById<ImageView>(R.id.imageView).setImageResource(R.drawable.my_ripple)
                findViewById<View>(R.id.include_main_view7).findViewById<ImageView>(R.id.imageView).setImageResource(R.drawable.my_ripple)
                findViewById<View>(R.id.include_main_view8).findViewById<ImageView>(R.id.imageView).setImageResource(R.drawable.my_ripple)
                findViewById<View>(R.id.include_main_view9).findViewById<ImageView>(R.id.imageView).setImageResource(R.drawable.my_ripple)
                findViewById<View>(R.id.include_main_view10).findViewById<ImageView>(R.id.imageView).setImageResource(R.drawable.my_ripple)
                findViewById<View>(R.id.include_main_view11).findViewById<ImageView>(R.id.imageView).setImageResource(R.drawable.my_ripple)
                findViewById<View>(R.id.include_main_view12).findViewById<ImageView>(R.id.imageView).setImageResource(R.drawable.my_ripple)
                findViewById<View>(R.id.include_main_view13).findViewById<ImageView>(R.id.imageView).setImageResource(R.drawable.my_ripple)
                findViewById<View>(R.id.include_main_view14).findViewById<ImageView>(R.id.imageView).setImageResource(R.drawable.my_ripple)
                findViewById<View>(R.id.include_main_view15).findViewById<ImageView>(R.id.imageView).setImageResource(R.drawable.my_ripple)
            }
        }

        val orientation = resources.configuration.orientation

        val tuning = arrayOf(
            "Change Pad Sounds",
            "Random Pad Sounds",
            "Change Pad Colors",
            "Save Pad/Sequence",
            "Load Pad/Sequence",
            "Adjusting Sounds",
            "Lock Settings",
            "Hide banner Ads",
            "EXIT",
            "5x3","5x2","5x1",
            "4x3","4x2","4x1",
            "3x3","3x2","3x1",
            "2x2","2x1"
        )
        val tuning2 = arrayOf(
            "Change to Play Mode",
            "Random Pad Sounds",
            "Change Pad Colors",
            "Save Pad/Sequence",
            "Load Pad/Sequence",
            "Adjusting Sounds",
            "Lock Settings",
            "Hide banner Ads",
            "EXIT",
            "5x3","5x2","5x1",
            "4x3","4x2","4x1",
            "3x3","3x2","3x1",
            "2x2","2x1"
        )

        val padSequencer = arrayOf(
            "Hide banner Ads",
            "EXIT",
        )

        val drumPadChallenge = arrayOf(
            "Change Pad Colors",
            "Adjusting Sounds",
            "Hide banner Ads",
            "EXIT",
            "5x3","5x2","5x1",
            "4x3","4x2","4x1",
            "3x3","3x2","3x1",
            "2x2","2x1"
        )
        val adapter = ArrayAdapter(this, R.layout.custom_spinner_dropdown, tuning)
        val adapterA = ArrayAdapter(this, R.layout.custom_spinner_dropdown, tuning2)
        val psAdapter = ArrayAdapter(this, R.layout.custom_spinner_dropdown, padSequencer)
        val dpAdapter = ArrayAdapter(this, R.layout.custom_spinner_dropdown, drumPadChallenge)
        val gridView: GridView = findViewById(R.id.grid_view)
        gridView.adapter = adapter

        gridView.setOnItemClickListener { adapterView, _, position, _ ->
            when(adapterView.getItemAtPosition(position)) {
                "Change Pad Sounds" -> {
                    sequencerCount = 0
                    paste = 1
                    binding.toolbarMain.setBackgroundColor(Color.parseColor("#FFA630"))
                    Toast.makeText(applicationContext, R.string.change, Toast.LENGTH_LONG).show()
                    gridView.visibility = View.INVISIBLE
                    if (gridView.adapter == adapter) {
                        gridView.adapter = adapterA
                        adapterA.notifyDataSetChanged()
                    } else {
                        gridView.adapter = adapter
                        adapter.notifyDataSetChanged()
                    }
                }
                "Change to Play Mode" -> {
                    paste = 0
                    binding.toolbarMain.setBackgroundColor(Color.parseColor("#5A5A66"))
                    Toast.makeText(applicationContext, R.string.change2, Toast.LENGTH_LONG).show()
                    gridView.visibility = View.INVISIBLE
                    if (gridView.adapter == adapterA) {
                        gridView.adapter = adapter
                        adapter.notifyDataSetChanged()
                    } else {
                        gridView.adapter = adapterA
                        adapterA.notifyDataSetChanged()
                    }
                }
                "Change Pad Colors" -> {
                    if (colorCheck == 0) {
                        if (orientation == Configuration.ORIENTATION_PORTRAIT) {
                            findViewById<View>(R.id.include_main_view).findViewById<ImageView>(R.id.imageView).setImageResource(R.drawable.my_ripple3)
                            findViewById<View>(R.id.include_main_view2).findViewById<ImageView>(R.id.imageView).setImageResource(R.drawable.my_ripple3)
                            findViewById<View>(R.id.include_main_view3).findViewById<ImageView>(R.id.imageView).setImageResource(R.drawable.my_ripple3)
                            findViewById<View>(R.id.include_main_view4).findViewById<ImageView>(R.id.imageView).setImageResource(R.drawable.my_ripple4)
                            findViewById<View>(R.id.include_main_view5).findViewById<ImageView>(R.id.imageView).setImageResource(R.drawable.my_ripple4)
                            findViewById<View>(R.id.include_main_view6).findViewById<ImageView>(R.id.imageView).setImageResource(R.drawable.my_ripple4)
                            findViewById<View>(R.id.include_main_view7).findViewById<ImageView>(R.id.imageView).setImageResource(R.drawable.my_ripple5)
                            findViewById<View>(R.id.include_main_view8).findViewById<ImageView>(R.id.imageView).setImageResource(R.drawable.my_ripple5)
                            findViewById<View>(R.id.include_main_view9).findViewById<ImageView>(R.id.imageView).setImageResource(R.drawable.my_ripple5)
                            findViewById<View>(R.id.include_main_view10).findViewById<ImageView>(R.id.imageView).setImageResource(R.drawable.my_ripple6)
                            findViewById<View>(R.id.include_main_view11).findViewById<ImageView>(R.id.imageView).setImageResource(R.drawable.my_ripple6)
                            findViewById<View>(R.id.include_main_view12).findViewById<ImageView>(R.id.imageView).setImageResource(R.drawable.my_ripple6)
                            findViewById<View>(R.id.include_main_view13).findViewById<ImageView>(R.id.imageView).setImageResource(R.drawable.my_ripple7)
                            findViewById<View>(R.id.include_main_view14).findViewById<ImageView>(R.id.imageView).setImageResource(R.drawable.my_ripple7)
                            findViewById<View>(R.id.include_main_view15).findViewById<ImageView>(R.id.imageView).setImageResource(R.drawable.my_ripple7)
                            colorCheck = 1
                        }
                        else if (orientation == Configuration.ORIENTATION_LANDSCAPE) {
                            findViewById<View>(R.id.include_main_view).findViewById<ImageView>(R.id.imageView).setImageResource(R.drawable.my_ripple3)
                            findViewById<View>(R.id.include_main_view2).findViewById<ImageView>(R.id.imageView).setImageResource(R.drawable.my_ripple3)
                            findViewById<View>(R.id.include_main_view3).findViewById<ImageView>(R.id.imageView).setImageResource(R.drawable.my_ripple3)
                            findViewById<View>(R.id.include_main_view4).findViewById<ImageView>(R.id.imageView).setImageResource(R.drawable.my_ripple4)
                            findViewById<View>(R.id.include_main_view5).findViewById<ImageView>(R.id.imageView).setImageResource(R.drawable.my_ripple4)
                            findViewById<View>(R.id.include_main_view6).findViewById<ImageView>(R.id.imageView).setImageResource(R.drawable.my_ripple4)
                            findViewById<View>(R.id.include_main_view7).findViewById<ImageView>(R.id.imageView).setImageResource(R.drawable.my_ripple5)
                            findViewById<View>(R.id.include_main_view8).findViewById<ImageView>(R.id.imageView).setImageResource(R.drawable.my_ripple5)
                            findViewById<View>(R.id.include_main_view9).findViewById<ImageView>(R.id.imageView).setImageResource(R.drawable.my_ripple5)
                            findViewById<View>(R.id.include_main_view10).findViewById<ImageView>(R.id.imageView).setImageResource(R.drawable.my_ripple6)
                            findViewById<View>(R.id.include_main_view11).findViewById<ImageView>(R.id.imageView).setImageResource(R.drawable.my_ripple6)
                            findViewById<View>(R.id.include_main_view12).findViewById<ImageView>(R.id.imageView).setImageResource(R.drawable.my_ripple6)
                            findViewById<View>(R.id.include_main_view13).findViewById<ImageView>(R.id.imageView).setImageResource(R.drawable.my_ripple7)
                            findViewById<View>(R.id.include_main_view14).findViewById<ImageView>(R.id.imageView).setImageResource(R.drawable.my_ripple7)
                            findViewById<View>(R.id.include_main_view15).findViewById<ImageView>(R.id.imageView).setImageResource(R.drawable.my_ripple7)
                            colorCheck = 1
                        }
                    } else {
                        if (orientation == Configuration.ORIENTATION_PORTRAIT) {
                            findViewById<View>(R.id.include_main_view).findViewById<ImageView>(R.id.imageView).setImageResource(R.drawable.my_ripple)
                            findViewById<View>(R.id.include_main_view2).findViewById<ImageView>(R.id.imageView).setImageResource(R.drawable.my_ripple)
                            findViewById<View>(R.id.include_main_view3).findViewById<ImageView>(R.id.imageView).setImageResource(R.drawable.my_ripple)
                            findViewById<View>(R.id.include_main_view4).findViewById<ImageView>(R.id.imageView).setImageResource(R.drawable.my_ripple)
                            findViewById<View>(R.id.include_main_view5).findViewById<ImageView>(R.id.imageView).setImageResource(R.drawable.my_ripple)
                            findViewById<View>(R.id.include_main_view6).findViewById<ImageView>(R.id.imageView).setImageResource(R.drawable.my_ripple)
                            findViewById<View>(R.id.include_main_view7).findViewById<ImageView>(R.id.imageView).setImageResource(R.drawable.my_ripple)
                            findViewById<View>(R.id.include_main_view8).findViewById<ImageView>(R.id.imageView).setImageResource(R.drawable.my_ripple)
                            findViewById<View>(R.id.include_main_view9).findViewById<ImageView>(R.id.imageView).setImageResource(R.drawable.my_ripple)
                            findViewById<View>(R.id.include_main_view10).findViewById<ImageView>(R.id.imageView).setImageResource(R.drawable.my_ripple)
                            findViewById<View>(R.id.include_main_view11).findViewById<ImageView>(R.id.imageView).setImageResource(R.drawable.my_ripple)
                            findViewById<View>(R.id.include_main_view12).findViewById<ImageView>(R.id.imageView).setImageResource(R.drawable.my_ripple)
                            findViewById<View>(R.id.include_main_view13).findViewById<ImageView>(R.id.imageView).setImageResource(R.drawable.my_ripple)
                            findViewById<View>(R.id.include_main_view14).findViewById<ImageView>(R.id.imageView).setImageResource(R.drawable.my_ripple)
                            findViewById<View>(R.id.include_main_view15).findViewById<ImageView>(R.id.imageView).setImageResource(R.drawable.my_ripple)
                            colorCheck = 0
                        }
                        else if (orientation == Configuration.ORIENTATION_LANDSCAPE) {
                            findViewById<View>(R.id.include_main_view).findViewById<ImageView>(R.id.imageView).setImageResource(R.drawable.my_ripple)
                            findViewById<View>(R.id.include_main_view2).findViewById<ImageView>(R.id.imageView).setImageResource(R.drawable.my_ripple)
                            findViewById<View>(R.id.include_main_view3).findViewById<ImageView>(R.id.imageView).setImageResource(R.drawable.my_ripple)
                            findViewById<View>(R.id.include_main_view4).findViewById<ImageView>(R.id.imageView).setImageResource(R.drawable.my_ripple)
                            findViewById<View>(R.id.include_main_view5).findViewById<ImageView>(R.id.imageView).setImageResource(R.drawable.my_ripple)
                            findViewById<View>(R.id.include_main_view6).findViewById<ImageView>(R.id.imageView).setImageResource(R.drawable.my_ripple)
                            findViewById<View>(R.id.include_main_view7).findViewById<ImageView>(R.id.imageView).setImageResource(R.drawable.my_ripple)
                            findViewById<View>(R.id.include_main_view8).findViewById<ImageView>(R.id.imageView).setImageResource(R.drawable.my_ripple)
                            findViewById<View>(R.id.include_main_view9).findViewById<ImageView>(R.id.imageView).setImageResource(R.drawable.my_ripple)
                            findViewById<View>(R.id.include_main_view10).findViewById<ImageView>(R.id.imageView).setImageResource(R.drawable.my_ripple)
                            findViewById<View>(R.id.include_main_view11).findViewById<ImageView>(R.id.imageView).setImageResource(R.drawable.my_ripple)
                            findViewById<View>(R.id.include_main_view12).findViewById<ImageView>(R.id.imageView).setImageResource(R.drawable.my_ripple)
                            findViewById<View>(R.id.include_main_view13).findViewById<ImageView>(R.id.imageView).setImageResource(R.drawable.my_ripple)
                            findViewById<View>(R.id.include_main_view14).findViewById<ImageView>(R.id.imageView).setImageResource(R.drawable.my_ripple)
                            findViewById<View>(R.id.include_main_view15).findViewById<ImageView>(R.id.imageView).setImageResource(R.drawable.my_ripple)
                            colorCheck = 0
                        }
                    }
                    gridView.visibility = View.INVISIBLE
                }
                "Random Pad Sounds" -> {
                    soundRandom()
                    gridView.visibility = View.INVISIBLE
                }
                "Save Pad/Sequence" -> {
                    val builder = AlertDialog.Builder(this, R.style.AppCompatAlertDialogStyle)
                    val inflater = layoutInflater
                    val dialogView = inflater.inflate(R.layout.save_load, null)

                    if (mRealm.where(SaveSlot::class.java).equalTo("id", "1").findFirst()?.actionTitleR != null) {
                        dialogView.findViewById<TextView>(R.id.slot1).text = (mRealm.where(SaveSlot::class.java).equalTo("id", "1").findFirst()?.actionTitleR.toString())
                    }
                    if (mRealm.where(SaveSlot::class.java).equalTo("id", "2").findFirst()?.actionTitleR != null) {
                        dialogView.findViewById<TextView>(R.id.slot2).text = (mRealm.where(SaveSlot::class.java).equalTo("id", "2").findFirst()?.actionTitleR.toString())
                    }
                    if (mRealm.where(SaveSlot::class.java).equalTo("id", "3").findFirst()?.actionTitleR != null) {
                        dialogView.findViewById<TextView>(R.id.slot3).text = (mRealm.where(SaveSlot::class.java).equalTo("id", "3").findFirst()?.actionTitleR.toString())
                    }
                    if (mRealm.where(SaveSlot::class.java).equalTo("id", "4").findFirst()?.actionTitleR != null) {
                        dialogView.findViewById<TextView>(R.id.slot4).text = (mRealm.where(SaveSlot::class.java).equalTo("id", "4").findFirst()?.actionTitleR.toString())
                    }
                    if (mRealm.where(SaveSlot::class.java).equalTo("id", "5").findFirst()?.actionTitleR != null) {
                        dialogView.findViewById<TextView>(R.id.slot5).text = (mRealm.where(SaveSlot::class.java).equalTo("id", "5").findFirst()?.actionTitleR.toString())
                    }
                    if (mRealm.where(SaveSlot::class.java).equalTo("id", "6").findFirst()?.actionTitleR != null) {
                        dialogView.findViewById<TextView>(R.id.slot6).text = (mRealm.where(SaveSlot::class.java).equalTo("id", "6").findFirst()?.actionTitleR.toString())
                    }
                    if (mRealm.where(SaveSlot::class.java).equalTo("id", "7").findFirst()?.actionTitleR != null) {
                        dialogView.findViewById<TextView>(R.id.slot7).text = (mRealm.where(SaveSlot::class.java).equalTo("id", "7").findFirst()?.actionTitleR.toString())
                    }
                    if (mRealm.where(SaveSlot::class.java).equalTo("id", "8").findFirst()?.actionTitleR != null) {
                        dialogView.findViewById<TextView>(R.id.slot8).text = (mRealm.where(SaveSlot::class.java).equalTo("id", "8").findFirst()?.actionTitleR.toString())
                    }

                    builder.setView(dialogView)
                        .setOnCancelListener {
                            stickyImmersiveMode()
                        }
                        .setTitle(R.string.save)
                        .setNegativeButton("CANCEL") { _, _ ->
                            stickyImmersiveMode()
                        }
                    val dialog = builder.create()
                    dialog.show()

                    dialogView.findViewById<TextView>(R.id.slot1).setOnClickListener {
                        dialog.cancel()
                        if (mRealm.where(SaveSlot::class.java).equalTo("id", "1").findFirst()?.pad == null) {
                            create("1")
                            window.addFlags(WindowManager.LayoutParams.FLAG_NOT_TOUCHABLE)
                            val snackBar = Snackbar.make(findViewById(R.id.snack_space) , R.string.Saved, Snackbar.LENGTH_LONG)
                            val snackTextView: TextView = snackBar.view.findViewById(R.id.snackbar_text)
                            snackTextView.textAlignment = TextView.TEXT_ALIGNMENT_CENTER
                            snackBar.setDuration(2000).show()
                            handler.postDelayed({
                                window.clearFlags(WindowManager.LayoutParams.FLAG_NOT_TOUCHABLE)
                                val manager = ReviewManagerFactory.create(this)
                                val request = manager.requestReviewFlow()
                                request.addOnCompleteListener { task: Task<ReviewInfo?> ->
                                    when {
                                        task.isSuccessful -> {
                                            val reviewInfo = task.result
                                            val flow = manager.launchReviewFlow(this, reviewInfo)
                                            flow.addOnCompleteListener {
                                                stickyImmersiveMode()
                                            }
                                        }
                                        else -> {
                                            stickyImmersiveMode()
                                        }
                                    }
                                }
                            }, 2000)
                        } else {
                            update("1")
                            window.addFlags(WindowManager.LayoutParams.FLAG_NOT_TOUCHABLE)
                            val snackBar = Snackbar.make(findViewById(R.id.snack_space) , R.string.Saved, Snackbar.LENGTH_LONG)
                            val snackTextView: TextView = snackBar.view.findViewById(R.id.snackbar_text)
                            snackTextView.textAlignment = TextView.TEXT_ALIGNMENT_CENTER
                            snackBar.setDuration(2000).show()
                            handler.postDelayed({
                                window.clearFlags(WindowManager.LayoutParams.FLAG_NOT_TOUCHABLE)
                            }, 2000)
                        }
                    }

                    dialogView.findViewById<TextView>(R.id.slot2).setOnClickListener {
                        dialog.cancel()
                        if (mRealm.where(SaveSlot::class.java).equalTo("id", "2").findFirst()?.pad == null) {
                            create("2")
                            window.addFlags(WindowManager.LayoutParams.FLAG_NOT_TOUCHABLE)
                            val snackBar = Snackbar.make(findViewById(R.id.snack_space) , R.string.Saved, Snackbar.LENGTH_LONG)
                            val snackTextView: TextView = snackBar.view.findViewById(R.id.snackbar_text)
                            snackTextView.textAlignment = TextView.TEXT_ALIGNMENT_CENTER
                            snackBar.setDuration(2000).show()
                            handler.postDelayed({
                                window.clearFlags(WindowManager.LayoutParams.FLAG_NOT_TOUCHABLE)
                            }, 2000)
                        } else {
                            update("2")
                            window.addFlags(WindowManager.LayoutParams.FLAG_NOT_TOUCHABLE)
                            val snackBar = Snackbar.make(findViewById(R.id.snack_space) , R.string.Saved, Snackbar.LENGTH_LONG)
                            val snackTextView: TextView = snackBar.view.findViewById(R.id.snackbar_text)
                            snackTextView.textAlignment = TextView.TEXT_ALIGNMENT_CENTER
                            snackBar.setDuration(2000).show()
                            handler.postDelayed({
                                window.clearFlags(WindowManager.LayoutParams.FLAG_NOT_TOUCHABLE)
                            }, 2000)
                        }
                    }

                    dialogView.findViewById<TextView>(R.id.slot3).setOnClickListener {
                        dialog.cancel()
                        if (mRealm.where(SaveSlot::class.java).equalTo("id", "3").findFirst()?.pad == null) {
                            create("3")
                            window.addFlags(WindowManager.LayoutParams.FLAG_NOT_TOUCHABLE)
                            val snackBar = Snackbar.make(findViewById(R.id.snack_space) , R.string.Saved, Snackbar.LENGTH_LONG)
                            val snackTextView: TextView = snackBar.view.findViewById(R.id.snackbar_text)
                            snackTextView.textAlignment = TextView.TEXT_ALIGNMENT_CENTER
                            snackBar.setDuration(2000).show()
                            handler.postDelayed({
                                window.clearFlags(WindowManager.LayoutParams.FLAG_NOT_TOUCHABLE)
                                val manager = ReviewManagerFactory.create(this)
                                val request = manager.requestReviewFlow()
                                request.addOnCompleteListener { task: Task<ReviewInfo?> ->
                                    when {
                                        task.isSuccessful -> {
                                            val reviewInfo = task.result
                                            val flow = manager.launchReviewFlow(this, reviewInfo)
                                            flow.addOnCompleteListener {
                                                stickyImmersiveMode()
                                            }
                                        }
                                        else -> {
                                            stickyImmersiveMode()
                                        }
                                    }
                                }
                            }, 2000)
                        } else {
                            update("3")
                            window.addFlags(WindowManager.LayoutParams.FLAG_NOT_TOUCHABLE)
                            val snackBar = Snackbar.make(findViewById(R.id.snack_space) , R.string.Saved, Snackbar.LENGTH_LONG)
                            val snackTextView: TextView = snackBar.view.findViewById(R.id.snackbar_text)
                            snackTextView.textAlignment = TextView.TEXT_ALIGNMENT_CENTER
                            snackBar.setDuration(2000).show()
                            handler.postDelayed({
                                window.clearFlags(WindowManager.LayoutParams.FLAG_NOT_TOUCHABLE)
                            }, 2000)
                        }
                    }

                    dialogView.findViewById<TextView>(R.id.slot4).setOnClickListener {
                        dialog.cancel()
                        if (mRealm.where(SaveSlot::class.java).equalTo("id", "4").findFirst()?.pad == null) {
                            create("4")
                            window.addFlags(WindowManager.LayoutParams.FLAG_NOT_TOUCHABLE)
                            val snackBar = Snackbar.make(findViewById(R.id.snack_space) , R.string.Saved, Snackbar.LENGTH_LONG)
                            val snackTextView: TextView = snackBar.view.findViewById(R.id.snackbar_text)
                            snackTextView.textAlignment = TextView.TEXT_ALIGNMENT_CENTER
                            snackBar.setDuration(2000).show()
                            handler.postDelayed({
                                window.clearFlags(WindowManager.LayoutParams.FLAG_NOT_TOUCHABLE)
                            }, 2000)
                        } else {
                            update("4")
                            window.addFlags(WindowManager.LayoutParams.FLAG_NOT_TOUCHABLE)
                            val snackBar = Snackbar.make(findViewById(R.id.snack_space) , R.string.Saved, Snackbar.LENGTH_LONG)
                            val snackTextView: TextView = snackBar.view.findViewById(R.id.snackbar_text)
                            snackTextView.textAlignment = TextView.TEXT_ALIGNMENT_CENTER
                            snackBar.setDuration(2000).show()
                            handler.postDelayed({
                                window.clearFlags(WindowManager.LayoutParams.FLAG_NOT_TOUCHABLE)
                            }, 2000)
                        }
                    }

                    dialogView.findViewById<TextView>(R.id.slot5).setOnClickListener {
                        dialog.cancel()
                        if (mRealm.where(SaveSlot::class.java).equalTo("id", "5").findFirst()?.pad == null) {
                            create("5")
                            window.addFlags(WindowManager.LayoutParams.FLAG_NOT_TOUCHABLE)
                            val snackBar = Snackbar.make(findViewById(R.id.snack_space) , R.string.Saved, Snackbar.LENGTH_LONG)
                            val snackTextView: TextView = snackBar.view.findViewById(R.id.snackbar_text)
                            snackTextView.textAlignment = TextView.TEXT_ALIGNMENT_CENTER
                            snackBar.setDuration(2000).show()
                            handler.postDelayed({
                                window.clearFlags(WindowManager.LayoutParams.FLAG_NOT_TOUCHABLE)
                                val manager = ReviewManagerFactory.create(this)
                                val request = manager.requestReviewFlow()
                                request.addOnCompleteListener { task: Task<ReviewInfo?> ->
                                    when {
                                        task.isSuccessful -> {
                                            val reviewInfo = task.result
                                            val flow = manager.launchReviewFlow(this, reviewInfo)
                                            flow.addOnCompleteListener {
                                                stickyImmersiveMode()
                                            }
                                        }
                                        else -> {
                                            stickyImmersiveMode()
                                        }
                                    }
                                }
                            }, 2000)
                        } else {
                            update("5")
                            window.addFlags(WindowManager.LayoutParams.FLAG_NOT_TOUCHABLE)
                            val snackBar = Snackbar.make(findViewById(R.id.snack_space) , R.string.Saved, Snackbar.LENGTH_LONG)
                            val snackTextView: TextView = snackBar.view.findViewById(R.id.snackbar_text)
                            snackTextView.textAlignment = TextView.TEXT_ALIGNMENT_CENTER
                            snackBar.setDuration(2000).show()
                            handler.postDelayed({
                                window.clearFlags(WindowManager.LayoutParams.FLAG_NOT_TOUCHABLE)
                            }, 2000)
                        }
                    }

                    dialogView.findViewById<TextView>(R.id.slot6).setOnClickListener {
                        dialog.cancel()
                        if (mRealm.where(SaveSlot::class.java).equalTo("id", "6").findFirst()?.pad == null) {
                            create("6")
                            window.addFlags(WindowManager.LayoutParams.FLAG_NOT_TOUCHABLE)
                            val snackBar = Snackbar.make(findViewById(R.id.snack_space) , R.string.Saved, Snackbar.LENGTH_LONG)
                            val snackTextView: TextView = snackBar.view.findViewById(R.id.snackbar_text)
                            snackTextView.textAlignment = TextView.TEXT_ALIGNMENT_CENTER
                            snackBar.setDuration(2000).show()
                            handler.postDelayed({
                                window.clearFlags(WindowManager.LayoutParams.FLAG_NOT_TOUCHABLE)
                            }, 2000)
                        } else {
                            update("6")
                            window.addFlags(WindowManager.LayoutParams.FLAG_NOT_TOUCHABLE)
                            val snackBar = Snackbar.make(findViewById(R.id.snack_space) , R.string.Saved, Snackbar.LENGTH_LONG)
                            val snackTextView: TextView = snackBar.view.findViewById(R.id.snackbar_text)
                            snackTextView.textAlignment = TextView.TEXT_ALIGNMENT_CENTER
                            snackBar.setDuration(2000).show()
                            handler.postDelayed({
                                window.clearFlags(WindowManager.LayoutParams.FLAG_NOT_TOUCHABLE)
                            }, 2000)
                        }
                    }

                    dialogView.findViewById<TextView>(R.id.slot7).setOnClickListener {
                        dialog.cancel()
                        if (mRealm.where(SaveSlot::class.java).equalTo("id", "7").findFirst()?.pad == null) {
                            create("7")
                            window.addFlags(WindowManager.LayoutParams.FLAG_NOT_TOUCHABLE)
                            val snackBar = Snackbar.make(findViewById(R.id.snack_space) , R.string.Saved, Snackbar.LENGTH_LONG)
                            val snackTextView: TextView = snackBar.view.findViewById(R.id.snackbar_text)
                            snackTextView.textAlignment = TextView.TEXT_ALIGNMENT_CENTER
                            snackBar.setDuration(2000).show()
                            handler.postDelayed({
                                window.clearFlags(WindowManager.LayoutParams.FLAG_NOT_TOUCHABLE)
                            }, 2000)
                        } else {
                            update("7")
                            window.addFlags(WindowManager.LayoutParams.FLAG_NOT_TOUCHABLE)
                            val snackBar = Snackbar.make(findViewById(R.id.snack_space) , R.string.Saved, Snackbar.LENGTH_LONG)
                            val snackTextView: TextView = snackBar.view.findViewById(R.id.snackbar_text)
                            snackTextView.textAlignment = TextView.TEXT_ALIGNMENT_CENTER
                            snackBar.setDuration(2000).show()
                            handler.postDelayed({
                                window.clearFlags(WindowManager.LayoutParams.FLAG_NOT_TOUCHABLE)
                            }, 2000)
                        }
                    }

                    dialogView.findViewById<TextView>(R.id.slot8).setOnClickListener {
                        dialog.cancel()
                        if (mRealm.where(SaveSlot::class.java).equalTo("id", "8").findFirst()?.pad == null) {
                            create("8")
                            window.addFlags(WindowManager.LayoutParams.FLAG_NOT_TOUCHABLE)
                            val snackBar = Snackbar.make(findViewById(R.id.snack_space) , R.string.Saved, Snackbar.LENGTH_LONG)
                            val snackTextView: TextView = snackBar.view.findViewById(R.id.snackbar_text)
                            snackTextView.textAlignment = TextView.TEXT_ALIGNMENT_CENTER
                            snackBar.setDuration(2000).show()
                            handler.postDelayed({
                                window.clearFlags(WindowManager.LayoutParams.FLAG_NOT_TOUCHABLE)
                                val manager = ReviewManagerFactory.create(this)
                                val request = manager.requestReviewFlow()
                                request.addOnCompleteListener { task: Task<ReviewInfo?> ->
                                    when {
                                        task.isSuccessful -> {
                                            val reviewInfo = task.result
                                            val flow = manager.launchReviewFlow(this, reviewInfo)
                                            flow.addOnCompleteListener {
                                                stickyImmersiveMode()
                                            }
                                        }
                                        else -> {
                                            stickyImmersiveMode()
                                        }
                                    }
                                }
                            }, 2000)
                        } else {
                            update("8")
                            window.addFlags(WindowManager.LayoutParams.FLAG_NOT_TOUCHABLE)
                            val snackBar = Snackbar.make(findViewById(R.id.snack_space) , R.string.Saved, Snackbar.LENGTH_LONG)
                            val snackTextView: TextView = snackBar.view.findViewById(R.id.snackbar_text)
                            snackTextView.textAlignment = TextView.TEXT_ALIGNMENT_CENTER
                            snackBar.setDuration(2000).show()
                            handler.postDelayed({
                                window.clearFlags(WindowManager.LayoutParams.FLAG_NOT_TOUCHABLE)
                            }, 2000)
                        }
                    }

                    gridView.visibility = View.INVISIBLE
                }
                "Load Pad/Sequence" -> {
                    val builder = AlertDialog.Builder(this, R.style.AppCompatAlertDialogStyle)
                    val inflater = layoutInflater
                    val dialogView = inflater.inflate(R.layout.save_load, null)

                    if (mRealm.where(SaveSlot::class.java).equalTo("id", "1").findFirst()?.actionTitleR != null) {
                        dialogView.findViewById<TextView>(R.id.slot1).text = (mRealm.where(SaveSlot::class.java).equalTo("id", "1").findFirst()?.actionTitleR.toString())
                    }
                    if (mRealm.where(SaveSlot::class.java).equalTo("id", "2").findFirst()?.actionTitleR != null) {
                        dialogView.findViewById<TextView>(R.id.slot2).text = (mRealm.where(SaveSlot::class.java).equalTo("id", "2").findFirst()?.actionTitleR.toString())
                    }
                    if (mRealm.where(SaveSlot::class.java).equalTo("id", "3").findFirst()?.actionTitleR != null) {
                        dialogView.findViewById<TextView>(R.id.slot3).text = (mRealm.where(SaveSlot::class.java).equalTo("id", "3").findFirst()?.actionTitleR.toString())
                    }
                    if (mRealm.where(SaveSlot::class.java).equalTo("id", "4").findFirst()?.actionTitleR != null) {
                        dialogView.findViewById<TextView>(R.id.slot4).text = (mRealm.where(SaveSlot::class.java).equalTo("id", "4").findFirst()?.actionTitleR.toString())
                    }
                    if (mRealm.where(SaveSlot::class.java).equalTo("id", "5").findFirst()?.actionTitleR != null) {
                        dialogView.findViewById<TextView>(R.id.slot5).text = (mRealm.where(SaveSlot::class.java).equalTo("id", "5").findFirst()?.actionTitleR.toString())
                    }
                    if (mRealm.where(SaveSlot::class.java).equalTo("id", "6").findFirst()?.actionTitleR != null) {
                        dialogView.findViewById<TextView>(R.id.slot6).text = (mRealm.where(SaveSlot::class.java).equalTo("id", "6").findFirst()?.actionTitleR.toString())
                    }
                    if (mRealm.where(SaveSlot::class.java).equalTo("id", "7").findFirst()?.actionTitleR != null) {
                        dialogView.findViewById<TextView>(R.id.slot7).text = (mRealm.where(SaveSlot::class.java).equalTo("id", "7").findFirst()?.actionTitleR.toString())
                    }
                    if (mRealm.where(SaveSlot::class.java).equalTo("id", "8").findFirst()?.actionTitleR != null) {
                        dialogView.findViewById<TextView>(R.id.slot8).text = (mRealm.where(SaveSlot::class.java).equalTo("id", "8").findFirst()?.actionTitleR.toString())
                    }

                    builder.setView(dialogView)
                        .setOnCancelListener {
                            stickyImmersiveMode()
                        }
                        .setTitle(R.string.load)
                        .setNegativeButton("CANCEL") { _, _ ->
                            stickyImmersiveMode()
                        }
                    val dialog = builder.create()
                    dialog.show()

                    dialogView.findViewById<TextView>(R.id.slot1).setOnClickListener {
                        read("1")
                        dialog.cancel()
                        if (mRealm.where(SaveSlot::class.java).equalTo("id", "1").findFirst()?.pad != null) {
                            sequencerSize = 0
                            findViewById<View>(R.id.line_measure).findViewById<TextView>(R.id.measure).text = (sequencerSize + 1).toString()
                            changeSequence()
                            window.addFlags(WindowManager.LayoutParams.FLAG_NOT_TOUCHABLE)
                            val snackBar2 = Snackbar.make(findViewById(R.id.snack_space),
                                R.string.Loaded,
                                Snackbar.LENGTH_LONG)
                            val snackTextView2: TextView =
                                snackBar2.view.findViewById(R.id.snackbar_text)
                            snackTextView2.textAlignment = TextView.TEXT_ALIGNMENT_CENTER
                            snackBar2.setDuration(2000).show()
                            handler.postDelayed({
                                window.clearFlags(WindowManager.LayoutParams.FLAG_NOT_TOUCHABLE)
                            }, 2000)
                        }
                    }

                    dialogView.findViewById<TextView>(R.id.slot2).setOnClickListener {
                        read("2")
                        dialog.cancel()
                        if (mRealm.where(SaveSlot::class.java).equalTo("id", "2").findFirst()?.pad != null) {
                            sequencerSize = 0
                            findViewById<View>(R.id.line_measure).findViewById<TextView>(R.id.measure).text = (sequencerSize + 1).toString()
                            changeSequence()
                            window.addFlags(WindowManager.LayoutParams.FLAG_NOT_TOUCHABLE)
                            val snackBar2 = Snackbar.make(findViewById(R.id.snack_space),
                                R.string.Loaded,
                                Snackbar.LENGTH_LONG)
                            val snackTextView2: TextView =
                                snackBar2.view.findViewById(R.id.snackbar_text)
                            snackTextView2.textAlignment = TextView.TEXT_ALIGNMENT_CENTER
                            snackBar2.setDuration(2000).show()
                            handler.postDelayed({
                                window.clearFlags(WindowManager.LayoutParams.FLAG_NOT_TOUCHABLE)
                            }, 2000)
                        }
                    }

                    dialogView.findViewById<TextView>(R.id.slot3).setOnClickListener {
                        read("3")
                        dialog.cancel()
                        if (mRealm.where(SaveSlot::class.java).equalTo("id", "3").findFirst()?.pad != null) {
                            sequencerSize = 0
                            findViewById<View>(R.id.line_measure).findViewById<TextView>(R.id.measure).text = (sequencerSize + 1).toString()
                            changeSequence()
                            window.addFlags(WindowManager.LayoutParams.FLAG_NOT_TOUCHABLE)
                            val snackBar2 = Snackbar.make(findViewById(R.id.snack_space),
                                R.string.Loaded,
                                Snackbar.LENGTH_LONG)
                            val snackTextView2: TextView =
                                snackBar2.view.findViewById(R.id.snackbar_text)
                            snackTextView2.textAlignment = TextView.TEXT_ALIGNMENT_CENTER
                            snackBar2.setDuration(2000).show()
                            handler.postDelayed({
                                window.clearFlags(WindowManager.LayoutParams.FLAG_NOT_TOUCHABLE)
                            }, 2000)
                        }
                    }

                    dialogView.findViewById<TextView>(R.id.slot4).setOnClickListener {
                        read("4")
                        dialog.cancel()
                        if (mRealm.where(SaveSlot::class.java).equalTo("id", "4").findFirst()?.pad != null) {
                            sequencerSize = 0
                            findViewById<View>(R.id.line_measure).findViewById<TextView>(R.id.measure).text = (sequencerSize + 1).toString()
                            changeSequence()
                            window.addFlags(WindowManager.LayoutParams.FLAG_NOT_TOUCHABLE)
                            val snackBar2 = Snackbar.make(findViewById(R.id.snack_space),
                                R.string.Loaded,
                                Snackbar.LENGTH_LONG)
                            val snackTextView2: TextView =
                                snackBar2.view.findViewById(R.id.snackbar_text)
                            snackTextView2.textAlignment = TextView.TEXT_ALIGNMENT_CENTER
                            snackBar2.setDuration(2000).show()
                            handler.postDelayed({
                                window.clearFlags(WindowManager.LayoutParams.FLAG_NOT_TOUCHABLE)
                            }, 2000)
                        }
                    }

                    dialogView.findViewById<TextView>(R.id.slot5).setOnClickListener {
                        read("5")
                        dialog.cancel()
                        if (mRealm.where(SaveSlot::class.java).equalTo("id", "5").findFirst()?.pad != null) {
                            sequencerSize = 0
                            findViewById<View>(R.id.line_measure).findViewById<TextView>(R.id.measure).text = (sequencerSize + 1).toString()
                            changeSequence()
                            window.addFlags(WindowManager.LayoutParams.FLAG_NOT_TOUCHABLE)
                            val snackBar2 = Snackbar.make(findViewById(R.id.snack_space),
                                R.string.Loaded,
                                Snackbar.LENGTH_LONG)
                            val snackTextView2: TextView =
                                snackBar2.view.findViewById(R.id.snackbar_text)
                            snackTextView2.textAlignment = TextView.TEXT_ALIGNMENT_CENTER
                            snackBar2.setDuration(2000).show()
                            handler.postDelayed({
                                window.clearFlags(WindowManager.LayoutParams.FLAG_NOT_TOUCHABLE)
                            }, 2000)
                        }
                    }

                    dialogView.findViewById<TextView>(R.id.slot6).setOnClickListener {
                        read("6")
                        dialog.cancel()
                        if (mRealm.where(SaveSlot::class.java).equalTo("id", "6").findFirst()?.pad != null) {
                            sequencerSize = 0
                            findViewById<View>(R.id.line_measure).findViewById<TextView>(R.id.measure).text = (sequencerSize + 1).toString()
                            changeSequence()
                            window.addFlags(WindowManager.LayoutParams.FLAG_NOT_TOUCHABLE)
                            val snackBar2 = Snackbar.make(findViewById(R.id.snack_space),
                                R.string.Loaded,
                                Snackbar.LENGTH_LONG)
                            val snackTextView2: TextView =
                                snackBar2.view.findViewById(R.id.snackbar_text)
                            snackTextView2.textAlignment = TextView.TEXT_ALIGNMENT_CENTER
                            snackBar2.setDuration(2000).show()
                            handler.postDelayed({
                                window.clearFlags(WindowManager.LayoutParams.FLAG_NOT_TOUCHABLE)
                            }, 2000)
                        }
                    }

                    dialogView.findViewById<TextView>(R.id.slot7).setOnClickListener {
                        read("7")
                        dialog.cancel()
                        if (mRealm.where(SaveSlot::class.java).equalTo("id", "7").findFirst()?.pad != null) {
                            sequencerSize = 0
                            findViewById<View>(R.id.line_measure).findViewById<TextView>(R.id.measure).text = (sequencerSize + 1).toString()
                            changeSequence()
                            window.addFlags(WindowManager.LayoutParams.FLAG_NOT_TOUCHABLE)
                            val snackBar2 = Snackbar.make(findViewById(R.id.snack_space),
                                R.string.Loaded,
                                Snackbar.LENGTH_LONG)
                            val snackTextView2: TextView =
                                snackBar2.view.findViewById(R.id.snackbar_text)
                            snackTextView2.textAlignment = TextView.TEXT_ALIGNMENT_CENTER
                            snackBar2.setDuration(2000).show()
                            handler.postDelayed({
                                window.clearFlags(WindowManager.LayoutParams.FLAG_NOT_TOUCHABLE)
                            }, 2000)
                        }
                    }

                    dialogView.findViewById<TextView>(R.id.slot8).setOnClickListener {
                        read("8")
                        dialog.cancel()
                        if (mRealm.where(SaveSlot::class.java).equalTo("id", "8").findFirst()?.pad != null) {
                            sequencerSize = 0
                            findViewById<View>(R.id.line_measure).findViewById<TextView>(R.id.measure).text = (sequencerSize + 1).toString()
                            changeSequence()
                            window.addFlags(WindowManager.LayoutParams.FLAG_NOT_TOUCHABLE)
                            val snackBar2 = Snackbar.make(findViewById(R.id.snack_space),
                                R.string.Loaded,
                                Snackbar.LENGTH_LONG)
                            val snackTextView2: TextView =
                                snackBar2.view.findViewById(R.id.snackbar_text)
                            snackTextView2.textAlignment = TextView.TEXT_ALIGNMENT_CENTER
                            snackBar2.setDuration(2000).show()
                            handler.postDelayed({
                                window.clearFlags(WindowManager.LayoutParams.FLAG_NOT_TOUCHABLE)
                            }, 2000)
                        }
                    }

                    gridView.visibility = View.INVISIBLE
                }
                "Adjusting Sounds" -> {
                    binding.view.visibility = View.VISIBLE
                    gridView.visibility = View.INVISIBLE
                }
                "Lock Settings" -> {
                    paste = 0
                    menuSwitchLock = false
                    binding.editTitle.isEnabled = false
                    findViewById<Spinner>(R.id.mode_spinner).isEnabled = false
                    invalidateOptionsMenu()
                    binding.toolbarMain.setBackgroundColor(Color.parseColor("#5A5A66"))
                    Toast.makeText(applicationContext, R.string.lock, Toast.LENGTH_LONG).show()
                    gridView.visibility = View.INVISIBLE
                    gridView.adapter = adapter
                    adapter.notifyDataSetChanged()
                }
                "Hide banner Ads" -> {
                    if (adCheck == 0) {
                        AlertDialog.Builder(this)
                            .setOnCancelListener {
                                stickyImmersiveMode()
                            }
                            .setTitle(R.string.menu5a)
                            .setMessage(R.string.menu5b)
                            .setPositiveButton("YES") { _, _ ->
                                showRewardAd()
                            }
                            .setNegativeButton("NO") { _, _ ->
                                stickyImmersiveMode()
                            }
                            .show()
                    } else if (adCheck == 1){
                        AlertDialog.Builder(this)
                            .setOnCancelListener {
                                stickyImmersiveMode()
                            }
                            .setTitle(R.string.menu5c)
                            .setPositiveButton("OK") { _, _ ->
                                stickyImmersiveMode()
                            }
                            .show()
                    }
                }
                "EXIT" -> {
                    AlertDialog.Builder(this)
                        .setOnCancelListener {
                            stickyImmersiveMode()
                        }
                        .setTitle(R.string.menu6)
                        .setPositiveButton("YES") { _, _ ->
                            finish()
                        }
                        .setNegativeButton("NO") { _, _ ->
                            stickyImmersiveMode()
                        }
                        .show()
                }
                "5x3" -> {
                    x53()
                }
                "4x3" -> {
                    x43()
                }
                "3x3" -> {
                    x33()
                }
                "5x2" -> {
                    x52()
                }
                "4x2" -> {
                    x42()
                }
                "3x2" -> {
                    x32()
                }
                "2x2" -> {
                    x22()
                }
                "2x1" -> {
                    x21()
                }
                "5x1" -> {
                    x51()
                }
                "4x1" -> {
                    x41()
                }
                "3x1" -> {
                    x31()
                }
            }
        }

        val choose = arrayOf(
            "CREATE NEW PATTERN",
            "HIPHOP 1 BPM80",
            "REGGAETON 1 BPM90",
            "ELECTRONICA 1 BPM90",
            "DUBSTEP 1 BPM140",
            "HOUSE 1 BPM130",
            "DISCO 1 BPM110",
            "TECHNO 1 BPM110",
            "EUROBEAT 1 BPM130",
            "2 STEP 1 BPM100",
            "DRUM'N'BASS 1 BPM170",
            "BEAT 1 BPM120",
            "BEAT 2 BPM120",
            "BEAT 3 BPM110",
            "BEAT 4 BPM100",
            "BEAT 5 BPM90",
            "BEAT 6 BPM100",
            "BEAT 7 BPM120",
            "BEAT 8 BPM100"
            )

        val padMode = arrayOf(
            "HIPHOP 1 BPM80",
            "REGGAETON 1 BPM90",
            "ELECTRONICA 1 BPM90",
            "DUBSTEP 1 BPM140",
            "HOUSE 1 BPM130",
            "DISCO 1 BPM110",
            "TECHNO 1 BPM110",
            "EUROBEAT 1 BPM130",
            "2 STEP 1 BPM100",
            "DRUM'N'BASS 1 BPM170",
            "BEAT 1 BPM120",
            "BEAT 2 BPM120",
            "BEAT 3 BPM110",
            "BEAT 4 BPM100",
            "BEAT 5 BPM90",
            "BEAT 6 BPM100",
            "BEAT 7 BPM120",
            "BEAT 8 BPM100"
        )

        val dpMode = arrayOf(
            stage1s,
            stage2s,
            stage3s,
            stage4s,
            stage5s,
            stage6s,
            stage7s,
            stage8s,
            stage9s,
            stage10s,
            stage11s,
            stage12s,
            stage13s,
            stage14s,
            stage15s,
            stage16s,
            stageExs
        )

        val adapter2 = ArrayAdapter(this, R.layout.custom_spinner_dropdown, choose)
        val padAdapter = ArrayAdapter(this, R.layout.custom_spinner_dropdown, padMode)
        val dpAdapter2 = ArrayAdapter(this, R.layout.custom_spinner_dropdown, dpMode)
        val gridView2: GridView = findViewById(R.id.grid_view_choose)
        val soundListView = findViewById<ListView>(R.id.list_view)
        gridView2.adapter = padAdapter

        gridView2.setOnItemClickListener { adapterView, _, position, _ ->
            if (gridCheck == 0) {
                when (adapterView.getItemAtPosition(position)) {
                    "CREATE NEW PATTERN" -> {
                        menuSwitch = true
                        invalidateOptionsMenu()
                        switch1 = 2
                        noteCount = 0
                        count = 5
                        bpm = 10
                        actionTitle = "NEW PATTERN"
                        binding.editTitle.setText(actionTitle.replace("_", " ").uppercase(),
                            TextView.BufferType.NORMAL)
                        createNew()
                        changeSequence()
                        sequencerChange(View.GONE)
                        gridView2.visibility = View.INVISIBLE
                    }
                    "HIPHOP 1 BPM80" -> {
                        menuSwitch = true
                        invalidateOptionsMenu()
                        switch1 = 2
                        padText1 = "tr_8_clsd_hi_hat_02"
                        padText4 = "snare_drum_11"
                        padText7 = "tr_909_bass_drum_02"
                        actionTitle = "hiphop_1_bpm80"
                        binding.includeMainView.textView.text =
                            padText1.replace("tr_8", "TR-8").replace("tr_909", "TR-909")
                                .replace("_", " ").uppercase()
                        binding.includeMainView4.textView.text =
                            padText4.replace("tr_8", "TR-8").replace("tr_909", "TR-909")
                                .replace("_", " ").uppercase()
                        binding.includeMainView7.textView.text =
                            padText7.replace("tr_8", "TR-8").replace("tr_909", "TR-909")
                                .replace("_", " ").uppercase()
                        findViewById<View>(R.id.include_view).findViewById<TextView>(R.id.padText).text =
                            soundPoolVolume.toString()
                                .replace("f", "") + "            " + soundPoolTempo.toString()
                                .replace("f", "") + "\n" + padText1.replace("tr_8", "TR-8")
                                .replace("tr_909", "TR-909").replace("_", " ").uppercase()
                        findViewById<View>(R.id.include_view4).findViewById<TextView>(R.id.padText).text =
                            soundPoolVolume4.toString()
                                .replace("f", "") + "            " + soundPoolTempo4.toString()
                                .replace("f", "") + "\n" + padText4.replace("tr_8", "TR-8")
                                .replace("tr_909", "TR-909").replace("_", " ").uppercase()
                        findViewById<View>(R.id.include_view7).findViewById<TextView>(R.id.padText).text =
                            soundPoolVolume7.toString()
                                .replace("f", "") + "            " + soundPoolTempo7.toString()
                                .replace("f", "") + "\n" + padText7.replace("tr_8", "TR-8")
                                .replace("tr_909", "TR-909").replace("_", " ").uppercase()
                        sound1 = soundPool.load(assets.openFd("$padText1.ogg"), 1)
                        sound4 = soundPool.load(assets.openFd("$padText4.ogg"), 1)
                        sound7 = soundPool.load(assets.openFd("$padText7.ogg"), 1)
                        hiphopSequence()
                        changeSequence()
                        noteCount = 0
                        count = 5
                        bpm = 10
                        binding.editTitle.setText(actionTitle.replace("_", " ").uppercase(),
                            TextView.BufferType.NORMAL)
                        x31()
                        if (mode == 0) {
                            binding.sequencerView.visibility = View.GONE
                            binding.notes.visibility = View.GONE
                            binding.view.visibility = View.INVISIBLE
                        } else {
                            sequencerChange(View.GONE)
                        }
                        gridView2.visibility = View.INVISIBLE
                    }
                    "REGGAETON 1 BPM90" -> {
                        menuSwitch = true
                        invalidateOptionsMenu()
                        switch1 = 2
                        padText1 = "bass_drum_short_08"
                        padText4 = "snare_drum_05"
                        padText7 = "clap_08"
                        actionTitle = "reggaeton_1_bpm90"
                        binding.includeMainView.textView.text =
                            padText1.replace("tr_8", "TR-8").replace("tr_909", "TR-909")
                                .replace("_", " ").uppercase()
                        binding.includeMainView4.textView.text =
                            padText4.replace("tr_8", "TR-8").replace("tr_909", "TR-909")
                                .replace("_", " ").uppercase()
                        binding.includeMainView7.textView.text =
                            padText7.replace("tr_8", "TR-8").replace("tr_909", "TR-909")
                                .replace("_", " ").uppercase()
                        findViewById<View>(R.id.include_view).findViewById<TextView>(R.id.padText).text =
                            soundPoolVolume.toString()
                                .replace("f", "") + "            " + soundPoolTempo.toString()
                                .replace("f", "") + "\n" + padText1.replace("tr_8", "TR-8")
                                .replace("tr_909", "TR-909").replace("_", " ").uppercase()
                        findViewById<View>(R.id.include_view4).findViewById<TextView>(R.id.padText).text =
                            soundPoolVolume4.toString()
                                .replace("f", "") + "            " + soundPoolTempo4.toString()
                                .replace("f", "") + "\n" + padText4.replace("tr_8", "TR-8")
                                .replace("tr_909", "TR-909").replace("_", " ").uppercase()
                        findViewById<View>(R.id.include_view7).findViewById<TextView>(R.id.padText).text =
                            soundPoolVolume7.toString()
                                .replace("f", "") + "            " + soundPoolTempo7.toString()
                                .replace("f", "") + "\n" + padText7.replace("tr_8", "TR-8")
                                .replace("tr_909", "TR-909").replace("_", " ").uppercase()
                        sound1 = soundPool.load(assets.openFd("$padText1.ogg"), 1)
                        sound4 = soundPool.load(assets.openFd("$padText4.ogg"), 1)
                        sound7 = soundPool.load(assets.openFd("$padText7.ogg"), 1)
                        reggaetonSequence()
                        changeSequence()
                        noteCount = 0
                        count = 5
                        bpm = 10
                        binding.editTitle.setText(actionTitle.replace("_", " ").uppercase(),
                            TextView.BufferType.NORMAL)
                        x31()
                        if (mode == 0) {
                            binding.sequencerView.visibility = View.GONE
                            binding.notes.visibility = View.GONE
                            binding.view.visibility = View.INVISIBLE
                        } else {
                            sequencerChange(View.GONE)
                        }
                        gridView2.visibility = View.INVISIBLE
                    }
                    "ELECTRONICA 1 BPM90" -> {
                        menuSwitch = true
                        invalidateOptionsMenu()
                        switch1 = 2
                        padText1 = "clsd_hi_hat_01"
                        padText4 = "snare_drum_14"
                        padText7 = "bass_drum_short_01"
                        padText10 = "clap_01"
                        actionTitle = "electronica_1_bpm90"
                        binding.includeMainView.textView.text =
                            padText1.replace("tr_8", "TR-8").replace("tr_909", "TR-909")
                                .replace("_", " ").uppercase()
                        binding.includeMainView4.textView.text =
                            padText4.replace("tr_8", "TR-8").replace("tr_909", "TR-909")
                                .replace("_", " ").uppercase()
                        binding.includeMainView7.textView.text =
                            padText7.replace("tr_8", "TR-8").replace("tr_909", "TR-909")
                                .replace("_", " ").uppercase()
                        binding.includeMainView10.textView.text =
                            padText10.replace("tr_8", "TR-8").replace("tr_909", "TR-909")
                                .replace("_", " ").uppercase()
                        findViewById<View>(R.id.include_view).findViewById<TextView>(R.id.padText).text =
                            soundPoolVolume.toString()
                                .replace("f", "") + "            " + soundPoolTempo.toString()
                                .replace("f", "") + "\n" + padText1.replace("tr_8", "TR-8")
                                .replace("tr_909", "TR-909").replace("_", " ").uppercase()
                        findViewById<View>(R.id.include_view4).findViewById<TextView>(R.id.padText).text =
                            soundPoolVolume4.toString()
                                .replace("f", "") + "            " + soundPoolTempo4.toString()
                                .replace("f", "") + "\n" + padText4.replace("tr_8", "TR-8")
                                .replace("tr_909", "TR-909").replace("_", " ").uppercase()
                        findViewById<View>(R.id.include_view7).findViewById<TextView>(R.id.padText).text =
                            soundPoolVolume7.toString()
                                .replace("f", "") + "            " + soundPoolTempo7.toString()
                                .replace("f", "") + "\n" + padText7.replace("tr_8", "TR-8")
                                .replace("tr_909", "TR-909").replace("_", " ").uppercase()
                        findViewById<View>(R.id.include_view10).findViewById<TextView>(R.id.padText).text =
                            soundPoolVolume10.toString()
                                .replace("f", "") + "            " + soundPoolTempo10.toString()
                                .replace("f", "") + "\n" + padText10.replace("tr_8", "TR-8")
                                .replace("tr_909", "TR-909").replace("_", " ").uppercase()
                        sound1 = soundPool.load(assets.openFd("$padText1.ogg"), 1)
                        sound4 = soundPool.load(assets.openFd("$padText4.ogg"), 1)
                        sound7 = soundPool.load(assets.openFd("$padText7.ogg"), 1)
                        sound10 = soundPool.load(assets.openFd("$padText10.ogg"), 1)
                        electronicaSequence()
                        changeSequence()
                        noteCount = 0
                        count = 5
                        bpm = 10
                        binding.editTitle.setText(actionTitle.replace("_", " ").uppercase(),
                            TextView.BufferType.NORMAL)
                        x41()
                        if (mode == 0) {
                            binding.sequencerView.visibility = View.GONE
                            binding.notes.visibility = View.GONE
                            binding.view.visibility = View.INVISIBLE
                        } else {
                            sequencerChange(View.GONE)
                        }
                        gridView2.visibility = View.INVISIBLE
                    }
                    "DUBSTEP 1 BPM140" -> {
                        menuSwitch = true
                        invalidateOptionsMenu()
                        switch1 = 2
                        padText1 = "clsd_hi_hat_03"
                        padText4 = "tr_8_snare_drum_03"
                        padText7 = "tr_909_bass_drum_01"
                        padText10 = "clap_05"
                        actionTitle = "dubstep_1_bpm140"
                        binding.includeMainView.textView.text =
                            padText1.replace("tr_8", "TR-8").replace("tr_909", "TR-909")
                                .replace("_", " ").uppercase()
                        binding.includeMainView4.textView.text =
                            padText4.replace("tr_8", "TR-8").replace("tr_909", "TR-909")
                                .replace("_", " ").uppercase()
                        binding.includeMainView7.textView.text =
                            padText7.replace("tr_8", "TR-8").replace("tr_909", "TR-909")
                                .replace("_", " ").uppercase()
                        binding.includeMainView10.textView.text =
                            padText10.replace("tr_8", "TR-8").replace("tr_909", "TR-909")
                                .replace("_", " ").uppercase()
                        findViewById<View>(R.id.include_view).findViewById<TextView>(R.id.padText).text =
                            soundPoolVolume.toString()
                                .replace("f", "") + "            " + soundPoolTempo.toString()
                                .replace("f", "") + "\n" + padText1.replace("tr_8", "TR-8")
                                .replace("tr_909", "TR-909").replace("_", " ").uppercase()
                        findViewById<View>(R.id.include_view4).findViewById<TextView>(R.id.padText).text =
                            soundPoolVolume4.toString()
                                .replace("f", "") + "            " + soundPoolTempo4.toString()
                                .replace("f", "") + "\n" + padText4.replace("tr_8", "TR-8")
                                .replace("tr_909", "TR-909").replace("_", " ").uppercase()
                        findViewById<View>(R.id.include_view7).findViewById<TextView>(R.id.padText).text =
                            soundPoolVolume7.toString()
                                .replace("f", "") + "            " + soundPoolTempo7.toString()
                                .replace("f", "") + "\n" + padText7.replace("tr_8", "TR-8")
                                .replace("tr_909", "TR-909").replace("_", " ").uppercase()
                        findViewById<View>(R.id.include_view10).findViewById<TextView>(R.id.padText).text =
                            soundPoolVolume10.toString()
                                .replace("f", "") + "            " + soundPoolTempo10.toString()
                                .replace("f", "") + "\n" + padText10.replace("tr_8", "TR-8")
                                .replace("tr_909", "TR-909").replace("_", " ").uppercase()
                        sound1 = soundPool.load(assets.openFd("$padText1.ogg"), 1)
                        sound4 = soundPool.load(assets.openFd("$padText4.ogg"), 1)
                        sound7 = soundPool.load(assets.openFd("$padText7.ogg"), 1)
                        sound10 = soundPool.load(assets.openFd("$padText10.ogg"), 1)
                        dubstepSequence()
                        changeSequence()
                        noteCount = 0
                        count = 5
                        bpm = 10
                        binding.editTitle.setText(actionTitle.replace("_", " ").uppercase(),
                            TextView.BufferType.NORMAL)
                        x41()
                        if (mode == 0) {
                            binding.sequencerView.visibility = View.GONE
                            binding.notes.visibility = View.GONE
                            binding.view.visibility = View.INVISIBLE
                        } else {
                            sequencerChange(View.GONE)
                        }
                        gridView2.visibility = View.INVISIBLE
                    }
                    "HOUSE 1 BPM130" -> {
                        menuSwitch = true
                        invalidateOptionsMenu()
                        switch1 = 2
                        padText1 = "tr_909_clsd_hi_hat_02"
                        padText4 = "tr_909_open_hi_hat_01"
                        padText7 = "snare_drum_14"
                        padText10 = "bass_drum_short_08"
                        padText13 = "clap_01"
                        actionTitle = "house_1_bpm130"
                        binding.includeMainView.textView.text =
                            padText1.replace("tr_8", "TR-8").replace("tr_909", "TR-909")
                                .replace("_", " ").uppercase()
                        binding.includeMainView4.textView.text =
                            padText4.replace("tr_8", "TR-8").replace("tr_909", "TR-909")
                                .replace("_", " ").uppercase()
                        binding.includeMainView7.textView.text =
                            padText7.replace("tr_8", "TR-8").replace("tr_909", "TR-909")
                                .replace("_", " ").uppercase()
                        binding.includeMainView10.textView.text =
                            padText10.replace("tr_8", "TR-8").replace("tr_909", "TR-909")
                                .replace("_", " ").uppercase()
                        binding.includeMainView13.textView.text =
                            padText13.replace("tr_8", "TR-8").replace("tr_909", "TR-909")
                                .replace("_", " ").uppercase()
                        findViewById<View>(R.id.include_view).findViewById<TextView>(R.id.padText).text =
                            soundPoolVolume.toString()
                                .replace("f", "") + "            " + soundPoolTempo.toString()
                                .replace("f", "") + "\n" + padText1.replace("tr_8", "TR-8")
                                .replace("tr_909", "TR-909").replace("_", " ").uppercase()
                        findViewById<View>(R.id.include_view4).findViewById<TextView>(R.id.padText).text =
                            soundPoolVolume4.toString()
                                .replace("f", "") + "            " + soundPoolTempo4.toString()
                                .replace("f", "") + "\n" + padText4.replace("tr_8", "TR-8")
                                .replace("tr_909", "TR-909").replace("_", " ").uppercase()
                        findViewById<View>(R.id.include_view7).findViewById<TextView>(R.id.padText).text =
                            soundPoolVolume7.toString()
                                .replace("f", "") + "            " + soundPoolTempo7.toString()
                                .replace("f", "") + "\n" + padText7.replace("tr_8", "TR-8")
                                .replace("tr_909", "TR-909").replace("_", " ").uppercase()
                        findViewById<View>(R.id.include_view10).findViewById<TextView>(R.id.padText).text =
                            soundPoolVolume10.toString()
                                .replace("f", "") + "            " + soundPoolTempo10.toString()
                                .replace("f", "") + "\n" + padText10.replace("tr_8", "TR-8")
                                .replace("tr_909", "TR-909").replace("_", " ").uppercase()
                        findViewById<View>(R.id.include_view13).findViewById<TextView>(R.id.padText).text =
                            soundPoolVolume13.toString()
                                .replace("f", "") + "            " + soundPoolTempo13.toString()
                                .replace("f", "") + "\n" + padText13.replace("tr_8", "TR-8")
                                .replace("tr_909", "TR-909").replace("_", " ").uppercase()
                        sound1 = soundPool.load(assets.openFd("$padText1.ogg"), 1)
                        sound4 = soundPool.load(assets.openFd("$padText4.ogg"), 1)
                        sound7 = soundPool.load(assets.openFd("$padText7.ogg"), 1)
                        sound10 = soundPool.load(assets.openFd("$padText10.ogg"), 1)
                        sound13 = soundPool.load(assets.openFd("$padText13.ogg"), 1)
                        noteCount = 0
                        count = 5
                        bpm = 10
                        binding.editTitle.setText(actionTitle.replace("_", " ").uppercase(),
                            TextView.BufferType.NORMAL)
                        houseSequence()
                        changeSequence()
                        x51()
                        if (mode == 0) {
                            binding.sequencerView.visibility = View.GONE
                            binding.notes.visibility = View.GONE
                            binding.view.visibility = View.INVISIBLE
                        } else {
                            sequencerChange(View.GONE)
                        }
                        gridView2.visibility = View.INVISIBLE
                    }
                    "DISCO 1 BPM110" -> {
                        menuSwitch = true
                        invalidateOptionsMenu()
                        switch1 = 2
                        padText1 = "clsd_hi_hat_03"
                        padText4 = "open_hi_hat_11"
                        padText7 = "snare_drum_11"
                        padText10 = "bass_drum_long_08"
                        padText13 = "clap_08"
                        actionTitle = "disco_1_bpm110"
                        binding.includeMainView.textView.text =
                            padText1.replace("tr_8", "TR-8").replace("tr_909", "TR-909")
                                .replace("_", " ").uppercase()
                        binding.includeMainView4.textView.text =
                            padText4.replace("tr_8", "TR-8").replace("tr_909", "TR-909")
                                .replace("_", " ").uppercase()
                        binding.includeMainView7.textView.text =
                            padText7.replace("tr_8", "TR-8").replace("tr_909", "TR-909")
                                .replace("_", " ").uppercase()
                        binding.includeMainView10.textView.text =
                            padText10.replace("tr_8", "TR-8").replace("tr_909", "TR-909")
                                .replace("_", " ").uppercase()
                        binding.includeMainView13.textView.text =
                            padText13.replace("tr_8", "TR-8").replace("tr_909", "TR-909")
                                .replace("_", " ").uppercase()
                        findViewById<View>(R.id.include_view).findViewById<TextView>(R.id.padText).text =
                            soundPoolVolume.toString()
                                .replace("f", "") + "            " + soundPoolTempo.toString()
                                .replace("f", "") + "\n" + padText1.replace("tr_8", "TR-8")
                                .replace("tr_909", "TR-909").replace("_", " ").uppercase()
                        findViewById<View>(R.id.include_view4).findViewById<TextView>(R.id.padText).text =
                            soundPoolVolume4.toString()
                                .replace("f", "") + "            " + soundPoolTempo4.toString()
                                .replace("f", "") + "\n" + padText4.replace("tr_8", "TR-8")
                                .replace("tr_909", "TR-909").replace("_", " ").uppercase()
                        findViewById<View>(R.id.include_view7).findViewById<TextView>(R.id.padText).text =
                            soundPoolVolume7.toString()
                                .replace("f", "") + "            " + soundPoolTempo7.toString()
                                .replace("f", "") + "\n" + padText7.replace("tr_8", "TR-8")
                                .replace("tr_909", "TR-909").replace("_", " ").uppercase()
                        findViewById<View>(R.id.include_view10).findViewById<TextView>(R.id.padText).text =
                            soundPoolVolume10.toString()
                                .replace("f", "") + "            " + soundPoolTempo10.toString()
                                .replace("f", "") + "\n" + padText10.replace("tr_8", "TR-8")
                                .replace("tr_909", "TR-909").replace("_", " ").uppercase()
                        findViewById<View>(R.id.include_view13).findViewById<TextView>(R.id.padText).text =
                            soundPoolVolume13.toString()
                                .replace("f", "") + "            " + soundPoolTempo13.toString()
                                .replace("f", "") + "\n" + padText13.replace("tr_8", "TR-8")
                                .replace("tr_909", "TR-909").replace("_", " ").uppercase()
                        sound1 = soundPool.load(assets.openFd("$padText1.ogg"), 1)
                        sound4 = soundPool.load(assets.openFd("$padText4.ogg"), 1)
                        sound7 = soundPool.load(assets.openFd("$padText7.ogg"), 1)
                        sound10 = soundPool.load(assets.openFd("$padText10.ogg"), 1)
                        sound13 = soundPool.load(assets.openFd("$padText13.ogg"), 1)
                        discoSequence()
                        changeSequence()
                        noteCount = 0
                        count = 5
                        bpm = 10
                        binding.editTitle.setText(actionTitle.replace("_", " ").uppercase(),
                            TextView.BufferType.NORMAL)
                        x51()
                        if (mode == 0) {
                            binding.sequencerView.visibility = View.GONE
                            binding.notes.visibility = View.GONE
                            binding.view.visibility = View.INVISIBLE
                        } else {
                            sequencerChange(View.GONE)
                        }
                        gridView2.visibility = View.INVISIBLE
                    }
                    "TECHNO 1 BPM110" -> {
                        menuSwitch = true
                        invalidateOptionsMenu()
                        switch1 = 2
                        padText1 = "clsd_hi_hat_03"
                        padText4 = "open_hi_hat_04"
                        padText7 = "tr_8_snare_drum_03"
                        padText10 = "tr_909_bass_drum_01"
                        padText13 = "clap_01"
                        actionTitle = "techno_1_bpm110"
                        binding.includeMainView.textView.text =
                            padText1.replace("tr_8", "TR-8").replace("tr_909", "TR-909")
                                .replace("_", " ").uppercase()
                        binding.includeMainView4.textView.text =
                            padText4.replace("tr_8", "TR-8").replace("tr_909", "TR-909")
                                .replace("_", " ").uppercase()
                        binding.includeMainView7.textView.text =
                            padText7.replace("tr_8", "TR-8").replace("tr_909", "TR-909")
                                .replace("_", " ").uppercase()
                        binding.includeMainView10.textView.text =
                            padText10.replace("tr_8", "TR-8").replace("tr_909", "TR-909")
                                .replace("_", " ").uppercase()
                        binding.includeMainView13.textView.text =
                            padText13.replace("tr_8", "TR-8").replace("tr_909", "TR-909")
                                .replace("_", " ").uppercase()
                        findViewById<View>(R.id.include_view).findViewById<TextView>(R.id.padText).text =
                            soundPoolVolume.toString()
                                .replace("f", "") + "            " + soundPoolTempo.toString()
                                .replace("f", "") + "\n" + padText1.replace("tr_8", "TR-8")
                                .replace("tr_909", "TR-909").replace("_", " ").uppercase()
                        findViewById<View>(R.id.include_view4).findViewById<TextView>(R.id.padText).text =
                            soundPoolVolume4.toString()
                                .replace("f", "") + "            " + soundPoolTempo4.toString()
                                .replace("f", "") + "\n" + padText4.replace("tr_8", "TR-8")
                                .replace("tr_909", "TR-909").replace("_", " ").uppercase()
                        findViewById<View>(R.id.include_view7).findViewById<TextView>(R.id.padText).text =
                            soundPoolVolume7.toString()
                                .replace("f", "") + "            " + soundPoolTempo7.toString()
                                .replace("f", "") + "\n" + padText7.replace("tr_8", "TR-8")
                                .replace("tr_909", "TR-909").replace("_", " ").uppercase()
                        findViewById<View>(R.id.include_view10).findViewById<TextView>(R.id.padText).text =
                            soundPoolVolume10.toString()
                                .replace("f", "") + "            " + soundPoolTempo10.toString()
                                .replace("f", "") + "\n" + padText10.replace("tr_8", "TR-8")
                                .replace("tr_909", "TR-909").replace("_", " ").uppercase()
                        findViewById<View>(R.id.include_view13).findViewById<TextView>(R.id.padText).text =
                            soundPoolVolume13.toString()
                                .replace("f", "") + "            " + soundPoolTempo13.toString()
                                .replace("f", "") + "\n" + padText13.replace("tr_8", "TR-8")
                                .replace("tr_909", "TR-909").replace("_", " ").uppercase()
                        sound1 = soundPool.load(assets.openFd("$padText1.ogg"), 1)
                        sound4 = soundPool.load(assets.openFd("$padText4.ogg"), 1)
                        sound7 = soundPool.load(assets.openFd("$padText7.ogg"), 1)
                        sound10 = soundPool.load(assets.openFd("$padText10.ogg"), 1)
                        sound13 = soundPool.load(assets.openFd("$padText13.ogg"), 1)
                        technoSequence()
                        changeSequence()
                        noteCount = 0
                        count = 5
                        bpm = 10
                        binding.editTitle.setText(actionTitle.replace("_", " ").uppercase(),
                            TextView.BufferType.NORMAL)
                        x51()
                        if (mode == 0) {
                            binding.sequencerView.visibility = View.GONE
                            binding.notes.visibility = View.GONE
                            binding.view.visibility = View.INVISIBLE
                        } else {
                            sequencerChange(View.GONE)
                        }
                        gridView2.visibility = View.INVISIBLE
                    }
                    "EUROBEAT 1 BPM130" -> {
                        menuSwitch = true
                        invalidateOptionsMenu()
                        switch1 = 2
                        padText1 = "clsd_hi_hat_09"
                        padText4 = "maracas_03"
                        padText7 = "snare_drum_11"
                        padText10 = "bass_drum_long_08"
                        actionTitle = "eurobeat_1_bpm130"
                        binding.includeMainView.textView.text =
                            padText1.replace("tr_8", "TR-8").replace("tr_909", "TR-909")
                                .replace("_", " ").uppercase()
                        binding.includeMainView4.textView.text =
                            padText4.replace("tr_8", "TR-8").replace("tr_909", "TR-909")
                                .replace("_", " ").uppercase()
                        binding.includeMainView7.textView.text =
                            padText7.replace("tr_8", "TR-8").replace("tr_909", "TR-909")
                                .replace("_", " ").uppercase()
                        binding.includeMainView10.textView.text =
                            padText10.replace("tr_8", "TR-8").replace("tr_909", "TR-909")
                                .replace("_", " ").uppercase()
                        findViewById<View>(R.id.include_view).findViewById<TextView>(R.id.padText).text =
                            soundPoolVolume.toString()
                                .replace("f", "") + "            " + soundPoolTempo.toString()
                                .replace("f", "") + "\n" + padText1.replace("tr_8", "TR-8")
                                .replace("tr_909", "TR-909").replace("_", " ").uppercase()
                        findViewById<View>(R.id.include_view4).findViewById<TextView>(R.id.padText).text =
                            soundPoolVolume4.toString()
                                .replace("f", "") + "            " + soundPoolTempo4.toString()
                                .replace("f", "") + "\n" + padText4.replace("tr_8", "TR-8")
                                .replace("tr_909", "TR-909").replace("_", " ").uppercase()
                        findViewById<View>(R.id.include_view7).findViewById<TextView>(R.id.padText).text =
                            soundPoolVolume7.toString()
                                .replace("f", "") + "            " + soundPoolTempo7.toString()
                                .replace("f", "") + "\n" + padText7.replace("tr_8", "TR-8")
                                .replace("tr_909", "TR-909").replace("_", " ").uppercase()
                        findViewById<View>(R.id.include_view10).findViewById<TextView>(R.id.padText).text =
                            soundPoolVolume10.toString()
                                .replace("f", "") + "            " + soundPoolTempo10.toString()
                                .replace("f", "") + "\n" + padText10.replace("tr_8", "TR-8")
                                .replace("tr_909", "TR-909").replace("_", " ").uppercase()
                        sound1 = soundPool.load(assets.openFd("$padText1.ogg"), 1)
                        sound4 = soundPool.load(assets.openFd("$padText4.ogg"), 1)
                        sound7 = soundPool.load(assets.openFd("$padText7.ogg"), 1)
                        sound10 = soundPool.load(assets.openFd("$padText10.ogg"), 1)
                        eurobeatSequence()
                        changeSequence()
                        noteCount = 0
                        count = 5
                        bpm = 10
                        binding.editTitle.setText(actionTitle.replace("_", " ").uppercase(),
                            TextView.BufferType.NORMAL)
                        x41()
                        if (mode == 0) {
                            binding.sequencerView.visibility = View.GONE
                            binding.notes.visibility = View.GONE
                            binding.view.visibility = View.INVISIBLE
                        } else {
                            sequencerChange(View.GONE)
                        }
                        gridView2.visibility = View.INVISIBLE
                    }
                    "2 STEP 1 BPM100" -> {
                        menuSwitch = true
                        invalidateOptionsMenu()
                        switch1 = 2
                        padText1 = "tr_909_clsd_hi_hat_02"
                        padText4 = "tr_909_open_hi_hat_01"
                        padText7 = "snare_drum_02"
                        padText10 = "tr_909_bass_drum_02"
                        padText13 = "tr_909_clap"
                        actionTitle = "two_step_1_bpm100"
                        binding.includeMainView.textView.text =
                            padText1.replace("tr_8", "TR-8").replace("tr_909", "TR-909")
                                .replace("_", " ").uppercase()
                        binding.includeMainView4.textView.text =
                            padText4.replace("tr_8", "TR-8").replace("tr_909", "TR-909")
                                .replace("_", " ").uppercase()
                        binding.includeMainView7.textView.text =
                            padText7.replace("tr_8", "TR-8").replace("tr_909", "TR-909")
                                .replace("_", " ").uppercase()
                        binding.includeMainView10.textView.text =
                            padText10.replace("tr_8", "TR-8").replace("tr_909", "TR-909")
                                .replace("_", " ").uppercase()
                        binding.includeMainView13.textView.text =
                            padText13.replace("tr_8", "TR-8").replace("tr_909", "TR-909")
                                .replace("_", " ").uppercase()
                        findViewById<View>(R.id.include_view).findViewById<TextView>(R.id.padText).text =
                            soundPoolVolume.toString()
                                .replace("f", "") + "            " + soundPoolTempo.toString()
                                .replace("f", "") + "\n" + padText1.replace("tr_8", "TR-8")
                                .replace("tr_909", "TR-909").replace("_", " ").uppercase()
                        findViewById<View>(R.id.include_view4).findViewById<TextView>(R.id.padText).text =
                            soundPoolVolume4.toString()
                                .replace("f", "") + "            " + soundPoolTempo4.toString()
                                .replace("f", "") + "\n" + padText4.replace("tr_8", "TR-8")
                                .replace("tr_909", "TR-909").replace("_", " ").uppercase()
                        findViewById<View>(R.id.include_view7).findViewById<TextView>(R.id.padText).text =
                            soundPoolVolume7.toString()
                                .replace("f", "") + "            " + soundPoolTempo7.toString()
                                .replace("f", "") + "\n" + padText7.replace("tr_8", "TR-8")
                                .replace("tr_909", "TR-909").replace("_", " ").uppercase()
                        findViewById<View>(R.id.include_view10).findViewById<TextView>(R.id.padText).text =
                            soundPoolVolume10.toString()
                                .replace("f", "") + "            " + soundPoolTempo10.toString()
                                .replace("f", "") + "\n" + padText10.replace("tr_8", "TR-8")
                                .replace("tr_909", "TR-909").replace("_", " ").uppercase()
                        findViewById<View>(R.id.include_view13).findViewById<TextView>(R.id.padText).text =
                            soundPoolVolume13.toString()
                                .replace("f", "") + "            " + soundPoolTempo13.toString()
                                .replace("f", "") + "\n" + padText13.replace("tr_8", "TR-8")
                                .replace("tr_909", "TR-909").replace("_", " ").uppercase()
                        sound1 = soundPool.load(assets.openFd("$padText1.ogg"), 1)
                        sound4 = soundPool.load(assets.openFd("$padText4.ogg"), 1)
                        sound7 = soundPool.load(assets.openFd("$padText7.ogg"), 1)
                        sound10 = soundPool.load(assets.openFd("$padText10.ogg"), 1)
                        sound13 = soundPool.load(assets.openFd("$padText13.ogg"), 1)
                        twostepSequence()
                        changeSequence()
                        noteCount = 0
                        count = 5
                        bpm = 10
                        binding.editTitle.setText(actionTitle.replace("_", " ").uppercase(),
                            TextView.BufferType.NORMAL)
                        x51()
                        if (mode == 0) {
                            binding.sequencerView.visibility = View.GONE
                            binding.notes.visibility = View.GONE
                            binding.view.visibility = View.INVISIBLE
                        } else {
                            sequencerChange(View.GONE)
                        }
                        gridView2.visibility = View.INVISIBLE
                    }
                    "DRUM'N'BASS 1 BPM170" -> {
                        menuSwitch = true
                        invalidateOptionsMenu()
                        switch1 = 2
                        padText1 = "clsd_hi_hat_01"
                        padText4 = "tr_909_open_hi_hat_01"
                        padText7 = "tr_8_snare_drum_04"
                        padText10 = "bass_drum_short_08"
                        actionTitle = "drum_n_bass_1_bpm170"
                        binding.includeMainView.textView.text =
                            padText1.replace("tr_8", "TR-8").replace("tr_909", "TR-909")
                                .replace("_", " ").uppercase()
                        binding.includeMainView4.textView.text =
                            padText4.replace("tr_8", "TR-8").replace("tr_909", "TR-909")
                                .replace("_", " ").uppercase()
                        binding.includeMainView7.textView.text =
                            padText7.replace("tr_8", "TR-8").replace("tr_909", "TR-909")
                                .replace("_", " ").uppercase()
                        binding.includeMainView10.textView.text =
                            padText10.replace("tr_8", "TR-8").replace("tr_909", "TR-909")
                                .replace("_", " ").uppercase()
                        findViewById<View>(R.id.include_view).findViewById<TextView>(R.id.padText).text =
                            soundPoolVolume.toString()
                                .replace("f", "") + "            " + soundPoolTempo.toString()
                                .replace("f", "") + "\n" + padText1.replace("tr_8", "TR-8")
                                .replace("tr_909", "TR-909").replace("_", " ").uppercase()
                        findViewById<View>(R.id.include_view4).findViewById<TextView>(R.id.padText).text =
                            soundPoolVolume4.toString()
                                .replace("f", "") + "            " + soundPoolTempo4.toString()
                                .replace("f", "") + "\n" + padText4.replace("tr_8", "TR-8")
                                .replace("tr_909", "TR-909").replace("_", " ").uppercase()
                        findViewById<View>(R.id.include_view7).findViewById<TextView>(R.id.padText).text =
                            soundPoolVolume7.toString()
                                .replace("f", "") + "            " + soundPoolTempo7.toString()
                                .replace("f", "") + "\n" + padText7.replace("tr_8", "TR-8")
                                .replace("tr_909", "TR-909").replace("_", " ").uppercase()
                        findViewById<View>(R.id.include_view10).findViewById<TextView>(R.id.padText).text =
                            soundPoolVolume10.toString()
                                .replace("f", "") + "            " + soundPoolTempo10.toString()
                                .replace("f", "") + "\n" + padText10.replace("tr_8", "TR-8")
                                .replace("tr_909", "TR-909").replace("_", " ").uppercase()
                        sound1 = soundPool.load(assets.openFd("$padText1.ogg"), 1)
                        sound4 = soundPool.load(assets.openFd("$padText4.ogg"), 1)
                        sound7 = soundPool.load(assets.openFd("$padText7.ogg"), 1)
                        sound10 = soundPool.load(assets.openFd("$padText10.ogg"), 1)
                        drumnbassSequence()
                        changeSequence()
                        noteCount = 0
                        count = 5
                        bpm = 10
                        binding.editTitle.setText(actionTitle.replace("_", " ").uppercase(),
                            TextView.BufferType.NORMAL)
                        x41()
                        if (mode == 0) {
                            binding.sequencerView.visibility = View.GONE
                            binding.notes.visibility = View.GONE
                            binding.view.visibility = View.INVISIBLE
                        } else {
                            sequencerChange(View.GONE)
                        }
                        gridView2.visibility = View.INVISIBLE
                    }
                    "BEAT 1 BPM120" -> {
                        menuSwitch = true
                        invalidateOptionsMenu()
                        switch1 = 2
                        padText1 = "bass_drum_short_01"
                        padText4 = "snare_drum_01"
                        actionTitle = "beat_1_bpm120"
                        binding.includeMainView.textView.text =
                            padText1.replace("tr_8", "TR-8").replace("tr_909", "TR-909")
                                .replace("_", " ").uppercase()
                        binding.includeMainView4.textView.text =
                            padText4.replace("tr_8", "TR-8").replace("tr_909", "TR-909")
                                .replace("_", " ").uppercase()
                        findViewById<View>(R.id.include_view).findViewById<TextView>(R.id.padText).text =
                            soundPoolVolume.toString()
                                .replace("f", "") + "            " + soundPoolTempo.toString()
                                .replace("f", "") + "\n" + padText1.replace("tr_8", "TR-8")
                                .replace("tr_909", "TR-909").replace("_", " ").uppercase()
                        findViewById<View>(R.id.include_view4).findViewById<TextView>(R.id.padText).text =
                            soundPoolVolume4.toString()
                                .replace("f", "") + "            " + soundPoolTempo4.toString()
                                .replace("f", "") + "\n" + padText4.replace("tr_8", "TR-8")
                                .replace("tr_909", "TR-909").replace("_", " ").uppercase()
                        sound1 = soundPool.load(assets.openFd("$padText1.ogg"), 1)
                        sound4 = soundPool.load(assets.openFd("$padText4.ogg"), 1)
                        beat1Sequence()
                        changeSequence()
                        noteCount = 0
                        count = 5
                        bpm = 10
                        binding.editTitle.setText(actionTitle.replace("_", " ").uppercase(),
                            TextView.BufferType.NORMAL)
                        x21()
                        if (mode == 0) {
                            binding.sequencerView.visibility = View.GONE
                            binding.notes.visibility = View.GONE
                            binding.view.visibility = View.INVISIBLE
                        } else {
                            sequencerChange(View.GONE)
                        }
                        gridView2.visibility = View.INVISIBLE
                    }
                    "BEAT 7 BPM120" -> {
                        menuSwitch = true
                        invalidateOptionsMenu()
                        switch1 = 2
                        padText1 = "bass_drum_short_08"
                        padText4 = "low_tom_06"
                        padText7 = "maracas_03"
                        actionTitle = "beat_7_bpm120"
                        binding.includeMainView.textView.text =
                            padText1.replace("tr_8", "TR-8").replace("tr_909", "TR-909")
                                .replace("_", " ").uppercase()
                        binding.includeMainView4.textView.text =
                            padText4.replace("tr_8", "TR-8").replace("tr_909", "TR-909")
                                .replace("_", " ").uppercase()
                        binding.includeMainView7.textView.text =
                            padText7.replace("tr_8", "TR-8").replace("tr_909", "TR-909")
                                .replace("_", " ").uppercase()
                        findViewById<View>(R.id.include_view).findViewById<TextView>(R.id.padText).text =
                            soundPoolVolume.toString()
                                .replace("f", "") + "            " + soundPoolTempo.toString()
                                .replace("f", "") + "\n" + padText1.replace("tr_8", "TR-8")
                                .replace("tr_909", "TR-909").replace("_", " ").uppercase()
                        findViewById<View>(R.id.include_view4).findViewById<TextView>(R.id.padText).text =
                            soundPoolVolume4.toString()
                                .replace("f", "") + "            " + soundPoolTempo4.toString()
                                .replace("f", "") + "\n" + padText4.replace("tr_8", "TR-8")
                                .replace("tr_909", "TR-909").replace("_", " ").uppercase()
                        findViewById<View>(R.id.include_view7).findViewById<TextView>(R.id.padText).text =
                            soundPoolVolume7.toString()
                                .replace("f", "") + "            " + soundPoolTempo7.toString()
                                .replace("f", "") + "\n" + padText7.replace("tr_8", "TR-8")
                                .replace("tr_909", "TR-909").replace("_", " ").uppercase()
                        sound1 = soundPool.load(assets.openFd("$padText1.ogg"), 1)
                        sound4 = soundPool.load(assets.openFd("$padText4.ogg"), 1)
                        sound7 = soundPool.load(assets.openFd("$padText7.ogg"), 1)
                        beat2Sequence()
                        changeSequence()
                        noteCount = 0
                        count = 5
                        bpm = 10
                        binding.editTitle.setText(actionTitle.replace("_", " ").uppercase(),
                            TextView.BufferType.NORMAL)
                        x31()
                        if (mode == 0) {
                            binding.sequencerView.visibility = View.GONE
                            binding.notes.visibility = View.GONE
                            binding.view.visibility = View.INVISIBLE
                        } else {
                            sequencerChange(View.GONE)
                        }
                        gridView2.visibility = View.INVISIBLE
                    }
                    "BEAT 8 BPM100" -> {
                        menuSwitch = true
                        invalidateOptionsMenu()
                        switch1 = 2
                        padText1 = "clap_01"
                        padText4 = "mid_tom_01"
                        padText7 = "claves_05"
                        padText10 = "clsd_hi_hat_09"
                        padText13 = "high_conga_08"
                        actionTitle = "beat_8_bpm100"
                        binding.includeMainView.textView.text =
                            padText1.replace("tr_8", "TR-8").replace("tr_909", "TR-909")
                                .replace("_", " ").uppercase()
                        binding.includeMainView4.textView.text =
                            padText4.replace("tr_8", "TR-8").replace("tr_909", "TR-909")
                                .replace("_", " ").uppercase()
                        binding.includeMainView7.textView.text =
                            padText7.replace("tr_8", "TR-8").replace("tr_909", "TR-909")
                                .replace("_", " ").uppercase()
                        binding.includeMainView10.textView.text =
                            padText10.replace("tr_8", "TR-8").replace("tr_909", "TR-909")
                                .replace("_", " ").uppercase()
                        binding.includeMainView13.textView.text =
                            padText13.replace("tr_8", "TR-8").replace("tr_909", "TR-909")
                                .replace("_", " ").uppercase()
                        findViewById<View>(R.id.include_view).findViewById<TextView>(R.id.padText).text =
                            soundPoolVolume.toString()
                                .replace("f", "") + "            " + soundPoolTempo.toString()
                                .replace("f", "") + "\n" + padText1.replace("tr_8", "TR-8")
                                .replace("tr_909", "TR-909").replace("_", " ").uppercase()
                        findViewById<View>(R.id.include_view4).findViewById<TextView>(R.id.padText).text =
                            soundPoolVolume4.toString()
                                .replace("f", "") + "            " + soundPoolTempo4.toString()
                                .replace("f", "") + "\n" + padText4.replace("tr_8", "TR-8")
                                .replace("tr_909", "TR-909").replace("_", " ").uppercase()
                        findViewById<View>(R.id.include_view7).findViewById<TextView>(R.id.padText).text =
                            soundPoolVolume7.toString()
                                .replace("f", "") + "            " + soundPoolTempo7.toString()
                                .replace("f", "") + "\n" + padText7.replace("tr_8", "TR-8")
                                .replace("tr_909", "TR-909").replace("_", " ").uppercase()
                        findViewById<View>(R.id.include_view10).findViewById<TextView>(R.id.padText).text =
                            soundPoolVolume10.toString()
                                .replace("f", "") + "            " + soundPoolTempo10.toString()
                                .replace("f", "") + "\n" + padText10.replace("tr_8", "TR-8")
                                .replace("tr_909", "TR-909").replace("_", " ").uppercase()
                        findViewById<View>(R.id.include_view13).findViewById<TextView>(R.id.padText).text =
                            soundPoolVolume13.toString()
                                .replace("f", "") + "            " + soundPoolTempo13.toString()
                                .replace("f", "") + "\n" + padText13.replace("tr_8", "TR-8")
                                .replace("tr_909", "TR-909").replace("_", " ").uppercase()
                        sound1 = soundPool.load(assets.openFd("$padText1.ogg"), 1)
                        sound4 = soundPool.load(assets.openFd("$padText4.ogg"), 1)
                        sound7 = soundPool.load(assets.openFd("$padText7.ogg"), 1)
                        sound10 = soundPool.load(assets.openFd("$padText10.ogg"), 1)
                        sound13 = soundPool.load(assets.openFd("$padText13.ogg"), 1)
                        beat3Sequence()
                        changeSequence()
                        noteCount = 0
                        count = 5
                        bpm = 10
                        binding.editTitle.setText(actionTitle.replace("_", " ").uppercase(),
                            TextView.BufferType.NORMAL)
                        x51()
                        if (mode == 0) {
                            binding.sequencerView.visibility = View.GONE
                            binding.notes.visibility = View.GONE
                            binding.view.visibility = View.INVISIBLE
                        } else {
                            sequencerChange(View.GONE)
                        }
                        gridView2.visibility = View.INVISIBLE
                    }
                    "BEAT 3 BPM110" -> {
                        menuSwitch = true
                        invalidateOptionsMenu()
                        switch1 = 2
                        padText1 = "clsd_hi_hat_01"
                        padText4 = "snare_drum_05"
                        padText7 = "tr_909_bass_drum_02"
                        actionTitle = "beat_3_bpm110"
                        binding.includeMainView.textView.text =
                            padText1.replace("tr_8", "TR-8").replace("tr_909", "TR-909")
                                .replace("_", " ").uppercase()
                        binding.includeMainView4.textView.text =
                            padText4.replace("tr_8", "TR-8").replace("tr_909", "TR-909")
                                .replace("_", " ").uppercase()
                        binding.includeMainView7.textView.text =
                            padText7.replace("tr_8", "TR-8").replace("tr_909", "TR-909")
                                .replace("_", " ").uppercase()
                        findViewById<View>(R.id.include_view).findViewById<TextView>(R.id.padText).text =
                            soundPoolVolume.toString()
                                .replace("f", "") + "            " + soundPoolTempo.toString()
                                .replace("f", "") + "\n" + padText1.replace("tr_8", "TR-8")
                                .replace("tr_909", "TR-909").replace("_", " ").uppercase()
                        findViewById<View>(R.id.include_view4).findViewById<TextView>(R.id.padText).text =
                            soundPoolVolume4.toString()
                                .replace("f", "") + "            " + soundPoolTempo4.toString()
                                .replace("f", "") + "\n" + padText4.replace("tr_8", "TR-8")
                                .replace("tr_909", "TR-909").replace("_", " ").uppercase()
                        findViewById<View>(R.id.include_view7).findViewById<TextView>(R.id.padText).text =
                            soundPoolVolume7.toString()
                                .replace("f", "") + "            " + soundPoolTempo7.toString()
                                .replace("f", "") + "\n" + padText7.replace("tr_8", "TR-8")
                                .replace("tr_909", "TR-909").replace("_", " ").uppercase()
                        sound1 = soundPool.load(assets.openFd("$padText1.ogg"), 1)
                        sound4 = soundPool.load(assets.openFd("$padText4.ogg"), 1)
                        sound7 = soundPool.load(assets.openFd("$padText7.ogg"), 1)
                        beat5Sequence()
                        changeSequence()
                        noteCount = 0
                        count = 5
                        bpm = 10
                        binding.editTitle.setText(actionTitle.replace("_", " ").uppercase(),
                            TextView.BufferType.NORMAL)
                        x31()
                        if (mode == 0) {
                            binding.sequencerView.visibility = View.GONE
                            binding.notes.visibility = View.GONE
                            binding.view.visibility = View.INVISIBLE
                        } else {
                            sequencerChange(View.GONE)
                        }
                        gridView2.visibility = View.INVISIBLE
                    }
                    "BEAT 4 BPM100" -> {
                        menuSwitch = true
                        invalidateOptionsMenu()
                        switch1 = 2
                        padText1 = "tr_909_bass_drum_02"
                        padText4 = "tr_8_snare_drum_03"
                        padText7 = "open_hi_hat_08"
                        actionTitle = "beat_4_bpm100"
                        binding.includeMainView.textView.text =
                            padText1.replace("tr_8", "TR-8").replace("tr_909", "TR-909")
                                .replace("_", " ").uppercase()
                        binding.includeMainView4.textView.text =
                            padText4.replace("tr_8", "TR-8").replace("tr_909", "TR-909")
                                .replace("_", " ").uppercase()
                        binding.includeMainView7.textView.text =
                            padText7.replace("tr_8", "TR-8").replace("tr_909", "TR-909")
                                .replace("_", " ").uppercase()
                        findViewById<View>(R.id.include_view).findViewById<TextView>(R.id.padText).text =
                            soundPoolVolume.toString()
                                .replace("f", "") + "            " + soundPoolTempo.toString()
                                .replace("f", "") + "\n" + padText1.replace("tr_8", "TR-8")
                                .replace("tr_909", "TR-909").replace("_", " ").uppercase()
                        findViewById<View>(R.id.include_view4).findViewById<TextView>(R.id.padText).text =
                            soundPoolVolume4.toString()
                                .replace("f", "") + "            " + soundPoolTempo4.toString()
                                .replace("f", "") + "\n" + padText4.replace("tr_8", "TR-8")
                                .replace("tr_909", "TR-909").replace("_", " ").uppercase()
                        findViewById<View>(R.id.include_view7).findViewById<TextView>(R.id.padText).text =
                            soundPoolVolume7.toString()
                                .replace("f", "") + "            " + soundPoolTempo7.toString()
                                .replace("f", "") + "\n" + padText7.replace("tr_8", "TR-8")
                                .replace("tr_909", "TR-909").replace("_", " ").uppercase()
                        sound1 = soundPool.load(assets.openFd("$padText1.ogg"), 1)
                        sound4 = soundPool.load(assets.openFd("$padText4.ogg"), 1)
                        sound7 = soundPool.load(assets.openFd("$padText7.ogg"), 1)
                        beat6Sequence()
                        changeSequence()
                        noteCount = 0
                        count = 5
                        bpm = 10
                        binding.editTitle.setText(actionTitle.replace("_", " ").uppercase(),
                            TextView.BufferType.NORMAL)
                        x31()
                        if (mode == 0) {
                            binding.sequencerView.visibility = View.GONE
                            binding.notes.visibility = View.GONE
                            binding.view.visibility = View.INVISIBLE
                        } else {
                            sequencerChange(View.GONE)
                        }
                        gridView2.visibility = View.INVISIBLE
                    }
                    "BEAT 5 BPM90" -> {
                        menuSwitch = true
                        invalidateOptionsMenu()
                        switch1 = 2
                        padText1 = "clsd_hi_hat_03"
                        padText4 = "snare_drum_02"
                        padText7 = "bass_drum_short_01"
                        actionTitle = "beat_5_bpm90"
                        binding.includeMainView.textView.text =
                            padText1.replace("tr_8", "TR-8").replace("tr_909", "TR-909")
                                .replace("_", " ").uppercase()
                        binding.includeMainView4.textView.text =
                            padText4.replace("tr_8", "TR-8").replace("tr_909", "TR-909")
                                .replace("_", " ").uppercase()
                        binding.includeMainView7.textView.text =
                            padText7.replace("tr_8", "TR-8").replace("tr_909", "TR-909")
                                .replace("_", " ").uppercase()
                        findViewById<View>(R.id.include_view).findViewById<TextView>(R.id.padText).text =
                            soundPoolVolume.toString()
                                .replace("f", "") + "            " + soundPoolTempo.toString()
                                .replace("f", "") + "\n" + padText1.replace("tr_8", "TR-8")
                                .replace("tr_909", "TR-909").replace("_", " ").uppercase()
                        findViewById<View>(R.id.include_view4).findViewById<TextView>(R.id.padText).text =
                            soundPoolVolume4.toString()
                                .replace("f", "") + "            " + soundPoolTempo4.toString()
                                .replace("f", "") + "\n" + padText4.replace("tr_8", "TR-8")
                                .replace("tr_909", "TR-909").replace("_", " ").uppercase()
                        findViewById<View>(R.id.include_view7).findViewById<TextView>(R.id.padText).text =
                            soundPoolVolume7.toString()
                                .replace("f", "") + "            " + soundPoolTempo7.toString()
                                .replace("f", "") + "\n" + padText7.replace("tr_8", "TR-8")
                                .replace("tr_909", "TR-909").replace("_", " ").uppercase()
                        sound1 = soundPool.load(assets.openFd("$padText1.ogg"), 1)
                        sound4 = soundPool.load(assets.openFd("$padText4.ogg"), 1)
                        sound7 = soundPool.load(assets.openFd("$padText7.ogg"), 1)
                        beat7Sequence()
                        changeSequence()
                        noteCount = 0
                        count = 5
                        bpm = 10
                        binding.editTitle.setText(actionTitle.replace("_", " ").uppercase(),
                            TextView.BufferType.NORMAL)
                        x31()
                        if (mode == 0) {
                            binding.sequencerView.visibility = View.GONE
                            binding.notes.visibility = View.GONE
                            binding.view.visibility = View.INVISIBLE
                        } else {
                            sequencerChange(View.GONE)
                        }
                        gridView2.visibility = View.INVISIBLE
                    }
                    "BEAT 6 BPM100" -> {
                        menuSwitch = true
                        invalidateOptionsMenu()
                        switch1 = 2
                        padText1 = "tr_909_clsd_hi_hat_01"
                        padText4 = "snare_drum_15"
                        padText7 = "tr_909_bass_drum_03"
                        padText10 = "tr_8_open_hi_hat_03"
                        actionTitle = "beat_6_bpm100"
                        binding.includeMainView.textView.text =
                            padText1.replace("tr_8", "TR-8").replace("tr_909", "TR-909")
                                .replace("_", " ").uppercase()
                        binding.includeMainView4.textView.text =
                            padText4.replace("tr_8", "TR-8").replace("tr_909", "TR-909")
                                .replace("_", " ").uppercase()
                        binding.includeMainView7.textView.text =
                            padText7.replace("tr_8", "TR-8").replace("tr_909", "TR-909")
                                .replace("_", " ").uppercase()
                        binding.includeMainView10.textView.text =
                            padText10.replace("tr_8", "TR-8").replace("tr_909", "TR-909")
                                .replace("_", " ").uppercase()
                        findViewById<View>(R.id.include_view).findViewById<TextView>(R.id.padText).text =
                            soundPoolVolume.toString()
                                .replace("f", "") + "            " + soundPoolTempo.toString()
                                .replace("f", "") + "\n" + padText1.replace("tr_8", "TR-8")
                                .replace("tr_909", "TR-909").replace("_", " ").uppercase()
                        findViewById<View>(R.id.include_view4).findViewById<TextView>(R.id.padText).text =
                            soundPoolVolume4.toString()
                                .replace("f", "") + "            " + soundPoolTempo4.toString()
                                .replace("f", "") + "\n" + padText4.replace("tr_8", "TR-8")
                                .replace("tr_909", "TR-909").replace("_", " ").uppercase()
                        findViewById<View>(R.id.include_view7).findViewById<TextView>(R.id.padText).text =
                            soundPoolVolume7.toString()
                                .replace("f", "") + "            " + soundPoolTempo7.toString()
                                .replace("f", "") + "\n" + padText7.replace("tr_8", "TR-8")
                                .replace("tr_909", "TR-909").replace("_", " ").uppercase()
                        findViewById<View>(R.id.include_view10).findViewById<TextView>(R.id.padText).text =
                            soundPoolVolume10.toString()
                                .replace("f", "") + "            " + soundPoolTempo10.toString()
                                .replace("f", "") + "\n" + padText10.replace("tr_8", "TR-8")
                                .replace("tr_909", "TR-909").replace("_", " ").uppercase()
                        sound1 = soundPool.load(assets.openFd("$padText1.ogg"), 1)
                        sound4 = soundPool.load(assets.openFd("$padText4.ogg"), 1)
                        sound7 = soundPool.load(assets.openFd("$padText7.ogg"), 1)
                        sound10 = soundPool.load(assets.openFd("$padText10.ogg"), 1)
                        beat8Sequence()
                        changeSequence()
                        noteCount = 0
                        count = 5
                        bpm = 10
                        binding.editTitle.setText(actionTitle.replace("_", " ").uppercase(),
                            TextView.BufferType.NORMAL)
                        x41()
                        if (mode == 0) {
                            binding.sequencerView.visibility = View.GONE
                            binding.notes.visibility = View.GONE
                            binding.view.visibility = View.INVISIBLE
                        } else {
                            sequencerChange(View.GONE)
                        }
                        gridView2.visibility = View.INVISIBLE
                    }
                    "BEAT 2 BPM120" -> {
                        menuSwitch = true
                        invalidateOptionsMenu()
                        switch1 = 2
                        padText1 = "bass_drum_short_01"
                        padText4 = "snare_drum_01"
                        actionTitle = "beat_2_bpm120"
                        binding.includeMainView.textView.text =
                            padText1.replace("tr_8", "TR-8").replace("tr_909", "TR-909")
                                .replace("_", " ").uppercase()
                        binding.includeMainView4.textView.text =
                            padText4.replace("tr_8", "TR-8").replace("tr_909", "TR-909")
                                .replace("_", " ").uppercase()
                        findViewById<View>(R.id.include_view).findViewById<TextView>(R.id.padText).text =
                            soundPoolVolume.toString()
                                .replace("f", "") + "            " + soundPoolTempo.toString()
                                .replace("f", "") + "\n" + padText1.replace("tr_8", "TR-8")
                                .replace("tr_909", "TR-909").replace("_", " ").uppercase()
                        findViewById<View>(R.id.include_view4).findViewById<TextView>(R.id.padText).text =
                            soundPoolVolume4.toString()
                                .replace("f", "") + "            " + soundPoolTempo4.toString()
                                .replace("f", "") + "\n" + padText4.replace("tr_8", "TR-8")
                                .replace("tr_909", "TR-909").replace("_", " ").uppercase()
                        sound1 = soundPool.load(assets.openFd("$padText1.ogg"), 1)
                        sound4 = soundPool.load(assets.openFd("$padText4.ogg"), 1)
                        beat9Sequence()
                        changeSequence()
                        noteCount = 0
                        count = 5
                        bpm = 10
                        binding.editTitle.setText(actionTitle.replace("_", " ").uppercase(),
                            TextView.BufferType.NORMAL)
                        x21()
                        if (mode == 0) {
                            binding.sequencerView.visibility = View.GONE
                            binding.notes.visibility = View.GONE
                            binding.view.visibility = View.INVISIBLE
                        } else {
                            sequencerChange(View.GONE)
                        }
                        gridView2.visibility = View.INVISIBLE
                    }
                }
            } else {
                when (position) {
                    0 -> {
                        gameCheck = "1"
                        menuSwitch = true
                        invalidateOptionsMenu()
                        switch1 = 2
                        padText1 = "bass_drum_short_01"
                        padText4 = "snare_drum_01"
                        actionTitle = "beat_1_bpm120"
                        binding.includeMainView.textView.text =
                            padText1.replace("tr_8", "TR-8").replace("tr_909", "TR-909")
                                .replace("_", " ").uppercase()
                        binding.includeMainView4.textView.text =
                            padText4.replace("tr_8", "TR-8").replace("tr_909", "TR-909")
                                .replace("_", " ").uppercase()
                        findViewById<View>(R.id.include_view).findViewById<TextView>(R.id.padText).text =
                            soundPoolVolume.toString()
                                .replace("f", "") + "            " + soundPoolTempo.toString()
                                .replace("f", "") + "\n" + padText1.replace("tr_8", "TR-8")
                                .replace("tr_909", "TR-909").replace("_", " ").uppercase()
                        findViewById<View>(R.id.include_view4).findViewById<TextView>(R.id.padText).text =
                            soundPoolVolume4.toString()
                                .replace("f", "") + "            " + soundPoolTempo4.toString()
                                .replace("f", "") + "\n" + padText4.replace("tr_8", "TR-8")
                                .replace("tr_909", "TR-909").replace("_", " ").uppercase()
                        sound1 = soundPool.load(assets.openFd("$padText1.ogg"), 1)
                        sound4 = soundPool.load(assets.openFd("$padText4.ogg"), 1)
                        beat1Sequence()
                        changeSequence()
                        noteCount = 0
                        count = 5
                        bpm = 10
                        binding.editTitle.setText(actionTitle.replace("_", " ").uppercase(),
                            TextView.BufferType.NORMAL)
                        x21()
                        gridView2.visibility = View.INVISIBLE
                    }
                    1 -> {
                        gameCheck = "2"
                        menuSwitch = true
                        invalidateOptionsMenu()
                        switch1 = 2
                        padText1 = "bass_drum_short_01"
                        padText4 = "snare_drum_01"
                        actionTitle = "beat_2_bpm120"
                        binding.includeMainView.textView.text =
                            padText1.replace("tr_8", "TR-8").replace("tr_909", "TR-909")
                                .replace("_", " ").uppercase()
                        binding.includeMainView4.textView.text =
                            padText4.replace("tr_8", "TR-8").replace("tr_909", "TR-909")
                                .replace("_", " ").uppercase()
                        findViewById<View>(R.id.include_view).findViewById<TextView>(R.id.padText).text =
                            soundPoolVolume.toString()
                                .replace("f", "") + "            " + soundPoolTempo.toString()
                                .replace("f", "") + "\n" + padText1.replace("tr_8", "TR-8")
                                .replace("tr_909", "TR-909").replace("_", " ").uppercase()
                        findViewById<View>(R.id.include_view4).findViewById<TextView>(R.id.padText).text =
                            soundPoolVolume4.toString()
                                .replace("f", "") + "            " + soundPoolTempo4.toString()
                                .replace("f", "") + "\n" + padText4.replace("tr_8", "TR-8")
                                .replace("tr_909", "TR-909").replace("_", " ").uppercase()
                        sound1 = soundPool.load(assets.openFd("$padText1.ogg"), 1)
                        sound4 = soundPool.load(assets.openFd("$padText4.ogg"), 1)
                        beat9Sequence()
                        changeSequence()
                        noteCount = 0
                        count = 5
                        bpm = 10
                        binding.editTitle.setText(actionTitle.replace("_", " ").uppercase(),
                            TextView.BufferType.NORMAL)
                        x21()
                        gridView2.visibility = View.INVISIBLE
                    }
                    2 -> {
                        gameCheck = "3"
                        menuSwitch = true
                        invalidateOptionsMenu()
                        switch1 = 2
                        padText1 = "tr_8_clsd_hi_hat_02"
                        padText4 = "snare_drum_11"
                        padText7 = "tr_909_bass_drum_02"
                        actionTitle = "hiphop_1_bpm80"
                        binding.includeMainView.textView.text =
                            padText1.replace("tr_8", "TR-8").replace("tr_909", "TR-909")
                                .replace("_", " ").uppercase()
                        binding.includeMainView4.textView.text =
                            padText4.replace("tr_8", "TR-8").replace("tr_909", "TR-909")
                                .replace("_", " ").uppercase()
                        binding.includeMainView7.textView.text =
                            padText7.replace("tr_8", "TR-8").replace("tr_909", "TR-909")
                                .replace("_", " ").uppercase()
                        findViewById<View>(R.id.include_view).findViewById<TextView>(R.id.padText).text =
                            soundPoolVolume.toString()
                                .replace("f", "") + "            " + soundPoolTempo.toString()
                                .replace("f", "") + "\n" + padText1.replace("tr_8", "TR-8")
                                .replace("tr_909", "TR-909").replace("_", " ").uppercase()
                        findViewById<View>(R.id.include_view4).findViewById<TextView>(R.id.padText).text =
                            soundPoolVolume4.toString()
                                .replace("f", "") + "            " + soundPoolTempo4.toString()
                                .replace("f", "") + "\n" + padText4.replace("tr_8", "TR-8")
                                .replace("tr_909", "TR-909").replace("_", " ").uppercase()
                        findViewById<View>(R.id.include_view7).findViewById<TextView>(R.id.padText).text =
                            soundPoolVolume7.toString()
                                .replace("f", "") + "            " + soundPoolTempo7.toString()
                                .replace("f", "") + "\n" + padText7.replace("tr_8", "TR-8")
                                .replace("tr_909", "TR-909").replace("_", " ").uppercase()
                        sound1 = soundPool.load(assets.openFd("$padText1.ogg"), 1)
                        sound4 = soundPool.load(assets.openFd("$padText4.ogg"), 1)
                        sound7 = soundPool.load(assets.openFd("$padText7.ogg"), 1)
                        hiphopSequence()
                        changeSequence()
                        noteCount = 0
                        count = 5
                        bpm = 10
                        binding.editTitle.setText(actionTitle.replace("_", " ").uppercase(),
                            TextView.BufferType.NORMAL)
                        x31()
                        gridView2.visibility = View.INVISIBLE
                    }
                    3 -> {
                        gameCheck = "4"
                        menuSwitch = true
                        invalidateOptionsMenu()
                        switch1 = 2
                        padText1 = "bass_drum_short_08"
                        padText4 = "snare_drum_05"
                        padText7 = "clap_08"
                        actionTitle = "reggaeton_1_bpm90"
                        binding.includeMainView.textView.text =
                            padText1.replace("tr_8", "TR-8").replace("tr_909", "TR-909")
                                .replace("_", " ").uppercase()
                        binding.includeMainView4.textView.text =
                            padText4.replace("tr_8", "TR-8").replace("tr_909", "TR-909")
                                .replace("_", " ").uppercase()
                        binding.includeMainView7.textView.text =
                            padText7.replace("tr_8", "TR-8").replace("tr_909", "TR-909")
                                .replace("_", " ").uppercase()
                        findViewById<View>(R.id.include_view).findViewById<TextView>(R.id.padText).text =
                            soundPoolVolume.toString()
                                .replace("f", "") + "            " + soundPoolTempo.toString()
                                .replace("f", "") + "\n" + padText1.replace("tr_8", "TR-8")
                                .replace("tr_909", "TR-909").replace("_", " ").uppercase()
                        findViewById<View>(R.id.include_view4).findViewById<TextView>(R.id.padText).text =
                            soundPoolVolume4.toString()
                                .replace("f", "") + "            " + soundPoolTempo4.toString()
                                .replace("f", "") + "\n" + padText4.replace("tr_8", "TR-8")
                                .replace("tr_909", "TR-909").replace("_", " ").uppercase()
                        findViewById<View>(R.id.include_view7).findViewById<TextView>(R.id.padText).text =
                            soundPoolVolume7.toString()
                                .replace("f", "") + "            " + soundPoolTempo7.toString()
                                .replace("f", "") + "\n" + padText7.replace("tr_8", "TR-8")
                                .replace("tr_909", "TR-909").replace("_", " ").uppercase()
                        sound1 = soundPool.load(assets.openFd("$padText1.ogg"), 1)
                        sound4 = soundPool.load(assets.openFd("$padText4.ogg"), 1)
                        sound7 = soundPool.load(assets.openFd("$padText7.ogg"), 1)
                        reggaetonSequence()
                        changeSequence()
                        noteCount = 0
                        count = 5
                        bpm = 10
                        binding.editTitle.setText(actionTitle.replace("_", " ").uppercase(),
                            TextView.BufferType.NORMAL)
                        x31()
                        gridView2.visibility = View.INVISIBLE
                    }
                    4 -> {
                        gameCheck = "5"
                        menuSwitch = true
                        invalidateOptionsMenu()
                        switch1 = 2
                        padText1 = "clsd_hi_hat_01"
                        padText4 = "snare_drum_05"
                        padText7 = "tr_909_bass_drum_02"
                        actionTitle = "beat_3_bpm110"
                        binding.includeMainView.textView.text =
                            padText1.replace("tr_8", "TR-8").replace("tr_909", "TR-909")
                                .replace("_", " ").uppercase()
                        binding.includeMainView4.textView.text =
                            padText4.replace("tr_8", "TR-8").replace("tr_909", "TR-909")
                                .replace("_", " ").uppercase()
                        binding.includeMainView7.textView.text =
                            padText7.replace("tr_8", "TR-8").replace("tr_909", "TR-909")
                                .replace("_", " ").uppercase()
                        findViewById<View>(R.id.include_view).findViewById<TextView>(R.id.padText).text =
                            soundPoolVolume.toString()
                                .replace("f", "") + "            " + soundPoolTempo.toString()
                                .replace("f", "") + "\n" + padText1.replace("tr_8", "TR-8")
                                .replace("tr_909", "TR-909").replace("_", " ").uppercase()
                        findViewById<View>(R.id.include_view4).findViewById<TextView>(R.id.padText).text =
                            soundPoolVolume4.toString()
                                .replace("f", "") + "            " + soundPoolTempo4.toString()
                                .replace("f", "") + "\n" + padText4.replace("tr_8", "TR-8")
                                .replace("tr_909", "TR-909").replace("_", " ").uppercase()
                        findViewById<View>(R.id.include_view7).findViewById<TextView>(R.id.padText).text =
                            soundPoolVolume7.toString()
                                .replace("f", "") + "            " + soundPoolTempo7.toString()
                                .replace("f", "") + "\n" + padText7.replace("tr_8", "TR-8")
                                .replace("tr_909", "TR-909").replace("_", " ").uppercase()
                        sound1 = soundPool.load(assets.openFd("$padText1.ogg"), 1)
                        sound4 = soundPool.load(assets.openFd("$padText4.ogg"), 1)
                        sound7 = soundPool.load(assets.openFd("$padText7.ogg"), 1)
                        beat5Sequence()
                        changeSequence()
                        noteCount = 0
                        count = 5
                        bpm = 10
                        binding.editTitle.setText(actionTitle.replace("_", " ").uppercase(),
                            TextView.BufferType.NORMAL)
                        x31()
                        gridView2.visibility = View.INVISIBLE
                    }
                    5 -> {
                        gameCheck = "6"
                        menuSwitch = true
                        invalidateOptionsMenu()
                        switch1 = 2
                        padText1 = "tr_909_bass_drum_02"
                        padText4 = "tr_8_snare_drum_03"
                        padText7 = "open_hi_hat_08"
                        actionTitle = "beat_4_bpm100"
                        binding.includeMainView.textView.text =
                            padText1.replace("tr_8", "TR-8").replace("tr_909", "TR-909")
                                .replace("_", " ").uppercase()
                        binding.includeMainView4.textView.text =
                            padText4.replace("tr_8", "TR-8").replace("tr_909", "TR-909")
                                .replace("_", " ").uppercase()
                        binding.includeMainView7.textView.text =
                            padText7.replace("tr_8", "TR-8").replace("tr_909", "TR-909")
                                .replace("_", " ").uppercase()
                        findViewById<View>(R.id.include_view).findViewById<TextView>(R.id.padText).text =
                            soundPoolVolume.toString()
                                .replace("f", "") + "            " + soundPoolTempo.toString()
                                .replace("f", "") + "\n" + padText1.replace("tr_8", "TR-8")
                                .replace("tr_909", "TR-909").replace("_", " ").uppercase()
                        findViewById<View>(R.id.include_view4).findViewById<TextView>(R.id.padText).text =
                            soundPoolVolume4.toString()
                                .replace("f", "") + "            " + soundPoolTempo4.toString()
                                .replace("f", "") + "\n" + padText4.replace("tr_8", "TR-8")
                                .replace("tr_909", "TR-909").replace("_", " ").uppercase()
                        findViewById<View>(R.id.include_view7).findViewById<TextView>(R.id.padText).text =
                            soundPoolVolume7.toString()
                                .replace("f", "") + "            " + soundPoolTempo7.toString()
                                .replace("f", "") + "\n" + padText7.replace("tr_8", "TR-8")
                                .replace("tr_909", "TR-909").replace("_", " ").uppercase()
                        sound1 = soundPool.load(assets.openFd("$padText1.ogg"), 1)
                        sound4 = soundPool.load(assets.openFd("$padText4.ogg"), 1)
                        sound7 = soundPool.load(assets.openFd("$padText7.ogg"), 1)
                        beat6Sequence()
                        changeSequence()
                        noteCount = 0
                        count = 5
                        bpm = 10
                        binding.editTitle.setText(actionTitle.replace("_", " ").uppercase(),
                            TextView.BufferType.NORMAL)
                        x31()
                        gridView2.visibility = View.INVISIBLE
                    }
                    6 -> {
                        gameCheck = "7"
                        menuSwitch = true
                        invalidateOptionsMenu()
                        switch1 = 2
                        padText1 = "clsd_hi_hat_03"
                        padText4 = "snare_drum_02"
                        padText7 = "bass_drum_short_01"
                        actionTitle = "beat_5_bpm90"
                        binding.includeMainView.textView.text =
                            padText1.replace("tr_8", "TR-8").replace("tr_909", "TR-909")
                                .replace("_", " ").uppercase()
                        binding.includeMainView4.textView.text =
                            padText4.replace("tr_8", "TR-8").replace("tr_909", "TR-909")
                                .replace("_", " ").uppercase()
                        binding.includeMainView7.textView.text =
                            padText7.replace("tr_8", "TR-8").replace("tr_909", "TR-909")
                                .replace("_", " ").uppercase()
                        findViewById<View>(R.id.include_view).findViewById<TextView>(R.id.padText).text =
                            soundPoolVolume.toString()
                                .replace("f", "") + "            " + soundPoolTempo.toString()
                                .replace("f", "") + "\n" + padText1.replace("tr_8", "TR-8")
                                .replace("tr_909", "TR-909").replace("_", " ").uppercase()
                        findViewById<View>(R.id.include_view4).findViewById<TextView>(R.id.padText).text =
                            soundPoolVolume4.toString()
                                .replace("f", "") + "            " + soundPoolTempo4.toString()
                                .replace("f", "") + "\n" + padText4.replace("tr_8", "TR-8")
                                .replace("tr_909", "TR-909").replace("_", " ").uppercase()
                        findViewById<View>(R.id.include_view7).findViewById<TextView>(R.id.padText).text =
                            soundPoolVolume7.toString()
                                .replace("f", "") + "            " + soundPoolTempo7.toString()
                                .replace("f", "") + "\n" + padText7.replace("tr_8", "TR-8")
                                .replace("tr_909", "TR-909").replace("_", " ").uppercase()
                        sound1 = soundPool.load(assets.openFd("$padText1.ogg"), 1)
                        sound4 = soundPool.load(assets.openFd("$padText4.ogg"), 1)
                        sound7 = soundPool.load(assets.openFd("$padText7.ogg"), 1)
                        beat7Sequence()
                        changeSequence()
                        noteCount = 0
                        count = 5
                        bpm = 10
                        binding.editTitle.setText(actionTitle.replace("_", " ").uppercase(),
                            TextView.BufferType.NORMAL)
                        x31()
                        gridView2.visibility = View.INVISIBLE
                    }
                    7 -> {
                        gameCheck = "8"
                        menuSwitch = true
                        invalidateOptionsMenu()
                        switch1 = 2
                        padText1 = "clsd_hi_hat_01"
                        padText4 = "snare_drum_14"
                        padText7 = "bass_drum_short_01"
                        padText10 = "clap_01"
                        actionTitle = "electronica_1_bpm90"
                        binding.includeMainView.textView.text =
                            padText1.replace("tr_8", "TR-8").replace("tr_909", "TR-909")
                                .replace("_", " ").uppercase()
                        binding.includeMainView4.textView.text =
                            padText4.replace("tr_8", "TR-8").replace("tr_909", "TR-909")
                                .replace("_", " ").uppercase()
                        binding.includeMainView7.textView.text =
                            padText7.replace("tr_8", "TR-8").replace("tr_909", "TR-909")
                                .replace("_", " ").uppercase()
                        binding.includeMainView10.textView.text =
                            padText10.replace("tr_8", "TR-8").replace("tr_909", "TR-909")
                                .replace("_", " ").uppercase()
                        findViewById<View>(R.id.include_view).findViewById<TextView>(R.id.padText).text =
                            soundPoolVolume.toString()
                                .replace("f", "") + "            " + soundPoolTempo.toString()
                                .replace("f", "") + "\n" + padText1.replace("tr_8", "TR-8")
                                .replace("tr_909", "TR-909").replace("_", " ").uppercase()
                        findViewById<View>(R.id.include_view4).findViewById<TextView>(R.id.padText).text =
                            soundPoolVolume4.toString()
                                .replace("f", "") + "            " + soundPoolTempo4.toString()
                                .replace("f", "") + "\n" + padText4.replace("tr_8", "TR-8")
                                .replace("tr_909", "TR-909").replace("_", " ").uppercase()
                        findViewById<View>(R.id.include_view7).findViewById<TextView>(R.id.padText).text =
                            soundPoolVolume7.toString()
                                .replace("f", "") + "            " + soundPoolTempo7.toString()
                                .replace("f", "") + "\n" + padText7.replace("tr_8", "TR-8")
                                .replace("tr_909", "TR-909").replace("_", " ").uppercase()
                        findViewById<View>(R.id.include_view10).findViewById<TextView>(R.id.padText).text =
                            soundPoolVolume10.toString()
                                .replace("f", "") + "            " + soundPoolTempo10.toString()
                                .replace("f", "") + "\n" + padText10.replace("tr_8", "TR-8")
                                .replace("tr_909", "TR-909").replace("_", " ").uppercase()
                        sound1 = soundPool.load(assets.openFd("$padText1.ogg"), 1)
                        sound4 = soundPool.load(assets.openFd("$padText4.ogg"), 1)
                        sound7 = soundPool.load(assets.openFd("$padText7.ogg"), 1)
                        sound10 = soundPool.load(assets.openFd("$padText10.ogg"), 1)
                        electronicaSequence()
                        changeSequence()
                        noteCount = 0
                        count = 5
                        bpm = 10
                        binding.editTitle.setText(actionTitle.replace("_", " ").uppercase(),
                            TextView.BufferType.NORMAL)
                        x41()
                        gridView2.visibility = View.INVISIBLE
                    }
                    8 -> {
                        gameCheck = "9"
                        menuSwitch = true
                        invalidateOptionsMenu()
                        switch1 = 2
                        padText1 = "tr_909_clsd_hi_hat_01"
                        padText4 = "snare_drum_15"
                        padText7 = "tr_909_bass_drum_03"
                        padText10 = "tr_8_open_hi_hat_03"
                        actionTitle = "beat_6_bpm100"
                        binding.includeMainView.textView.text =
                            padText1.replace("tr_8", "TR-8").replace("tr_909", "TR-909")
                                .replace("_", " ").uppercase()
                        binding.includeMainView4.textView.text =
                            padText4.replace("tr_8", "TR-8").replace("tr_909", "TR-909")
                                .replace("_", " ").uppercase()
                        binding.includeMainView7.textView.text =
                            padText7.replace("tr_8", "TR-8").replace("tr_909", "TR-909")
                                .replace("_", " ").uppercase()
                        binding.includeMainView10.textView.text =
                            padText10.replace("tr_8", "TR-8").replace("tr_909", "TR-909")
                                .replace("_", " ").uppercase()
                        findViewById<View>(R.id.include_view).findViewById<TextView>(R.id.padText).text =
                            soundPoolVolume.toString()
                                .replace("f", "") + "            " + soundPoolTempo.toString()
                                .replace("f", "") + "\n" + padText1.replace("tr_8", "TR-8")
                                .replace("tr_909", "TR-909").replace("_", " ").uppercase()
                        findViewById<View>(R.id.include_view4).findViewById<TextView>(R.id.padText).text =
                            soundPoolVolume4.toString()
                                .replace("f", "") + "            " + soundPoolTempo4.toString()
                                .replace("f", "") + "\n" + padText4.replace("tr_8", "TR-8")
                                .replace("tr_909", "TR-909").replace("_", " ").uppercase()
                        findViewById<View>(R.id.include_view7).findViewById<TextView>(R.id.padText).text =
                            soundPoolVolume7.toString()
                                .replace("f", "") + "            " + soundPoolTempo7.toString()
                                .replace("f", "") + "\n" + padText7.replace("tr_8", "TR-8")
                                .replace("tr_909", "TR-909").replace("_", " ").uppercase()
                        findViewById<View>(R.id.include_view10).findViewById<TextView>(R.id.padText).text =
                            soundPoolVolume10.toString()
                                .replace("f", "") + "            " + soundPoolTempo10.toString()
                                .replace("f", "") + "\n" + padText10.replace("tr_8", "TR-8")
                                .replace("tr_909", "TR-909").replace("_", " ").uppercase()
                        sound1 = soundPool.load(assets.openFd("$padText1.ogg"), 1)
                        sound4 = soundPool.load(assets.openFd("$padText4.ogg"), 1)
                        sound7 = soundPool.load(assets.openFd("$padText7.ogg"), 1)
                        sound10 = soundPool.load(assets.openFd("$padText10.ogg"), 1)
                        beat8Sequence()
                        changeSequence()
                        noteCount = 0
                        count = 5
                        bpm = 10
                        binding.editTitle.setText(actionTitle.replace("_", " ").uppercase(),
                            TextView.BufferType.NORMAL)
                        x41()
                        gridView2.visibility = View.INVISIBLE
                    }
                    9 -> {
                        gameCheck = "10"
                        menuSwitch = true
                        invalidateOptionsMenu()
                        switch1 = 2
                        padText1 = "clsd_hi_hat_03"
                        padText4 = "tr_8_snare_drum_03"
                        padText7 = "tr_909_bass_drum_01"
                        padText10 = "clap_05"
                        actionTitle = "dubstep_1_bpm140"
                        binding.includeMainView.textView.text =
                            padText1.replace("tr_8", "TR-8").replace("tr_909", "TR-909")
                                .replace("_", " ").uppercase()
                        binding.includeMainView4.textView.text =
                            padText4.replace("tr_8", "TR-8").replace("tr_909", "TR-909")
                                .replace("_", " ").uppercase()
                        binding.includeMainView7.textView.text =
                            padText7.replace("tr_8", "TR-8").replace("tr_909", "TR-909")
                                .replace("_", " ").uppercase()
                        binding.includeMainView10.textView.text =
                            padText10.replace("tr_8", "TR-8").replace("tr_909", "TR-909")
                                .replace("_", " ").uppercase()
                        findViewById<View>(R.id.include_view).findViewById<TextView>(R.id.padText).text =
                            soundPoolVolume.toString()
                                .replace("f", "") + "            " + soundPoolTempo.toString()
                                .replace("f", "") + "\n" + padText1.replace("tr_8", "TR-8")
                                .replace("tr_909", "TR-909").replace("_", " ").uppercase()
                        findViewById<View>(R.id.include_view4).findViewById<TextView>(R.id.padText).text =
                            soundPoolVolume4.toString()
                                .replace("f", "") + "            " + soundPoolTempo4.toString()
                                .replace("f", "") + "\n" + padText4.replace("tr_8", "TR-8")
                                .replace("tr_909", "TR-909").replace("_", " ").uppercase()
                        findViewById<View>(R.id.include_view7).findViewById<TextView>(R.id.padText).text =
                            soundPoolVolume7.toString()
                                .replace("f", "") + "            " + soundPoolTempo7.toString()
                                .replace("f", "") + "\n" + padText7.replace("tr_8", "TR-8")
                                .replace("tr_909", "TR-909").replace("_", " ").uppercase()
                        findViewById<View>(R.id.include_view10).findViewById<TextView>(R.id.padText).text =
                            soundPoolVolume10.toString()
                                .replace("f", "") + "            " + soundPoolTempo10.toString()
                                .replace("f", "") + "\n" + padText10.replace("tr_8", "TR-8")
                                .replace("tr_909", "TR-909").replace("_", " ").uppercase()
                        sound1 = soundPool.load(assets.openFd("$padText1.ogg"), 1)
                        sound4 = soundPool.load(assets.openFd("$padText4.ogg"), 1)
                        sound7 = soundPool.load(assets.openFd("$padText7.ogg"), 1)
                        sound10 = soundPool.load(assets.openFd("$padText10.ogg"), 1)
                        dubstepSequence()
                        changeSequence()
                        noteCount = 0
                        count = 5
                        bpm = 10
                        binding.editTitle.setText(actionTitle.replace("_", " ").uppercase(),
                            TextView.BufferType.NORMAL)
                        x41()
                        gridView2.visibility = View.INVISIBLE
                    }
                    10 -> {
                        gameCheck = "11"
                        menuSwitch = true
                        invalidateOptionsMenu()
                        switch1 = 2
                        padText1 = "tr_909_clsd_hi_hat_02"
                        padText4 = "tr_909_open_hi_hat_01"
                        padText7 = "snare_drum_14"
                        padText10 = "bass_drum_short_08"
                        padText13 = "clap_01"
                        actionTitle = "house_1_bpm130"
                        binding.includeMainView.textView.text =
                            padText1.replace("tr_8", "TR-8").replace("tr_909", "TR-909")
                                .replace("_", " ").uppercase()
                        binding.includeMainView4.textView.text =
                            padText4.replace("tr_8", "TR-8").replace("tr_909", "TR-909")
                                .replace("_", " ").uppercase()
                        binding.includeMainView7.textView.text =
                            padText7.replace("tr_8", "TR-8").replace("tr_909", "TR-909")
                                .replace("_", " ").uppercase()
                        binding.includeMainView10.textView.text =
                            padText10.replace("tr_8", "TR-8").replace("tr_909", "TR-909")
                                .replace("_", " ").uppercase()
                        binding.includeMainView13.textView.text =
                            padText13.replace("tr_8", "TR-8").replace("tr_909", "TR-909")
                                .replace("_", " ").uppercase()
                        findViewById<View>(R.id.include_view).findViewById<TextView>(R.id.padText).text =
                            soundPoolVolume.toString()
                                .replace("f", "") + "            " + soundPoolTempo.toString()
                                .replace("f", "") + "\n" + padText1.replace("tr_8", "TR-8")
                                .replace("tr_909", "TR-909").replace("_", " ").uppercase()
                        findViewById<View>(R.id.include_view4).findViewById<TextView>(R.id.padText).text =
                            soundPoolVolume4.toString()
                                .replace("f", "") + "            " + soundPoolTempo4.toString()
                                .replace("f", "") + "\n" + padText4.replace("tr_8", "TR-8")
                                .replace("tr_909", "TR-909").replace("_", " ").uppercase()
                        findViewById<View>(R.id.include_view7).findViewById<TextView>(R.id.padText).text =
                            soundPoolVolume7.toString()
                                .replace("f", "") + "            " + soundPoolTempo7.toString()
                                .replace("f", "") + "\n" + padText7.replace("tr_8", "TR-8")
                                .replace("tr_909", "TR-909").replace("_", " ").uppercase()
                        findViewById<View>(R.id.include_view10).findViewById<TextView>(R.id.padText).text =
                            soundPoolVolume10.toString()
                                .replace("f", "") + "            " + soundPoolTempo10.toString()
                                .replace("f", "") + "\n" + padText10.replace("tr_8", "TR-8")
                                .replace("tr_909", "TR-909").replace("_", " ").uppercase()
                        findViewById<View>(R.id.include_view13).findViewById<TextView>(R.id.padText).text =
                            soundPoolVolume13.toString()
                                .replace("f", "") + "            " + soundPoolTempo13.toString()
                                .replace("f", "") + "\n" + padText13.replace("tr_8", "TR-8")
                                .replace("tr_909", "TR-909").replace("_", " ").uppercase()
                        sound1 = soundPool.load(assets.openFd("$padText1.ogg"), 1)
                        sound4 = soundPool.load(assets.openFd("$padText4.ogg"), 1)
                        sound7 = soundPool.load(assets.openFd("$padText7.ogg"), 1)
                        sound10 = soundPool.load(assets.openFd("$padText10.ogg"), 1)
                        sound13 = soundPool.load(assets.openFd("$padText13.ogg"), 1)
                        noteCount = 0
                        count = 5
                        bpm = 10
                        binding.editTitle.setText(actionTitle.replace("_", " ").uppercase(),
                            TextView.BufferType.NORMAL)
                        houseSequence()
                        changeSequence()
                        x51()
                        gridView2.visibility = View.INVISIBLE
                    }
                    11 -> {
                        gameCheck = "12"
                        menuSwitch = true
                        invalidateOptionsMenu()
                        switch1 = 2
                        padText1 = "clsd_hi_hat_03"
                        padText4 = "open_hi_hat_11"
                        padText7 = "snare_drum_11"
                        padText10 = "bass_drum_long_08"
                        padText13 = "clap_08"
                        actionTitle = "disco_1_bpm110"
                        binding.includeMainView.textView.text =
                            padText1.replace("tr_8", "TR-8").replace("tr_909", "TR-909")
                                .replace("_", " ").uppercase()
                        binding.includeMainView4.textView.text =
                            padText4.replace("tr_8", "TR-8").replace("tr_909", "TR-909")
                                .replace("_", " ").uppercase()
                        binding.includeMainView7.textView.text =
                            padText7.replace("tr_8", "TR-8").replace("tr_909", "TR-909")
                                .replace("_", " ").uppercase()
                        binding.includeMainView10.textView.text =
                            padText10.replace("tr_8", "TR-8").replace("tr_909", "TR-909")
                                .replace("_", " ").uppercase()
                        binding.includeMainView13.textView.text =
                            padText13.replace("tr_8", "TR-8").replace("tr_909", "TR-909")
                                .replace("_", " ").uppercase()
                        findViewById<View>(R.id.include_view).findViewById<TextView>(R.id.padText).text =
                            soundPoolVolume.toString()
                                .replace("f", "") + "            " + soundPoolTempo.toString()
                                .replace("f", "") + "\n" + padText1.replace("tr_8", "TR-8")
                                .replace("tr_909", "TR-909").replace("_", " ").uppercase()
                        findViewById<View>(R.id.include_view4).findViewById<TextView>(R.id.padText).text =
                            soundPoolVolume4.toString()
                                .replace("f", "") + "            " + soundPoolTempo4.toString()
                                .replace("f", "") + "\n" + padText4.replace("tr_8", "TR-8")
                                .replace("tr_909", "TR-909").replace("_", " ").uppercase()
                        findViewById<View>(R.id.include_view7).findViewById<TextView>(R.id.padText).text =
                            soundPoolVolume7.toString()
                                .replace("f", "") + "            " + soundPoolTempo7.toString()
                                .replace("f", "") + "\n" + padText7.replace("tr_8", "TR-8")
                                .replace("tr_909", "TR-909").replace("_", " ").uppercase()
                        findViewById<View>(R.id.include_view10).findViewById<TextView>(R.id.padText).text =
                            soundPoolVolume10.toString()
                                .replace("f", "") + "            " + soundPoolTempo10.toString()
                                .replace("f", "") + "\n" + padText10.replace("tr_8", "TR-8")
                                .replace("tr_909", "TR-909").replace("_", " ").uppercase()
                        findViewById<View>(R.id.include_view13).findViewById<TextView>(R.id.padText).text =
                            soundPoolVolume13.toString()
                                .replace("f", "") + "            " + soundPoolTempo13.toString()
                                .replace("f", "") + "\n" + padText13.replace("tr_8", "TR-8")
                                .replace("tr_909", "TR-909").replace("_", " ").uppercase()
                        sound1 = soundPool.load(assets.openFd("$padText1.ogg"), 1)
                        sound4 = soundPool.load(assets.openFd("$padText4.ogg"), 1)
                        sound7 = soundPool.load(assets.openFd("$padText7.ogg"), 1)
                        sound10 = soundPool.load(assets.openFd("$padText10.ogg"), 1)
                        sound13 = soundPool.load(assets.openFd("$padText13.ogg"), 1)
                        discoSequence()
                        changeSequence()
                        noteCount = 0
                        count = 5
                        bpm = 10
                        binding.editTitle.setText(actionTitle.replace("_", " ").uppercase(),
                            TextView.BufferType.NORMAL)
                        x51()
                        gridView2.visibility = View.INVISIBLE
                    }
                    12 -> {
                        gameCheck = "13"
                        menuSwitch = true
                        invalidateOptionsMenu()
                        switch1 = 2
                        padText1 = "clsd_hi_hat_03"
                        padText4 = "open_hi_hat_04"
                        padText7 = "tr_8_snare_drum_03"
                        padText10 = "tr_909_bass_drum_01"
                        padText13 = "clap_01"
                        actionTitle = "techno_1_bpm110"
                        binding.includeMainView.textView.text =
                            padText1.replace("tr_8", "TR-8").replace("tr_909", "TR-909")
                                .replace("_", " ").uppercase()
                        binding.includeMainView4.textView.text =
                            padText4.replace("tr_8", "TR-8").replace("tr_909", "TR-909")
                                .replace("_", " ").uppercase()
                        binding.includeMainView7.textView.text =
                            padText7.replace("tr_8", "TR-8").replace("tr_909", "TR-909")
                                .replace("_", " ").uppercase()
                        binding.includeMainView10.textView.text =
                            padText10.replace("tr_8", "TR-8").replace("tr_909", "TR-909")
                                .replace("_", " ").uppercase()
                        binding.includeMainView13.textView.text =
                            padText13.replace("tr_8", "TR-8").replace("tr_909", "TR-909")
                                .replace("_", " ").uppercase()
                        findViewById<View>(R.id.include_view).findViewById<TextView>(R.id.padText).text =
                            soundPoolVolume.toString()
                                .replace("f", "") + "            " + soundPoolTempo.toString()
                                .replace("f", "") + "\n" + padText1.replace("tr_8", "TR-8")
                                .replace("tr_909", "TR-909").replace("_", " ").uppercase()
                        findViewById<View>(R.id.include_view4).findViewById<TextView>(R.id.padText).text =
                            soundPoolVolume4.toString()
                                .replace("f", "") + "            " + soundPoolTempo4.toString()
                                .replace("f", "") + "\n" + padText4.replace("tr_8", "TR-8")
                                .replace("tr_909", "TR-909").replace("_", " ").uppercase()
                        findViewById<View>(R.id.include_view7).findViewById<TextView>(R.id.padText).text =
                            soundPoolVolume7.toString()
                                .replace("f", "") + "            " + soundPoolTempo7.toString()
                                .replace("f", "") + "\n" + padText7.replace("tr_8", "TR-8")
                                .replace("tr_909", "TR-909").replace("_", " ").uppercase()
                        findViewById<View>(R.id.include_view10).findViewById<TextView>(R.id.padText).text =
                            soundPoolVolume10.toString()
                                .replace("f", "") + "            " + soundPoolTempo10.toString()
                                .replace("f", "") + "\n" + padText10.replace("tr_8", "TR-8")
                                .replace("tr_909", "TR-909").replace("_", " ").uppercase()
                        findViewById<View>(R.id.include_view13).findViewById<TextView>(R.id.padText).text =
                            soundPoolVolume13.toString()
                                .replace("f", "") + "            " + soundPoolTempo13.toString()
                                .replace("f", "") + "\n" + padText13.replace("tr_8", "TR-8")
                                .replace("tr_909", "TR-909").replace("_", " ").uppercase()
                        sound1 = soundPool.load(assets.openFd("$padText1.ogg"), 1)
                        sound4 = soundPool.load(assets.openFd("$padText4.ogg"), 1)
                        sound7 = soundPool.load(assets.openFd("$padText7.ogg"), 1)
                        sound10 = soundPool.load(assets.openFd("$padText10.ogg"), 1)
                        sound13 = soundPool.load(assets.openFd("$padText13.ogg"), 1)
                        technoSequence()
                        changeSequence()
                        noteCount = 0
                        count = 5
                        bpm = 10
                        binding.editTitle.setText(actionTitle.replace("_", " ").uppercase(),
                            TextView.BufferType.NORMAL)
                        x51()
                        gridView2.visibility = View.INVISIBLE
                    }
                    13 -> {
                        gameCheck = "14"
                        menuSwitch = true
                        invalidateOptionsMenu()
                        switch1 = 2
                        padText1 = "clsd_hi_hat_09"
                        padText4 = "maracas_03"
                        padText7 = "snare_drum_11"
                        padText10 = "bass_drum_long_08"
                        actionTitle = "eurobeat_1_bpm130"
                        binding.includeMainView.textView.text =
                            padText1.replace("tr_8", "TR-8").replace("tr_909", "TR-909")
                                .replace("_", " ").uppercase()
                        binding.includeMainView4.textView.text =
                            padText4.replace("tr_8", "TR-8").replace("tr_909", "TR-909")
                                .replace("_", " ").uppercase()
                        binding.includeMainView7.textView.text =
                            padText7.replace("tr_8", "TR-8").replace("tr_909", "TR-909")
                                .replace("_", " ").uppercase()
                        binding.includeMainView10.textView.text =
                            padText10.replace("tr_8", "TR-8").replace("tr_909", "TR-909")
                                .replace("_", " ").uppercase()
                        findViewById<View>(R.id.include_view).findViewById<TextView>(R.id.padText).text =
                            soundPoolVolume.toString()
                                .replace("f", "") + "            " + soundPoolTempo.toString()
                                .replace("f", "") + "\n" + padText1.replace("tr_8", "TR-8")
                                .replace("tr_909", "TR-909").replace("_", " ").uppercase()
                        findViewById<View>(R.id.include_view4).findViewById<TextView>(R.id.padText).text =
                            soundPoolVolume4.toString()
                                .replace("f", "") + "            " + soundPoolTempo4.toString()
                                .replace("f", "") + "\n" + padText4.replace("tr_8", "TR-8")
                                .replace("tr_909", "TR-909").replace("_", " ").uppercase()
                        findViewById<View>(R.id.include_view7).findViewById<TextView>(R.id.padText).text =
                            soundPoolVolume7.toString()
                                .replace("f", "") + "            " + soundPoolTempo7.toString()
                                .replace("f", "") + "\n" + padText7.replace("tr_8", "TR-8")
                                .replace("tr_909", "TR-909").replace("_", " ").uppercase()
                        findViewById<View>(R.id.include_view10).findViewById<TextView>(R.id.padText).text =
                            soundPoolVolume10.toString()
                                .replace("f", "") + "            " + soundPoolTempo10.toString()
                                .replace("f", "") + "\n" + padText10.replace("tr_8", "TR-8")
                                .replace("tr_909", "TR-909").replace("_", " ").uppercase()
                        sound1 = soundPool.load(assets.openFd("$padText1.ogg"), 1)
                        sound4 = soundPool.load(assets.openFd("$padText4.ogg"), 1)
                        sound7 = soundPool.load(assets.openFd("$padText7.ogg"), 1)
                        sound10 = soundPool.load(assets.openFd("$padText10.ogg"), 1)
                        eurobeatSequence()
                        changeSequence()
                        noteCount = 0
                        count = 5
                        bpm = 10
                        binding.editTitle.setText(actionTitle.replace("_", " ").uppercase(),
                            TextView.BufferType.NORMAL)
                        x41()
                        gridView2.visibility = View.INVISIBLE
                    }
                    14 -> {
                        gameCheck = "15"
                        menuSwitch = true
                        invalidateOptionsMenu()
                        switch1 = 2
                        padText1 = "tr_909_clsd_hi_hat_02"
                        padText4 = "tr_909_open_hi_hat_01"
                        padText7 = "snare_drum_02"
                        padText10 = "tr_909_bass_drum_02"
                        padText13 = "tr_909_clap"
                        actionTitle = "two_step_1_bpm100"
                        binding.includeMainView.textView.text =
                            padText1.replace("tr_8", "TR-8").replace("tr_909", "TR-909")
                                .replace("_", " ").uppercase()
                        binding.includeMainView4.textView.text =
                            padText4.replace("tr_8", "TR-8").replace("tr_909", "TR-909")
                                .replace("_", " ").uppercase()
                        binding.includeMainView7.textView.text =
                            padText7.replace("tr_8", "TR-8").replace("tr_909", "TR-909")
                                .replace("_", " ").uppercase()
                        binding.includeMainView10.textView.text =
                            padText10.replace("tr_8", "TR-8").replace("tr_909", "TR-909")
                                .replace("_", " ").uppercase()
                        binding.includeMainView13.textView.text =
                            padText13.replace("tr_8", "TR-8").replace("tr_909", "TR-909")
                                .replace("_", " ").uppercase()
                        findViewById<View>(R.id.include_view).findViewById<TextView>(R.id.padText).text =
                            soundPoolVolume.toString()
                                .replace("f", "") + "            " + soundPoolTempo.toString()
                                .replace("f", "") + "\n" + padText1.replace("tr_8", "TR-8")
                                .replace("tr_909", "TR-909").replace("_", " ").uppercase()
                        findViewById<View>(R.id.include_view4).findViewById<TextView>(R.id.padText).text =
                            soundPoolVolume4.toString()
                                .replace("f", "") + "            " + soundPoolTempo4.toString()
                                .replace("f", "") + "\n" + padText4.replace("tr_8", "TR-8")
                                .replace("tr_909", "TR-909").replace("_", " ").uppercase()
                        findViewById<View>(R.id.include_view7).findViewById<TextView>(R.id.padText).text =
                            soundPoolVolume7.toString()
                                .replace("f", "") + "            " + soundPoolTempo7.toString()
                                .replace("f", "") + "\n" + padText7.replace("tr_8", "TR-8")
                                .replace("tr_909", "TR-909").replace("_", " ").uppercase()
                        findViewById<View>(R.id.include_view10).findViewById<TextView>(R.id.padText).text =
                            soundPoolVolume10.toString()
                                .replace("f", "") + "            " + soundPoolTempo10.toString()
                                .replace("f", "") + "\n" + padText10.replace("tr_8", "TR-8")
                                .replace("tr_909", "TR-909").replace("_", " ").uppercase()
                        findViewById<View>(R.id.include_view13).findViewById<TextView>(R.id.padText).text =
                            soundPoolVolume13.toString()
                                .replace("f", "") + "            " + soundPoolTempo13.toString()
                                .replace("f", "") + "\n" + padText13.replace("tr_8", "TR-8")
                                .replace("tr_909", "TR-909").replace("_", " ").uppercase()
                        sound1 = soundPool.load(assets.openFd("$padText1.ogg"), 1)
                        sound4 = soundPool.load(assets.openFd("$padText4.ogg"), 1)
                        sound7 = soundPool.load(assets.openFd("$padText7.ogg"), 1)
                        sound10 = soundPool.load(assets.openFd("$padText10.ogg"), 1)
                        sound13 = soundPool.load(assets.openFd("$padText13.ogg"), 1)
                        twostepSequence()
                        changeSequence()
                        noteCount = 0
                        count = 5
                        bpm = 10
                        binding.editTitle.setText(actionTitle.replace("_", " ").uppercase(),
                            TextView.BufferType.NORMAL)
                        x51()
                        gridView2.visibility = View.INVISIBLE
                    }
                    15 -> {
                        gameCheck = "16"
                        menuSwitch = true
                        invalidateOptionsMenu()
                        switch1 = 2
                        padText1 = "clsd_hi_hat_01"
                        padText4 = "tr_909_open_hi_hat_01"
                        padText7 = "tr_8_snare_drum_04"
                        padText10 = "bass_drum_short_08"
                        actionTitle = "drum_n_bass_1_bpm170"
                        binding.includeMainView.textView.text =
                            padText1.replace("tr_8", "TR-8").replace("tr_909", "TR-909")
                                .replace("_", " ").uppercase()
                        binding.includeMainView4.textView.text =
                            padText4.replace("tr_8", "TR-8").replace("tr_909", "TR-909")
                                .replace("_", " ").uppercase()
                        binding.includeMainView7.textView.text =
                            padText7.replace("tr_8", "TR-8").replace("tr_909", "TR-909")
                                .replace("_", " ").uppercase()
                        binding.includeMainView10.textView.text =
                            padText10.replace("tr_8", "TR-8").replace("tr_909", "TR-909")
                                .replace("_", " ").uppercase()
                        findViewById<View>(R.id.include_view).findViewById<TextView>(R.id.padText).text =
                            soundPoolVolume.toString()
                                .replace("f", "") + "            " + soundPoolTempo.toString()
                                .replace("f", "") + "\n" + padText1.replace("tr_8", "TR-8")
                                .replace("tr_909", "TR-909").replace("_", " ").uppercase()
                        findViewById<View>(R.id.include_view4).findViewById<TextView>(R.id.padText).text =
                            soundPoolVolume4.toString()
                                .replace("f", "") + "            " + soundPoolTempo4.toString()
                                .replace("f", "") + "\n" + padText4.replace("tr_8", "TR-8")
                                .replace("tr_909", "TR-909").replace("_", " ").uppercase()
                        findViewById<View>(R.id.include_view7).findViewById<TextView>(R.id.padText).text =
                            soundPoolVolume7.toString()
                                .replace("f", "") + "            " + soundPoolTempo7.toString()
                                .replace("f", "") + "\n" + padText7.replace("tr_8", "TR-8")
                                .replace("tr_909", "TR-909").replace("_", " ").uppercase()
                        findViewById<View>(R.id.include_view10).findViewById<TextView>(R.id.padText).text =
                            soundPoolVolume10.toString()
                                .replace("f", "") + "            " + soundPoolTempo10.toString()
                                .replace("f", "") + "\n" + padText10.replace("tr_8", "TR-8")
                                .replace("tr_909", "TR-909").replace("_", " ").uppercase()
                        sound1 = soundPool.load(assets.openFd("$padText1.ogg"), 1)
                        sound4 = soundPool.load(assets.openFd("$padText4.ogg"), 1)
                        sound7 = soundPool.load(assets.openFd("$padText7.ogg"), 1)
                        sound10 = soundPool.load(assets.openFd("$padText10.ogg"), 1)
                        drumnbassSequence()
                        changeSequence()
                        noteCount = 0
                        count = 5
                        bpm = 10
                        binding.editTitle.setText(actionTitle.replace("_", " ").uppercase(),
                            TextView.BufferType.NORMAL)
                        x41()
                        gridView2.visibility = View.INVISIBLE
                    }
                    16 -> {
                        gameCheck = "17"
                        if (clearCount >= 12) {
                            val builder =
                                AlertDialog.Builder(this, R.style.AppCompatAlertDialogStyle)
                            val inflater = layoutInflater
                            val dialogView = inflater.inflate(R.layout.save_load, null)

                            if (mRealm.where(SaveSlot::class.java).equalTo("id", "1")
                                    .findFirst()?.actionTitleR != null
                            ) {
                                dialogView.findViewById<TextView>(R.id.slot1).text =
                                    (mRealm.where(SaveSlot::class.java).equalTo("id", "1")
                                        .findFirst()?.actionTitleR.toString())
                            }
                            if (mRealm.where(SaveSlot::class.java).equalTo("id", "2")
                                    .findFirst()?.actionTitleR != null
                            ) {
                                dialogView.findViewById<TextView>(R.id.slot2).text =
                                    (mRealm.where(SaveSlot::class.java).equalTo("id", "2")
                                        .findFirst()?.actionTitleR.toString())
                            }
                            if (mRealm.where(SaveSlot::class.java).equalTo("id", "3")
                                    .findFirst()?.actionTitleR != null
                            ) {
                                dialogView.findViewById<TextView>(R.id.slot3).text =
                                    (mRealm.where(SaveSlot::class.java).equalTo("id", "3")
                                        .findFirst()?.actionTitleR.toString())
                            }
                            if (mRealm.where(SaveSlot::class.java).equalTo("id", "4")
                                    .findFirst()?.actionTitleR != null
                            ) {
                                dialogView.findViewById<TextView>(R.id.slot4).text =
                                    (mRealm.where(SaveSlot::class.java).equalTo("id", "4")
                                        .findFirst()?.actionTitleR.toString())
                            }
                            if (mRealm.where(SaveSlot::class.java).equalTo("id", "5")
                                    .findFirst()?.actionTitleR != null
                            ) {
                                dialogView.findViewById<TextView>(R.id.slot5).text =
                                    (mRealm.where(SaveSlot::class.java).equalTo("id", "5")
                                        .findFirst()?.actionTitleR.toString())
                            }
                            if (mRealm.where(SaveSlot::class.java).equalTo("id", "6")
                                    .findFirst()?.actionTitleR != null
                            ) {
                                dialogView.findViewById<TextView>(R.id.slot6).text =
                                    (mRealm.where(SaveSlot::class.java).equalTo("id", "6")
                                        .findFirst()?.actionTitleR.toString())
                            }
                            if (mRealm.where(SaveSlot::class.java).equalTo("id", "7")
                                    .findFirst()?.actionTitleR != null
                            ) {
                                dialogView.findViewById<TextView>(R.id.slot7).text =
                                    (mRealm.where(SaveSlot::class.java).equalTo("id", "7")
                                        .findFirst()?.actionTitleR.toString())
                            }
                            if (mRealm.where(SaveSlot::class.java).equalTo("id", "8")
                                    .findFirst()?.actionTitleR != null
                            ) {
                                dialogView.findViewById<TextView>(R.id.slot8).text =
                                    (mRealm.where(SaveSlot::class.java).equalTo("id", "8")
                                        .findFirst()?.actionTitleR.toString())
                            }

                            builder.setView(dialogView)
                                .setOnCancelListener {
                                    stickyImmersiveMode()
                                }
                                .setTitle(R.string.load)
                                .setNegativeButton("CANCEL") { _, _ ->
                                    stickyImmersiveMode()
                                }
                            val dialog = builder.create()
                            dialog.show()

                            dialogView.findViewById<TextView>(R.id.slot1).setOnClickListener {
                                read("1")
                                dialog.cancel()
                                if (mRealm.where(SaveSlot::class.java).equalTo("id", "1")
                                        .findFirst()?.pad != null
                                ) {
                                    sequencerSize = 0
                                    findViewById<View>(R.id.line_measure).findViewById<TextView>(R.id.measure).text =
                                        (sequencerSize + 1).toString()
                                    changeSequence()
                                    window.addFlags(WindowManager.LayoutParams.FLAG_NOT_TOUCHABLE)
                                    val snackBar2 = Snackbar.make(findViewById(R.id.snack_space),
                                        R.string.Loaded,
                                        Snackbar.LENGTH_LONG)
                                    val snackTextView2: TextView =
                                        snackBar2.view.findViewById(R.id.snackbar_text)
                                    snackTextView2.textAlignment = TextView.TEXT_ALIGNMENT_CENTER
                                    snackBar2.setDuration(2000).show()
                                    handler.postDelayed({
                                        window.clearFlags(WindowManager.LayoutParams.FLAG_NOT_TOUCHABLE)
                                    }, 2000)
                                }
                            }

                            dialogView.findViewById<TextView>(R.id.slot2).setOnClickListener {
                                read("2")
                                dialog.cancel()
                                if (mRealm.where(SaveSlot::class.java).equalTo("id", "2")
                                        .findFirst()?.pad != null
                                ) {
                                    sequencerSize = 0
                                    findViewById<View>(R.id.line_measure).findViewById<TextView>(R.id.measure).text =
                                        (sequencerSize + 1).toString()
                                    changeSequence()
                                    window.addFlags(WindowManager.LayoutParams.FLAG_NOT_TOUCHABLE)
                                    val snackBar2 = Snackbar.make(findViewById(R.id.snack_space),
                                        R.string.Loaded,
                                        Snackbar.LENGTH_LONG)
                                    val snackTextView2: TextView =
                                        snackBar2.view.findViewById(R.id.snackbar_text)
                                    snackTextView2.textAlignment = TextView.TEXT_ALIGNMENT_CENTER
                                    snackBar2.setDuration(2000).show()
                                    handler.postDelayed({
                                        window.clearFlags(WindowManager.LayoutParams.FLAG_NOT_TOUCHABLE)
                                    }, 2000)
                                }
                            }

                            dialogView.findViewById<TextView>(R.id.slot3).setOnClickListener {
                                read("3")
                                dialog.cancel()
                                if (mRealm.where(SaveSlot::class.java).equalTo("id", "3")
                                        .findFirst()?.pad != null
                                ) {
                                    sequencerSize = 0
                                    findViewById<View>(R.id.line_measure).findViewById<TextView>(R.id.measure).text =
                                        (sequencerSize + 1).toString()
                                    changeSequence()
                                    window.addFlags(WindowManager.LayoutParams.FLAG_NOT_TOUCHABLE)
                                    val snackBar2 = Snackbar.make(findViewById(R.id.snack_space),
                                        R.string.Loaded,
                                        Snackbar.LENGTH_LONG)
                                    val snackTextView2: TextView =
                                        snackBar2.view.findViewById(R.id.snackbar_text)
                                    snackTextView2.textAlignment = TextView.TEXT_ALIGNMENT_CENTER
                                    snackBar2.setDuration(2000).show()
                                    handler.postDelayed({
                                        window.clearFlags(WindowManager.LayoutParams.FLAG_NOT_TOUCHABLE)
                                    }, 2000)
                                }
                            }

                            dialogView.findViewById<TextView>(R.id.slot4).setOnClickListener {
                                read("4")
                                dialog.cancel()
                                if (mRealm.where(SaveSlot::class.java).equalTo("id", "4")
                                        .findFirst()?.pad != null
                                ) {
                                    sequencerSize = 0
                                    findViewById<View>(R.id.line_measure).findViewById<TextView>(R.id.measure).text =
                                        (sequencerSize + 1).toString()
                                    changeSequence()
                                    window.addFlags(WindowManager.LayoutParams.FLAG_NOT_TOUCHABLE)
                                    val snackBar2 = Snackbar.make(findViewById(R.id.snack_space),
                                        R.string.Loaded,
                                        Snackbar.LENGTH_LONG)
                                    val snackTextView2: TextView =
                                        snackBar2.view.findViewById(R.id.snackbar_text)
                                    snackTextView2.textAlignment = TextView.TEXT_ALIGNMENT_CENTER
                                    snackBar2.setDuration(2000).show()
                                    handler.postDelayed({
                                        window.clearFlags(WindowManager.LayoutParams.FLAG_NOT_TOUCHABLE)
                                    }, 2000)
                                }
                            }

                            dialogView.findViewById<TextView>(R.id.slot5).setOnClickListener {
                                read("5")
                                dialog.cancel()
                                if (mRealm.where(SaveSlot::class.java).equalTo("id", "5")
                                        .findFirst()?.pad != null
                                ) {
                                    sequencerSize = 0
                                    findViewById<View>(R.id.line_measure).findViewById<TextView>(R.id.measure).text =
                                        (sequencerSize + 1).toString()
                                    changeSequence()
                                    window.addFlags(WindowManager.LayoutParams.FLAG_NOT_TOUCHABLE)
                                    val snackBar2 = Snackbar.make(findViewById(R.id.snack_space),
                                        R.string.Loaded,
                                        Snackbar.LENGTH_LONG)
                                    val snackTextView2: TextView =
                                        snackBar2.view.findViewById(R.id.snackbar_text)
                                    snackTextView2.textAlignment = TextView.TEXT_ALIGNMENT_CENTER
                                    snackBar2.setDuration(2000).show()
                                    handler.postDelayed({
                                        window.clearFlags(WindowManager.LayoutParams.FLAG_NOT_TOUCHABLE)
                                    }, 2000)
                                }
                            }

                            dialogView.findViewById<TextView>(R.id.slot6).setOnClickListener {
                                read("6")
                                dialog.cancel()
                                if (mRealm.where(SaveSlot::class.java).equalTo("id", "6")
                                        .findFirst()?.pad != null
                                ) {
                                    sequencerSize = 0
                                    findViewById<View>(R.id.line_measure).findViewById<TextView>(R.id.measure).text =
                                        (sequencerSize + 1).toString()
                                    changeSequence()
                                    window.addFlags(WindowManager.LayoutParams.FLAG_NOT_TOUCHABLE)
                                    val snackBar2 = Snackbar.make(findViewById(R.id.snack_space),
                                        R.string.Loaded,
                                        Snackbar.LENGTH_LONG)
                                    val snackTextView2: TextView =
                                        snackBar2.view.findViewById(R.id.snackbar_text)
                                    snackTextView2.textAlignment = TextView.TEXT_ALIGNMENT_CENTER
                                    snackBar2.setDuration(2000).show()
                                    handler.postDelayed({
                                        window.clearFlags(WindowManager.LayoutParams.FLAG_NOT_TOUCHABLE)
                                    }, 2000)
                                }
                            }

                            dialogView.findViewById<TextView>(R.id.slot7).setOnClickListener {
                                read("7")
                                dialog.cancel()
                                if (mRealm.where(SaveSlot::class.java).equalTo("id", "7")
                                        .findFirst()?.pad != null
                                ) {
                                    sequencerSize = 0
                                    findViewById<View>(R.id.line_measure).findViewById<TextView>(R.id.measure).text =
                                        (sequencerSize + 1).toString()
                                    changeSequence()
                                    window.addFlags(WindowManager.LayoutParams.FLAG_NOT_TOUCHABLE)
                                    val snackBar2 = Snackbar.make(findViewById(R.id.snack_space),
                                        R.string.Loaded,
                                        Snackbar.LENGTH_LONG)
                                    val snackTextView2: TextView =
                                        snackBar2.view.findViewById(R.id.snackbar_text)
                                    snackTextView2.textAlignment = TextView.TEXT_ALIGNMENT_CENTER
                                    snackBar2.setDuration(2000).show()
                                    handler.postDelayed({
                                        window.clearFlags(WindowManager.LayoutParams.FLAG_NOT_TOUCHABLE)
                                    }, 2000)
                                }
                            }

                            dialogView.findViewById<TextView>(R.id.slot8).setOnClickListener {
                                read("8")
                                dialog.cancel()
                                if (mRealm.where(SaveSlot::class.java).equalTo("id", "8")
                                        .findFirst()?.pad != null
                                ) {
                                    sequencerSize = 0
                                    findViewById<View>(R.id.line_measure).findViewById<TextView>(R.id.measure).text =
                                        (sequencerSize + 1).toString()
                                    changeSequence()
                                    window.addFlags(WindowManager.LayoutParams.FLAG_NOT_TOUCHABLE)
                                    val snackBar2 = Snackbar.make(findViewById(R.id.snack_space),
                                        R.string.Loaded,
                                        Snackbar.LENGTH_LONG)
                                    val snackTextView2: TextView =
                                        snackBar2.view.findViewById(R.id.snackbar_text)
                                    snackTextView2.textAlignment = TextView.TEXT_ALIGNMENT_CENTER
                                    snackBar2.setDuration(2000).show()
                                    handler.postDelayed({
                                        window.clearFlags(WindowManager.LayoutParams.FLAG_NOT_TOUCHABLE)
                                    }, 2000)
                                }
                            }
                            gridView2.visibility = View.INVISIBLE
                        } else {
                            Toast.makeText(applicationContext, R.string.clearCount, Toast.LENGTH_LONG).show()
                        }
                    }
                }
            }
        }


        aSoundList = arrayListOf(
                SoundList("bass_drum_long_01.ogg"),
                SoundList("bass_drum_long_02.ogg"),
                SoundList("bass_drum_long_03.ogg"),
                SoundList("bass_drum_long_04.ogg"),
                SoundList("bass_drum_long_05.ogg"),
                SoundList("bass_drum_long_06.ogg"),
                SoundList("bass_drum_long_07.ogg"),
                SoundList("bass_drum_long_08.ogg"),
                SoundList("bass_drum_long_09.ogg"),
                SoundList("bass_drum_long_10.ogg"),
                SoundList("bass_drum_long_11.ogg"),
                SoundList("bass_drum_long_12.ogg"),
                SoundList("bass_drum_long_13.ogg"),
                SoundList("bass_drum_long_14.ogg"),
                SoundList("bass_drum_long_15.ogg"),
                SoundList("bass_drum_long_16.ogg"),
                SoundList("bass_drum_long_17.ogg"),
                SoundList("bass_drum_short_01.ogg"),
                SoundList("bass_drum_short_02.ogg"),
                SoundList("bass_drum_short_03.ogg"),
                SoundList("bass_drum_short_04.ogg"),
                SoundList("bass_drum_short_05.ogg"),
                SoundList("bass_drum_short_06.ogg"),
                SoundList("bass_drum_short_07.ogg"),
                SoundList("bass_drum_short_08.ogg"),
                SoundList("bass_drum_short_09.ogg"),
                SoundList("bass_drum_short_10.ogg"),
                SoundList("bass_drum_short_11.ogg"),
                SoundList("bass_drum_short_12.ogg"),
            SoundList("tr_909_bass_drum_01.ogg"),
            SoundList("tr_909_bass_drum_02.ogg"),
            SoundList("tr_909_bass_drum_03.ogg"),
            SoundList("tr_8_bass_drum_01.ogg"),
            SoundList("tr_8_bass_drum_02.ogg"),
            SoundList("tr_8_bass_drum_03.ogg"),
            SoundList("tr_8_bass_drum_04.ogg")
                )

        bSoundList = arrayListOf(
                SoundList("clap_01.ogg"),
                SoundList("clap_02.ogg"),
                SoundList("clap_03.ogg"),
                SoundList("clap_04.ogg"),
                SoundList("clap_05.ogg"),
                SoundList("clap_06.ogg"),
                SoundList("clap_07.ogg"),
                SoundList("clap_08.ogg"),
                SoundList("clap_09.ogg"),
                SoundList("clap_10.ogg"),
                SoundList("clap_11.ogg"),
                SoundList("clap_12.ogg"),
                SoundList("clap_13.ogg"),
                SoundList("clap_14.ogg"),
                SoundList("clap_15.ogg"),
            SoundList("tr_909_clap.ogg"),
            SoundList("tr_8_clap_01.ogg"),
            SoundList("tr_8_clap_02.ogg"),
            SoundList("tr_8_clap_03.ogg")
        )
        cSoundList = arrayListOf(
                SoundList("claves_01.ogg"),
                SoundList("claves_02.ogg"),
                SoundList("claves_03.ogg"),
                SoundList("claves_04.ogg"),
                SoundList("claves_05.ogg"),
                SoundList("claves_06.ogg"),
                SoundList("claves_07.ogg"),
                SoundList("claves_08.ogg"),
                SoundList("claves_09.ogg"),
                SoundList("claves_10.ogg"),
                SoundList("claves_11.ogg")
        )
        dSoundList = arrayListOf(
                SoundList("clsd_hi_hat_01.ogg"),
                SoundList("clsd_hi_hat_02.ogg"),
                SoundList("clsd_hi_hat_03.ogg"),
                SoundList("clsd_hi_hat_04.ogg"),
                SoundList("clsd_hi_hat_05.ogg"),
                SoundList("clsd_hi_hat_06.ogg"),
                SoundList("clsd_hi_hat_07.ogg"),
                SoundList("clsd_hi_hat_08.ogg"),
                SoundList("clsd_hi_hat_09.ogg"),
                SoundList("clsd_hi_hat_10.ogg"),
                SoundList("clsd_hi_hat_11.ogg"),
                SoundList("clsd_hi_hat_12.ogg"),
            SoundList("tr_909_clsd_hi_hat_01.ogg"),
            SoundList("tr_909_clsd_hi_hat_02.ogg"),
            SoundList("tr_8_clsd_hi_hat_01.ogg"),
            SoundList("tr_8_clsd_hi_hat_02.ogg"),
            SoundList("tr_8_clsd_hi_hat_03.ogg")
        )
        eSoundList = arrayListOf(
                SoundList("high_conga_01.ogg"),
                SoundList("high_conga_02.ogg"),
                SoundList("high_conga_03.ogg"),
                SoundList("high_conga_04.ogg"),
                SoundList("high_conga_05.ogg"),
                SoundList("high_conga_06.ogg"),
                SoundList("high_conga_07.ogg"),
                SoundList("high_conga_08.ogg"),
                SoundList("high_conga_09.ogg"),
                SoundList("high_conga_10.ogg"),
                SoundList("mid_conga_01.ogg"),
                SoundList("mid_conga_02.ogg"),
                SoundList("mid_conga_03.ogg"),
                SoundList("mid_conga_04.ogg"),
                SoundList("mid_conga_05.ogg"),
                SoundList("mid_conga_06.ogg"),
                SoundList("mid_conga_07.ogg"),
                SoundList("mid_conga_08.ogg"),
                SoundList("mid_conga_09.ogg"),
                SoundList("mid_conga_10.ogg"),
                SoundList("low_conga_01.ogg"),
                SoundList("low_conga_02.ogg"),
                SoundList("low_conga_03.ogg"),
                SoundList("low_conga_04.ogg"),
                SoundList("low_conga_05.ogg"),
                SoundList("low_conga_06.ogg"),
                SoundList("low_conga_07.ogg"),
                SoundList("low_conga_08.ogg"),
                SoundList("low_conga_09.ogg"),
                SoundList("low_conga_10.ogg")
        )
        fSoundList = arrayListOf(
                SoundList("cowbell_01a.ogg"),
                SoundList("cowbell_01b.ogg"),
                SoundList("cowbell_02.ogg"),
                SoundList("cowbell_03.ogg"),
                SoundList("cowbell_04.ogg"),
                SoundList("cowbell_05.ogg"),
                SoundList("cowbell_06.ogg"),
                SoundList("cowbell_07.ogg"),
                SoundList("cowbell_08.ogg"),
                SoundList("cowbell_09.ogg"),
                SoundList("cowbell_10.ogg"),
                SoundList("cowbell_11.ogg"),
                SoundList("cowbell_12.ogg"),
                SoundList("cowbell_13.ogg"),
                SoundList("cowbell_14.ogg"),
                SoundList("cowbell_15.ogg"),
            SoundList("tr_8_cowbell.ogg")
        )
        gSoundList = arrayListOf(
                SoundList("cymbal_01.ogg"),
                SoundList("cymbal_02.ogg"),
                SoundList("cymbal_03.ogg"),
                SoundList("cymbal_04.ogg"),
                SoundList("cymbal_05.ogg"),
                SoundList("cymbal_06.ogg"),
                SoundList("cymbal_07.ogg"),
                SoundList("cymbal_08.ogg"),
                SoundList("cymbal_09.ogg"),
                SoundList("cymbal_10.ogg"),
                SoundList("cymbal_11.ogg"),
                SoundList("cymbal_12.ogg"),
                SoundList("cymbal_13.ogg"),
                SoundList("cymbal_14.ogg"),
                SoundList("cymbal_15.ogg"),
                SoundList("cymbal_16.ogg"),
            SoundList("tr_909_cymbal_01.ogg"),
            SoundList("tr_909_cymbal_02.ogg"),
            SoundList("tr_909_cymbal_03.ogg"),
            SoundList("tr_909_cymbal_04.ogg"),
            SoundList("tr_8_cymbal_01.ogg"),
            SoundList("tr_8_cymbal_02.ogg"),
            SoundList("tr_8_cymbal_03.ogg"),
            SoundList("tr_8_cymbal_04.ogg")
        )
        hSoundList = arrayListOf(
                SoundList("maracas_01.ogg"),
                SoundList("maracas_02.ogg"),
                SoundList("maracas_03.ogg"),
                SoundList("maracas_04.ogg"),
                SoundList("maracas_05.ogg"),
                SoundList("maracas_06.ogg"),
                SoundList("maracas_07.ogg"),
                SoundList("maracas_08.ogg"),
                SoundList("maracas_09.ogg"),
                SoundList("maracas_10.ogg"),
                SoundList("maracas_11.ogg")
        )
        iSoundList = arrayListOf(
                SoundList("open_hi_hat_01.ogg"),
                SoundList("open_hi_hat_02.ogg"),
                SoundList("open_hi_hat_03.ogg"),
                SoundList("open_hi_hat_04.ogg"),
                SoundList("open_hi_hat_05.ogg"),
                SoundList("open_hi_hat_06.ogg"),
                SoundList("open_hi_hat_07.ogg"),
                SoundList("open_hi_hat_08.ogg"),
                SoundList("open_hi_hat_09.ogg"),
                SoundList("open_hi_hat_10.ogg"),
                SoundList("open_hi_hat_11.ogg"),
                SoundList("open_hi_hat_12.ogg"),
                SoundList("open_hi_hat_13.ogg"),
            SoundList("tr_909_open_hi_hat_01.ogg"),
            SoundList("tr_909_open_hi_hat_02.ogg"),
            SoundList("tr_8_open_hi_hat_01.ogg"),
            SoundList("tr_8_open_hi_hat_02.ogg"),
            SoundList("tr_8_open_hi_hat_03.ogg")
        )
        jSoundList = arrayListOf(
                SoundList("rimshot_01.ogg"),
                SoundList("rimshot_02.ogg"),
                SoundList("rimshot_03.ogg"),
                SoundList("rimshot_04.ogg"),
                SoundList("rimshot_05.ogg"),
                SoundList("rimshot_06.ogg"),
                SoundList("rimshot_07.ogg"),
                SoundList("rimshot_08.ogg"),
                SoundList("rimshot_09.ogg"),
                SoundList("rimshot_10.ogg"),
                SoundList("rimshot_11.ogg"),
            SoundList("tr_909_rimshot.ogg"),
            SoundList("tr_8_rimshot_01.ogg"),
            SoundList("tr_8_rimshot_02.ogg"),
            SoundList("tr_8_rimshot_03.ogg")
        )
        kSoundList = arrayListOf(
                SoundList("snare_drum_01.ogg"),
                SoundList("snare_drum_02.ogg"),
                SoundList("snare_drum_03.ogg"),
                SoundList("snare_drum_04.ogg"),
                SoundList("snare_drum_05.ogg"),
                SoundList("snare_drum_06.ogg"),
                SoundList("snare_drum_07.ogg"),
                SoundList("snare_drum_08.ogg"),
                SoundList("snare_drum_09.ogg"),
                SoundList("snare_drum_10.ogg"),
                SoundList("snare_drum_11.ogg"),
                SoundList("snare_drum_12.ogg"),
                SoundList("snare_drum_13.ogg"),
                SoundList("snare_drum_14.ogg"),
                SoundList("snare_drum_15.ogg"),
                SoundList("snare_drum_16.ogg"),
                SoundList("snare_drum_17.ogg"),
                SoundList("snare_drum_18.ogg"),
                SoundList("snare_drum_19.ogg"),
                SoundList("snare_drum_20.ogg"),
            SoundList("tr_909_snare_drum_01.ogg"),
            SoundList("tr_909_snare_drum_02.ogg"),
            SoundList("tr_909_snare_drum_03.ogg"),
            SoundList("tr_8_snare_drum_01.ogg"),
            SoundList("tr_8_snare_drum_02.ogg"),
            SoundList("tr_8_snare_drum_03.ogg"),
            SoundList("tr_8_snare_drum_04.ogg")
        )
        lSoundList = arrayListOf(
                SoundList("low_tom_01.ogg"),
                SoundList("low_tom_02.ogg"),
                SoundList("low_tom_03.ogg"),
                SoundList("low_tom_04.ogg"),
                SoundList("low_tom_05.ogg"),
                SoundList("low_tom_06.ogg"),
                SoundList("low_tom_07.ogg"),
                SoundList("low_tom_08.ogg"),
                SoundList("low_tom_09.ogg"),
                SoundList("low_tom_10.ogg"),
                SoundList("low_tom_11.ogg"),
                SoundList("low_tom_12.ogg"),
                SoundList("mid_tom_01.ogg"),
                SoundList("mid_tom_02.ogg"),
                SoundList("mid_tom_03.ogg"),
                SoundList("mid_tom_04.ogg"),
                SoundList("mid_tom_05.ogg"),
                SoundList("mid_tom_06.ogg"),
                SoundList("mid_tom_07.ogg"),
                SoundList("mid_tom_08.ogg"),
                SoundList("mid_tom_09.ogg"),
                SoundList("mid_tom_10.ogg"),
                SoundList("mid_tom_11.ogg"),
                SoundList("mid_tom_12.ogg"),
                SoundList("high_tom_01.ogg"),
                SoundList("high_tom_02.ogg"),
                SoundList("high_tom_03.ogg"),
                SoundList("high_tom_04.ogg"),
                SoundList("high_tom_05.ogg"),
                SoundList("high_tom_06.ogg"),
                SoundList("high_tom_07.ogg"),
                SoundList("high_tom_08.ogg"),
                SoundList("high_tom_09.ogg"),
                SoundList("high_tom_10.ogg"),
                SoundList("high_tom_11.ogg"),
                SoundList("high_tom_12.ogg"),
            SoundList("tr_909_tom_01.ogg"),
            SoundList("tr_909_tom_02.ogg"),
            SoundList("tr_909_tom_03.ogg"),
            SoundList("tr_8_tom_01.ogg"),
            SoundList("tr_8_tom_02.ogg"),
            SoundList("tr_8_tom_03.ogg"),
            SoundList("tr_8_tom_04.ogg"),
            SoundList("tr_8_tom_05.ogg")
        )
        nSoundList = arrayListOf(
            SoundList("bass_drum_short_11.ogg"),
            SoundList("tr_909_clap.ogg"),
            SoundList("claves_04.ogg"),
            SoundList("clsd_hi_hat_01.ogg"),
            SoundList("high_conga_01.ogg"),
            SoundList("cowbell_01b.ogg"),
            SoundList("tr_8_cymbal_01.ogg"),
            SoundList("maracas_02.ogg"),
            SoundList("tr_909_open_hi_hat_01.ogg"),
            SoundList("rimshot_01.ogg"),
            SoundList("tr_8_snare_drum_01.ogg"),
            SoundList("tr_909_tom_01.ogg")
        )
        oSoundList = arrayListOf(

        )
        pSoundList = arrayListOf(

        )
        qSoundList = arrayListOf(

        )
        rSoundList = arrayListOf(

        )
        sSoundList = arrayListOf()
        tSoundList = arrayListOf()

        aCustomAdapter = CustomAdapter(this, aSoundList, this)
        bCustomAdapter = CustomAdapter(this, bSoundList, this)
        cCustomAdapter = CustomAdapter(this, cSoundList, this)
        dCustomAdapter = CustomAdapter(this, dSoundList, this)
        eCustomAdapter = CustomAdapter(this, eSoundList, this)
        fCustomAdapter = CustomAdapter(this, fSoundList, this)
        gCustomAdapter = CustomAdapter(this, gSoundList, this)
        hCustomAdapter = CustomAdapter(this, hSoundList, this)
        iCustomAdapter = CustomAdapter(this, iSoundList, this)
        jCustomAdapter = CustomAdapter(this, jSoundList, this)
        kCustomAdapter = CustomAdapter(this, kSoundList, this)
        lCustomAdapter = CustomAdapter(this, lSoundList, this)
        nCustomAdapter = CustomAdapter(this, nSoundList, this)
        oCustomAdapter = CustomAdapter(this, oSoundList, this)
        pCustomAdapter = CustomAdapter(this, pSoundList, this)
        qCustomAdapter = CustomAdapter(this, qSoundList, this)
        rCustomAdapter = CustomAdapter(this, rSoundList, this)
        sCustomAdapter = CustomAdapter(this, sSoundList, this)
        tCustomAdapter = CustomAdapter(this, tSoundList, this)

        soundListView.adapter = aCustomAdapter

        mp = MediaPlayer()

        supportActionBar?.setDisplayShowTitleEnabled(false)
        binding.editTitle.setText(actionTitle.replace("_", " ").uppercase(), TextView.BufferType.NORMAL)


            val audioUri = MediaStore.Audio.Media.INTERNAL_CONTENT_URI
            val cursor = contentResolver.query(audioUri, null, null, null, null)
            cursor!!.moveToFirst()
            val path: Array<String?> = arrayOfNulls(cursor.count)
            for (i in path.indices) {
                path[i] = cursor.getString(cursor.getColumnIndex("_data"))
                sSoundList.add(SoundList(path[i].toString()))
                cursor.moveToNext()
            }

            cursor.close()


        val meSpinner = findViewById<Spinner>(R.id.menu_spinner)

        val adapter3 = ArrayAdapter.createFromResource(this, R.array.spinnerItems, android.R.layout.simple_spinner_item)

        adapter3.setDropDownViewResource(R.layout.custom_spinner_dropdown)



        meSpinner.adapter = adapter3


        meSpinner.onItemSelectedListener = object : AdapterView.OnItemSelectedListener {

            override fun onItemSelected(
                parent: AdapterView<*>?,
                view: View?, position: Int, id: Long,
            ) {
                if (!meSpinner.isFocusable) {
                    meSpinner.isFocusable = true
                    return
                }

                when(position){
                    0 -> {
                        buttonB = 2
                        soundListView.adapter = aCustomAdapter
                        aCustomAdapter.notifyDataSetChanged()
                        soundListView.visibility = View.VISIBLE
                    }
                    1 -> {
                        buttonB = 2
                        soundListView.adapter = bCustomAdapter
                        bCustomAdapter.notifyDataSetChanged()
                        soundListView.visibility = View.VISIBLE
                    }
                    2 -> {
                        buttonB = 2
                        soundListView.adapter = cCustomAdapter
                        cCustomAdapter.notifyDataSetChanged()
                        soundListView.visibility = View.VISIBLE
                    }
                    3 -> {
                        buttonB = 2
                        soundListView.adapter = dCustomAdapter
                        dCustomAdapter.notifyDataSetChanged()
                        soundListView.visibility = View.VISIBLE
                    }
                    4 -> {
                        buttonB = 2
                        soundListView.adapter = eCustomAdapter
                        eCustomAdapter.notifyDataSetChanged()
                        soundListView.visibility = View.VISIBLE
                    }
                    5 -> {
                        buttonB = 2
                        soundListView.adapter = fCustomAdapter
                        fCustomAdapter.notifyDataSetChanged()
                        soundListView.visibility = View.VISIBLE
                    }
                    6 -> {
                        buttonB = 2
                        soundListView.adapter = gCustomAdapter
                        gCustomAdapter.notifyDataSetChanged()
                        soundListView.visibility = View.VISIBLE
                    }
                    7 -> {
                        buttonB = 2
                        soundListView.adapter = hCustomAdapter
                        hCustomAdapter.notifyDataSetChanged()
                        soundListView.visibility = View.VISIBLE
                    }
                    8 -> {
                        buttonB = 2
                        soundListView.adapter = iCustomAdapter
                        iCustomAdapter.notifyDataSetChanged()
                        soundListView.visibility = View.VISIBLE
                    }
                    9 -> {
                        buttonB = 2
                        soundListView.adapter = jCustomAdapter
                        jCustomAdapter.notifyDataSetChanged()
                        soundListView.visibility = View.VISIBLE
                    }
                    10 -> {
                        buttonB = 2
                        soundListView.adapter = kCustomAdapter
                        kCustomAdapter.notifyDataSetChanged()
                        soundListView.visibility = View.VISIBLE
                    }
                    11 -> {
                        buttonB = 2
                        soundListView.adapter = lCustomAdapter
                        lCustomAdapter.notifyDataSetChanged()
                        soundListView.visibility = View.VISIBLE
                    }
                    12 -> {
                        buttonB = 1
                        soundListView.adapter = sCustomAdapter
                        sCustomAdapter.notifyDataSetChanged()
                        soundListView.visibility = View.VISIBLE
                    }
                    13 -> {
                        selectEX()
                        buttonB = 1
                        soundListView.adapter = tCustomAdapter
                        tCustomAdapter.notifyDataSetChanged()
                        soundListView.visibility = View.VISIBLE
                    }
                }
            }

            override fun onNothingSelected(parent: AdapterView<*>?) {

            }
        }
        meSpinner.isFocusable = false


        val moSpinner = findViewById<Spinner>(R.id.mode_spinner)

        val adapter4 = ArrayAdapter.createFromResource(this, R.array.spinnerItems2, R.layout.custom_spinner_dropdown)

        adapter4.setDropDownViewResource(R.layout.custom_spinner_dropdown)

        moSpinner.adapter = adapter4

        moSpinner.avoidDropdownFocus()

        moSpinner.onItemSelectedListener = object : AdapterView.OnItemSelectedListener {

            override fun onItemSelected(
                parent: AdapterView<*>?,
                view: View?, position: Int, id: Long,
            ) {
                if (!moSpinner.isFocusable) {
                    moSpinner.isFocusable = true
                    return
                }

                when(position){
                    0 -> {
                        modeCheck = 0
                        gridCheck = 0
                        gameSwitch = 0
                        invalidateOptionsMenu()
                        mode = 0
                        paste = 0
                        binding.toolbarMain.setBackgroundColor(Color.parseColor("#5A5A66"))
                        gridView.visibility = View.INVISIBLE
                        gridView.adapter = adapter
                        adapter.notifyDataSetChanged()
                        gridView2.adapter = padAdapter
                        gridView2.visibility = View.INVISIBLE
                        padAdapter.notifyDataSetChanged()
                        binding.sequencerView.visibility = View.GONE
                        binding.notes.visibility = View.GONE
                        binding.view.visibility = View.INVISIBLE
                        stickyImmersiveMode()
                        switchPadSequencer(View.VISIBLE)
                        when (padCheck) {
                            53 -> {
                                x53()
                            }
                            43 -> {
                                x43()
                            }
                            33 -> {
                                x33()
                            }
                            52 -> {
                                x52()
                            }
                            42 -> {
                                x42()
                            }
                            32 -> {
                                x32()
                            }
                            22 -> {
                                x22()
                            }
                            21 -> {
                                x21()
                            }
                            51 -> {
                                x51()
                            }
                            41 -> {
                                x41()
                            }
                            31 -> {
                                x31()
                            }
                        }
                    }
                    1 -> {
                        modeCheck = 1
                        gridCheck = 0
                        gameSwitch = 0
                        invalidateOptionsMenu()
                        mode = 1
                        paste = 0
                        binding.toolbarMain.setBackgroundColor(Color.parseColor("#5A5A66"))
                        gridView.visibility = View.INVISIBLE
                        gridView.adapter = psAdapter
                        psAdapter.notifyDataSetChanged()
                        gridView2.adapter = adapter2
                        gridView2.visibility = View.INVISIBLE
                        adapter2.notifyDataSetChanged()
                        binding.view.visibility = View.INVISIBLE
                        stickyImmersiveMode()
                        sequencerChange(View.GONE)
                        changeSequence()
                    }
                    2 -> {
                        modeCheck = 0
                        gameCheck = "0"
                        gridCheck = 1
                        gameSwitch = 1
                        mode = 1
                        menuSwitch = true
                        invalidateOptionsMenu()
                        paste = 0
                        binding.toolbarMain.setBackgroundColor(Color.parseColor("#5A5A66"))
                        gridView.visibility = View.INVISIBLE
                        gridView.adapter = dpAdapter
                        dpAdapter.notifyDataSetChanged()
                        gridView2.adapter = dpAdapter2
                        gridView2.visibility = View.INVISIBLE
                        dpAdapter2.notifyDataSetChanged()
                        binding.sequencerView.visibility = View.GONE
                        binding.notes.visibility = View.GONE
                        binding.view.visibility = View.INVISIBLE
                        stickyImmersiveMode()
                        sequencerStop()
                        changeSequence()
                        switchPadSequencer(View.VISIBLE)
                        when (padCheck) {
                            53 -> {
                                x53()
                            }
                            43 -> {
                                x43()
                            }
                            33 -> {
                                x33()
                            }
                            52 -> {
                                x52()
                            }
                            42 -> {
                                x42()
                            }
                            32 -> {
                                x32()
                            }
                            22 -> {
                                x22()
                            }
                            21 -> {
                                x21()
                            }
                            51 -> {
                                x51()
                            }
                            41 -> {
                                x41()
                            }
                            31 -> {
                                x31()
                            }
                        }
                    }
                }
            }

            override fun onNothingSelected(parent: AdapterView<*>?) {
                stickyImmersiveMode()
            }
        }
        moSpinner.isFocusable = false


        val audioAttributes = AudioAttributes.Builder()

                .setUsage(AudioAttributes.USAGE_GAME)

                .setContentType(AudioAttributes.CONTENT_TYPE_SPEECH)
                .build()

        soundPool = SoundPool.Builder()

                .setAudioAttributes(audioAttributes)

                .setMaxStreams(20)
                .build()

        try {
            sound1 = soundPool.load(assets.openFd("$padText1.ogg"), 1)
        } catch (e: Exception) {
            try {
                sound1 = soundPool.load(padText1, 1)
                binding.includeMainView.textView.text = padText1.replaceBeforeLast("/", "").replace("/", "").replace(".ogg", "").uppercase()
                findViewById<View>(R.id.include_view).findViewById<TextView>(R.id.padText).text = padText1.replaceBeforeLast("/", "").replace("/", "").replace(".ogg", "").uppercase()
            } catch (e: Exception) {
                sound1 = soundPool.load(assets.openFd("soundless.ogg"), 1)
                binding.includeMainView.textView.text = ""
                findViewById<View>(R.id.include_view).findViewById<TextView>(R.id.padText).text = ""
            }
        }
        try {
            sound2 = soundPool.load(assets.openFd("$padText2.ogg"), 1)
        } catch (e: Exception) {
            try {
                sound2 = soundPool.load(padText2, 1)
                binding.includeMainView2.textView.text = padText2.replaceBeforeLast("/", "").replace("/", "").replace(".ogg", "").uppercase()
                findViewById<View>(R.id.include_view2).findViewById<TextView>(R.id.padText).text = padText2.replaceBeforeLast("/", "").replace("/", "").replace(".ogg", "").uppercase()
            } catch (e: Exception) {
                sound2 = soundPool.load(assets.openFd("soundless.ogg"), 1)
                binding.includeMainView2.textView.text = ""
                findViewById<View>(R.id.include_view2).findViewById<TextView>(R.id.padText).text = ""
            }
        }
        try {
            sound3 = soundPool.load(assets.openFd("$padText3.ogg"), 1)
        } catch (e: Exception) {
            try {
                sound3 = soundPool.load(padText3, 1)
                binding.includeMainView3.textView.text = padText3.replaceBeforeLast("/", "").replace("/", "").replace(".ogg", "").uppercase()
                findViewById<View>(R.id.include_view3).findViewById<TextView>(R.id.padText).text = padText3.replaceBeforeLast("/", "").replace("/", "").replace(".ogg", "").uppercase()
            } catch (e: Exception) {
                sound3 = soundPool.load(assets.openFd("soundless.ogg"), 1)
                binding.includeMainView3.textView.text = ""
                findViewById<View>(R.id.include_view3).findViewById<TextView>(R.id.padText).text = ""
            }
        }
        try {
            sound4 = soundPool.load(assets.openFd("$padText4.ogg"), 1)
        } catch (e: Exception) {
            try {
                sound4 = soundPool.load(padText4, 1)
                binding.includeMainView4.textView.text = padText4.replaceBeforeLast("/", "").replace("/", "").replace(".ogg", "").uppercase()
                findViewById<View>(R.id.include_view4).findViewById<TextView>(R.id.padText).text = padText4.replaceBeforeLast("/", "").replace("/", "").replace(".ogg", "").uppercase()
            } catch (e: Exception) {
                sound4 = soundPool.load(assets.openFd("soundless.ogg"), 1)
                binding.includeMainView4.textView.text = ""
                findViewById<View>(R.id.include_view4).findViewById<TextView>(R.id.padText).text = ""
            }
        }
        try {
            sound5 = soundPool.load(assets.openFd("$padText5.ogg"), 1)
        } catch (e: Exception) {
            try {
                sound5 = soundPool.load(padText5, 1)
                binding.includeMainView5.textView.text = padText5.replaceBeforeLast("/", "").replace("/", "").replace(".ogg", "").uppercase()
                findViewById<View>(R.id.include_view5).findViewById<TextView>(R.id.padText).text = padText5.replaceBeforeLast("/", "").replace("/", "").replace(".ogg", "").uppercase()
            } catch (e: Exception) {
                sound5 = soundPool.load(assets.openFd("soundless.ogg"), 1)
                binding.includeMainView5.textView.text = ""
                findViewById<View>(R.id.include_view5).findViewById<TextView>(R.id.padText).text = ""
            }
        }
        try {
            sound6 = soundPool.load(assets.openFd("$padText6.ogg"), 1)
        } catch (e: Exception) {
            try {
                sound6 = soundPool.load(padText6, 1)
                binding.includeMainView6.textView.text = padText6.replaceBeforeLast("/", "").replace("/", "").replace(".ogg", "").uppercase()
                findViewById<View>(R.id.include_view6).findViewById<TextView>(R.id.padText).text = padText6.replaceBeforeLast("/", "").replace("/", "").replace(".ogg", "").uppercase()
            } catch (e: Exception) {
                sound6 = soundPool.load(assets.openFd("soundless.ogg"), 1)
                binding.includeMainView6.textView.text = ""
                findViewById<View>(R.id.include_view6).findViewById<TextView>(R.id.padText).text = ""
            }
        }
        try {
            sound7 = soundPool.load(assets.openFd("$padText7.ogg"), 1)
        } catch (e: Exception) {
            try {
                sound7 = soundPool.load(padText7, 1)
                binding.includeMainView7.textView.text = padText7.replaceBeforeLast("/", "").replace("/", "").replace(".ogg", "").uppercase()
                findViewById<View>(R.id.include_view7).findViewById<TextView>(R.id.padText).text = padText7.replaceBeforeLast("/", "").replace("/", "").replace(".ogg", "").uppercase()
            } catch (e: Exception) {
                sound7 = soundPool.load(assets.openFd("soundless.ogg"), 1)
                binding.includeMainView7.textView.text = ""
                findViewById<View>(R.id.include_view7).findViewById<TextView>(R.id.padText).text = ""
            }
        }
        try {
            sound8 = soundPool.load(assets.openFd("$padText8.ogg"), 1)
        } catch (e: Exception) {
            try {
                sound8 = soundPool.load(padText8, 1)
                binding.includeMainView8.textView.text = padText8.replaceBeforeLast("/", "").replace("/", "").replace(".ogg", "").uppercase()
                findViewById<View>(R.id.include_view8).findViewById<TextView>(R.id.padText).text = padText8.replaceBeforeLast("/", "").replace("/", "").replace(".ogg", "").uppercase()
            } catch (e: Exception) {
                sound8 = soundPool.load(assets.openFd("soundless.ogg"), 1)
                binding.includeMainView8.textView.text = ""
                findViewById<View>(R.id.include_view8).findViewById<TextView>(R.id.padText).text = ""
            }
        }
        try {
            sound9 = soundPool.load(assets.openFd("$padText9.ogg"), 1)
        } catch (e: Exception) {
            try {
                sound9 = soundPool.load(padText9, 1)
                binding.includeMainView9.textView.text = padText9.replaceBeforeLast("/", "").replace("/", "").replace(".ogg", "").uppercase()
                findViewById<View>(R.id.include_view9).findViewById<TextView>(R.id.padText).text = padText9.replaceBeforeLast("/", "").replace("/", "").replace(".ogg", "").uppercase()
            } catch (e: Exception) {
                sound9 = soundPool.load(assets.openFd("soundless.ogg"), 1)
                binding.includeMainView9.textView.text = ""
                findViewById<View>(R.id.include_view9).findViewById<TextView>(R.id.padText).text = ""
            }
        }
        try {
            sound10 = soundPool.load(assets.openFd("$padText10.ogg"), 1)
        } catch (e: Exception) {
            try {
                sound10 = soundPool.load(padText10, 1)
                binding.includeMainView10.textView.text = padText10.replaceBeforeLast("/", "").replace("/", "").replace(".ogg", "").uppercase()
                findViewById<View>(R.id.include_view10).findViewById<TextView>(R.id.padText).text = padText10.replaceBeforeLast("/", "").replace("/", "").replace(".ogg", "").uppercase()
            } catch (e: Exception) {
                sound10 = soundPool.load(assets.openFd("soundless.ogg"), 1)
                binding.includeMainView10.textView.text = ""
                findViewById<View>(R.id.include_view10).findViewById<TextView>(R.id.padText).text = ""
            }
        }
        try {
            sound11 = soundPool.load(assets.openFd("$padText11.ogg"), 1)
        } catch (e: Exception) {
            try {
                sound11 = soundPool.load(padText11, 1)
                binding.includeMainView11.textView.text = padText11.replaceBeforeLast("/", "").replace("/", "").replace(".ogg", "").uppercase()
                findViewById<View>(R.id.include_view11).findViewById<TextView>(R.id.padText).text = padText11.replaceBeforeLast("/", "").replace("/", "").replace(".ogg", "").uppercase()
            } catch (e: Exception) {
                sound11 = soundPool.load(assets.openFd("soundless.ogg"), 1)
                binding.includeMainView11.textView.text = ""
                findViewById<View>(R.id.include_view11).findViewById<TextView>(R.id.padText).text = ""
            }
        }
        try {
            sound12 = soundPool.load(assets.openFd("$padText12.ogg"), 1)
        } catch (e: Exception) {
            try {
                sound12 = soundPool.load(padText12, 1)
                binding.includeMainView12.textView.text = padText12.replaceBeforeLast("/", "").replace("/", "").replace(".ogg", "").uppercase()
                findViewById<View>(R.id.include_view12).findViewById<TextView>(R.id.padText).text = padText12.replaceBeforeLast("/", "").replace("/", "").replace(".ogg", "").uppercase()
            } catch (e: Exception) {
                sound12 = soundPool.load(assets.openFd("soundless.ogg"), 1)
                binding.includeMainView12.textView.text = ""
                findViewById<View>(R.id.include_view12).findViewById<TextView>(R.id.padText).text = ""
            }
        }
        try {
            sound13 = soundPool.load(assets.openFd("$padText13.ogg"), 1)
        } catch (e: Exception) {
            try {
                sound13 = soundPool.load(padText13, 1)
                binding.includeMainView13.textView.text = padText13.replaceBeforeLast("/", "").replace("/", "").replace(".ogg", "").uppercase()
                findViewById<View>(R.id.include_view13).findViewById<TextView>(R.id.padText).text = padText13.replaceBeforeLast("/", "").replace("/", "").replace(".ogg", "").uppercase()
            } catch (e: Exception) {
                sound13 = soundPool.load(assets.openFd("soundless.ogg"), 1)
                binding.includeMainView13.textView.text = ""
                findViewById<View>(R.id.include_view13).findViewById<TextView>(R.id.padText).text = ""
            }
        }
        try {
            sound14 = soundPool.load(assets.openFd("$padText14.ogg"), 1)
        } catch (e: Exception) {
            try {
                sound14 = soundPool.load(padText14, 1)
                binding.includeMainView14.textView.text = padText14.replaceBeforeLast("/", "").replace("/", "").replace(".ogg", "").uppercase()
                findViewById<View>(R.id.include_view14).findViewById<TextView>(R.id.padText).text = padText14.replaceBeforeLast("/", "").replace("/", "").replace(".ogg", "").uppercase()
            } catch (e: Exception) {
                sound14 = soundPool.load(assets.openFd("soundless.ogg"), 1)
                binding.includeMainView14.textView.text = ""
                findViewById<View>(R.id.include_view14).findViewById<TextView>(R.id.padText).text = ""
            }
        }
        try {
            sound15 = soundPool.load(assets.openFd("$padText15.ogg"), 1)
        } catch (e: Exception) {
            try {
                sound15 = soundPool.load(padText15, 1)
                binding.includeMainView15.textView.text = padText15.replaceBeforeLast("/", "").replace("/", "").replace(".ogg", "").uppercase()
                findViewById<View>(R.id.include_view15).findViewById<TextView>(R.id.padText).text = padText15.replaceBeforeLast("/", "").replace("/", "").replace(".ogg", "").uppercase()
            } catch (e: Exception) {
                sound15 = soundPool.load(assets.openFd("soundless.ogg"), 1)
                binding.includeMainView15.textView.text = ""
                findViewById<View>(R.id.include_view15).findViewById<TextView>(R.id.padText).text = ""
            }
        }
        sound17 = soundPool.load(assets.openFd("soundless.ogg"), 1)
        sound18 = soundPool.load(assets.openFd("rimshot_04.ogg"), 1)

        beat5Sequence()
        padSequence = 0

        findViewById<View>(R.id.sequencer_list).findViewById<ImageView>(R.id.sequence).setOnTouchListener { _, _ ->
            sequenceTap(a1, R.id.sequencer_list, R.id.sequence, "#d03933")
            false
        }
        findViewById<View>(R.id.sequencer_list).findViewById<ImageView>(R.id.sequence2).setOnTouchListener { _, _ ->
            sequenceTap(a2, R.id.sequencer_list, R.id.sequence2, "#d03933")
            false
        }
        findViewById<View>(R.id.sequencer_list).findViewById<ImageView>(R.id.sequence3).setOnTouchListener { _, _ ->
            sequenceTap(a3, R.id.sequencer_list, R.id.sequence3, "#d03933")
            false
        }
        findViewById<View>(R.id.sequencer_list).findViewById<ImageView>(R.id.sequence4).setOnTouchListener { _, _ ->
            sequenceTap(a4, R.id.sequencer_list, R.id.sequence4, "#d03933")
            false
        }
        findViewById<View>(R.id.sequencer_list).findViewById<ImageView>(R.id.sequence5).setOnTouchListener { _, _ ->
            sequenceTap(a5, R.id.sequencer_list, R.id.sequence5, "#d03933")
            false
        }
        findViewById<View>(R.id.sequencer_list).findViewById<ImageView>(R.id.sequence6).setOnTouchListener { _, _ ->
            sequenceTap(a6, R.id.sequencer_list, R.id.sequence6, "#d03933")
            false
        }
        findViewById<View>(R.id.sequencer_list).findViewById<ImageView>(R.id.sequence7).setOnTouchListener { _, _ ->
            sequenceTap(a7, R.id.sequencer_list, R.id.sequence7, "#d03933")
            false
        }
        findViewById<View>(R.id.sequencer_list).findViewById<ImageView>(R.id.sequence8).setOnTouchListener { _, _ ->
            sequenceTap(a8, R.id.sequencer_list, R.id.sequence8, "#d03933")
            false
        }
        findViewById<View>(R.id.sequencer_list).findViewById<ImageView>(R.id.sequence9).setOnTouchListener { _, _ ->
            sequenceTap(a9, R.id.sequencer_list, R.id.sequence9, "#d03933")
            false
        }
        findViewById<View>(R.id.sequencer_list).findViewById<ImageView>(R.id.sequence10).setOnTouchListener { _, _ ->
            sequenceTap(a10, R.id.sequencer_list, R.id.sequence10, "#d03933")
            false
        }
        findViewById<View>(R.id.sequencer_list).findViewById<ImageView>(R.id.sequence11).setOnTouchListener { _, _ ->
            sequenceTap(a11, R.id.sequencer_list, R.id.sequence11, "#d03933")
            false
        }
        findViewById<View>(R.id.sequencer_list).findViewById<ImageView>(R.id.sequence12).setOnTouchListener { _, _ ->
            sequenceTap(a12, R.id.sequencer_list, R.id.sequence12, "#d03933")
            false
        }
        findViewById<View>(R.id.sequencer_list).findViewById<ImageView>(R.id.sequence13).setOnTouchListener { _, _ ->
            sequenceTap(a13, R.id.sequencer_list, R.id.sequence13, "#d03933")
            false
        }
        findViewById<View>(R.id.sequencer_list).findViewById<ImageView>(R.id.sequence14).setOnTouchListener { _, _ ->
            sequenceTap(a14, R.id.sequencer_list, R.id.sequence14, "#d03933")
            false
        }
        findViewById<View>(R.id.sequencer_list).findViewById<ImageView>(R.id.sequence15).setOnTouchListener { _, _ ->
            sequenceTap(a15, R.id.sequencer_list, R.id.sequence15, "#d03933")
            false
        }
        findViewById<View>(R.id.sequencer_list).findViewById<ImageView>(R.id.sequence16).setOnTouchListener { _, _ ->
            sequenceTap(a16, R.id.sequencer_list, R.id.sequence16, "#d03933")
            false
        }

        findViewById<View>(R.id.sequencer_list2).findViewById<ImageView>(R.id.sequence).setOnTouchListener { _, _ ->
            sequenceTap(b1, R.id.sequencer_list2, R.id.sequence, "#e98e2f")
            false
        }
        findViewById<View>(R.id.sequencer_list2).findViewById<ImageView>(R.id.sequence2).setOnTouchListener { _, _ ->
            sequenceTap(b2, R.id.sequencer_list2, R.id.sequence2, "#e98e2f")
            false
        }
        findViewById<View>(R.id.sequencer_list2).findViewById<ImageView>(R.id.sequence3).setOnTouchListener { _, _ ->
            sequenceTap(b3, R.id.sequencer_list2, R.id.sequence3, "#e98e2f")
            false
        }
        findViewById<View>(R.id.sequencer_list2).findViewById<ImageView>(R.id.sequence4).setOnTouchListener { _, _ ->
            sequenceTap(b4, R.id.sequencer_list2, R.id.sequence4, "#e98e2f")
            false
        }
        findViewById<View>(R.id.sequencer_list2).findViewById<ImageView>(R.id.sequence5).setOnTouchListener { _, _ ->
            sequenceTap(b5, R.id.sequencer_list2, R.id.sequence5, "#e98e2f")
            false
        }
        findViewById<View>(R.id.sequencer_list2).findViewById<ImageView>(R.id.sequence6).setOnTouchListener { _, _ ->
            sequenceTap(b6, R.id.sequencer_list2, R.id.sequence6, "#e98e2f")
            false
        }
        findViewById<View>(R.id.sequencer_list2).findViewById<ImageView>(R.id.sequence7).setOnTouchListener { _, _ ->
            sequenceTap(b7, R.id.sequencer_list2, R.id.sequence7, "#e98e2f")
            false
        }
        findViewById<View>(R.id.sequencer_list2).findViewById<ImageView>(R.id.sequence8).setOnTouchListener { _, _ ->
            sequenceTap(b8, R.id.sequencer_list2, R.id.sequence8, "#e98e2f")
            false
        }
        findViewById<View>(R.id.sequencer_list2).findViewById<ImageView>(R.id.sequence9).setOnTouchListener { _, _ ->
            sequenceTap(b9, R.id.sequencer_list2, R.id.sequence9, "#e98e2f")
            false
        }
        findViewById<View>(R.id.sequencer_list2).findViewById<ImageView>(R.id.sequence10).setOnTouchListener { _, _ ->
            sequenceTap(b10, R.id.sequencer_list2, R.id.sequence10, "#e98e2f")
            false
        }
        findViewById<View>(R.id.sequencer_list2).findViewById<ImageView>(R.id.sequence11).setOnTouchListener { _, _ ->
            sequenceTap(b11, R.id.sequencer_list2, R.id.sequence11, "#e98e2f")
            false
        }
        findViewById<View>(R.id.sequencer_list2).findViewById<ImageView>(R.id.sequence12).setOnTouchListener { _, _ ->
            sequenceTap(b12, R.id.sequencer_list2, R.id.sequence12, "#e98e2f")
            false
        }
        findViewById<View>(R.id.sequencer_list2).findViewById<ImageView>(R.id.sequence13).setOnTouchListener { _, _ ->
            sequenceTap(b13, R.id.sequencer_list2, R.id.sequence13, "#e98e2f")
            false
        }
        findViewById<View>(R.id.sequencer_list2).findViewById<ImageView>(R.id.sequence14).setOnTouchListener { _, _ ->
            sequenceTap(b14, R.id.sequencer_list2, R.id.sequence14, "#e98e2f")
            false
        }
        findViewById<View>(R.id.sequencer_list2).findViewById<ImageView>(R.id.sequence15).setOnTouchListener { _, _ ->
            sequenceTap(b15, R.id.sequencer_list2, R.id.sequence15, "#e98e2f")
            false
        }
        findViewById<View>(R.id.sequencer_list2).findViewById<ImageView>(R.id.sequence16).setOnTouchListener { _, _ ->
            sequenceTap(b16, R.id.sequencer_list2, R.id.sequence16, "#e98e2f")
            false
        }

        findViewById<View>(R.id.sequencer_list3).findViewById<ImageView>(R.id.sequence).setOnTouchListener { _, _ ->
            sequenceTap(c1, R.id.sequencer_list3, R.id.sequence, "#dfd441")
            false
        }
        findViewById<View>(R.id.sequencer_list3).findViewById<ImageView>(R.id.sequence2).setOnTouchListener { _, _ ->
            sequenceTap(c2, R.id.sequencer_list3, R.id.sequence2, "#dfd441")
            false
        }
        findViewById<View>(R.id.sequencer_list3).findViewById<ImageView>(R.id.sequence3).setOnTouchListener { _, _ ->
            sequenceTap(c3, R.id.sequencer_list3, R.id.sequence3, "#dfd441")
            false
        }
        findViewById<View>(R.id.sequencer_list3).findViewById<ImageView>(R.id.sequence4).setOnTouchListener { _, _ ->
            sequenceTap(c4, R.id.sequencer_list3, R.id.sequence4, "#dfd441")
            false
        }
        findViewById<View>(R.id.sequencer_list3).findViewById<ImageView>(R.id.sequence5).setOnTouchListener { _, _ ->
            sequenceTap(c5, R.id.sequencer_list3, R.id.sequence5, "#dfd441")
            false
        }
        findViewById<View>(R.id.sequencer_list3).findViewById<ImageView>(R.id.sequence6).setOnTouchListener { _, _ ->
            sequenceTap(c6, R.id.sequencer_list3, R.id.sequence6, "#dfd441")
            false
        }
        findViewById<View>(R.id.sequencer_list3).findViewById<ImageView>(R.id.sequence7).setOnTouchListener { _, _ ->
            sequenceTap(c7, R.id.sequencer_list3, R.id.sequence7, "#dfd441")
            false
        }
        findViewById<View>(R.id.sequencer_list3).findViewById<ImageView>(R.id.sequence8).setOnTouchListener { _, _ ->
            sequenceTap(c8, R.id.sequencer_list3, R.id.sequence8, "#dfd441")
            false
        }
        findViewById<View>(R.id.sequencer_list3).findViewById<ImageView>(R.id.sequence9).setOnTouchListener { _, _ ->
            sequenceTap(c9, R.id.sequencer_list3, R.id.sequence9, "#dfd441")
            false
        }
        findViewById<View>(R.id.sequencer_list3).findViewById<ImageView>(R.id.sequence10).setOnTouchListener { _, _ ->
            sequenceTap(c10, R.id.sequencer_list3, R.id.sequence10, "#dfd441")
            false
        }
        findViewById<View>(R.id.sequencer_list3).findViewById<ImageView>(R.id.sequence11).setOnTouchListener { _, _ ->
            sequenceTap(c11, R.id.sequencer_list3, R.id.sequence11, "#dfd441")
            false
        }
        findViewById<View>(R.id.sequencer_list3).findViewById<ImageView>(R.id.sequence12).setOnTouchListener { _, _ ->
            sequenceTap(c12, R.id.sequencer_list3, R.id.sequence12, "#dfd441")
            false
        }
        findViewById<View>(R.id.sequencer_list3).findViewById<ImageView>(R.id.sequence13).setOnTouchListener { _, _ ->
            sequenceTap(c13, R.id.sequencer_list3, R.id.sequence13, "#dfd441")
            false
        }
        findViewById<View>(R.id.sequencer_list3).findViewById<ImageView>(R.id.sequence14).setOnTouchListener { _, _ ->
            sequenceTap(c14, R.id.sequencer_list3, R.id.sequence14, "#dfd441")
            false
        }
        findViewById<View>(R.id.sequencer_list3).findViewById<ImageView>(R.id.sequence15).setOnTouchListener { _, _ ->
            sequenceTap(c15, R.id.sequencer_list3, R.id.sequence15, "#dfd441")
            false
        }
        findViewById<View>(R.id.sequencer_list3).findViewById<ImageView>(R.id.sequence16).setOnTouchListener { _, _ ->
            sequenceTap(c16, R.id.sequencer_list3, R.id.sequence16, "#dfd441")
            false
        }

        findViewById<View>(R.id.sequencer_list4).findViewById<ImageView>(R.id.sequence).setOnTouchListener { _, _ ->
            sequenceTap(d1, R.id.sequencer_list4, R.id.sequence, "#e9e8e7")
            false
        }
        findViewById<View>(R.id.sequencer_list4).findViewById<ImageView>(R.id.sequence2).setOnTouchListener { _, _ ->
            sequenceTap(d2, R.id.sequencer_list4, R.id.sequence2, "#e9e8e7")
            false
        }
        findViewById<View>(R.id.sequencer_list4).findViewById<ImageView>(R.id.sequence3).setOnTouchListener { _, _ ->
            sequenceTap(d3, R.id.sequencer_list4, R.id.sequence3, "#e9e8e7")
            false
        }
        findViewById<View>(R.id.sequencer_list4).findViewById<ImageView>(R.id.sequence4).setOnTouchListener { _, _ ->
            sequenceTap(d4, R.id.sequencer_list4, R.id.sequence4, "#e9e8e7")
            false
        }
        findViewById<View>(R.id.sequencer_list4).findViewById<ImageView>(R.id.sequence5).setOnTouchListener { _, _ ->
            sequenceTap(d5, R.id.sequencer_list4, R.id.sequence5, "#e9e8e7")
            false
        }
        findViewById<View>(R.id.sequencer_list4).findViewById<ImageView>(R.id.sequence6).setOnTouchListener { _, _ ->
            sequenceTap(d6, R.id.sequencer_list4, R.id.sequence6, "#e9e8e7")
            false
        }
        findViewById<View>(R.id.sequencer_list4).findViewById<ImageView>(R.id.sequence7).setOnTouchListener { _, _ ->
            sequenceTap(d7, R.id.sequencer_list4, R.id.sequence7, "#e9e8e7")
            false
        }
        findViewById<View>(R.id.sequencer_list4).findViewById<ImageView>(R.id.sequence8).setOnTouchListener { _, _ ->
            sequenceTap(d8, R.id.sequencer_list4, R.id.sequence8, "#e9e8e7")
            false
        }
        findViewById<View>(R.id.sequencer_list4).findViewById<ImageView>(R.id.sequence9).setOnTouchListener { _, _ ->
            sequenceTap(d9, R.id.sequencer_list4, R.id.sequence9, "#e9e8e7")
            false
        }
        findViewById<View>(R.id.sequencer_list4).findViewById<ImageView>(R.id.sequence10).setOnTouchListener { _, _ ->
            sequenceTap(d10, R.id.sequencer_list4, R.id.sequence10, "#e9e8e7")
            false
        }
        findViewById<View>(R.id.sequencer_list4).findViewById<ImageView>(R.id.sequence11).setOnTouchListener { _, _ ->
            sequenceTap(d11, R.id.sequencer_list4, R.id.sequence11, "#e9e8e7")
            false
        }
        findViewById<View>(R.id.sequencer_list4).findViewById<ImageView>(R.id.sequence12).setOnTouchListener { _, _ ->
            sequenceTap(d12, R.id.sequencer_list4, R.id.sequence12, "#e9e8e7")
            false
        }
        findViewById<View>(R.id.sequencer_list4).findViewById<ImageView>(R.id.sequence13).setOnTouchListener { _, _ ->
            sequenceTap(d13, R.id.sequencer_list4, R.id.sequence13, "#e9e8e7")
            false
        }
        findViewById<View>(R.id.sequencer_list4).findViewById<ImageView>(R.id.sequence14).setOnTouchListener { _, _ ->
            sequenceTap(d14, R.id.sequencer_list4, R.id.sequence14, "#e9e8e7")
            false
        }
        findViewById<View>(R.id.sequencer_list4).findViewById<ImageView>(R.id.sequence15).setOnTouchListener { _, _ ->
            sequenceTap(d15, R.id.sequencer_list4, R.id.sequence15, "#e9e8e7")
            false
        }
        findViewById<View>(R.id.sequencer_list4).findViewById<ImageView>(R.id.sequence16).setOnTouchListener { _, _ ->
            sequenceTap(d16, R.id.sequencer_list4, R.id.sequence16, "#e9e8e7")
            false
        }

        findViewById<View>(R.id.sequencer_list5).findViewById<ImageView>(R.id.sequence).setOnTouchListener { _, _ ->
            sequenceTap(e1, R.id.sequencer_list5, R.id.sequence, "#ffffff")
            false
        }
        findViewById<View>(R.id.sequencer_list5).findViewById<ImageView>(R.id.sequence2).setOnTouchListener { _, _ ->
            sequenceTap(e2, R.id.sequencer_list5, R.id.sequence2, "#ffffff")
            false
        }
        findViewById<View>(R.id.sequencer_list5).findViewById<ImageView>(R.id.sequence3).setOnTouchListener { _, _ ->
            sequenceTap(e3, R.id.sequencer_list5, R.id.sequence3, "#ffffff")
            false
        }
        findViewById<View>(R.id.sequencer_list5).findViewById<ImageView>(R.id.sequence4).setOnTouchListener { _, _ ->
            sequenceTap(e4, R.id.sequencer_list5, R.id.sequence4, "#ffffff")
            false
        }
        findViewById<View>(R.id.sequencer_list5).findViewById<ImageView>(R.id.sequence5).setOnTouchListener { _, _ ->
            sequenceTap(e5, R.id.sequencer_list5, R.id.sequence5, "#ffffff")
            false
        }
        findViewById<View>(R.id.sequencer_list5).findViewById<ImageView>(R.id.sequence6).setOnTouchListener { _, _ ->
            sequenceTap(e6, R.id.sequencer_list5, R.id.sequence6, "#ffffff")
            false
        }
        findViewById<View>(R.id.sequencer_list5).findViewById<ImageView>(R.id.sequence7).setOnTouchListener { _, _ ->
            sequenceTap(e7, R.id.sequencer_list5, R.id.sequence7, "#ffffff")
            false
        }
        findViewById<View>(R.id.sequencer_list5).findViewById<ImageView>(R.id.sequence8).setOnTouchListener { _, _ ->
            sequenceTap(e8, R.id.sequencer_list5, R.id.sequence8, "#ffffff")
            false
        }
        findViewById<View>(R.id.sequencer_list5).findViewById<ImageView>(R.id.sequence9).setOnTouchListener { _, _ ->
            sequenceTap(e9, R.id.sequencer_list5, R.id.sequence9, "#ffffff")
            false
        }
        findViewById<View>(R.id.sequencer_list5).findViewById<ImageView>(R.id.sequence10).setOnTouchListener { _, _ ->
            sequenceTap(e10, R.id.sequencer_list5, R.id.sequence10, "#ffffff")
            false
        }
        findViewById<View>(R.id.sequencer_list5).findViewById<ImageView>(R.id.sequence11).setOnTouchListener { _, _ ->
            sequenceTap(e11, R.id.sequencer_list5, R.id.sequence11, "#ffffff")
            false
        }
        findViewById<View>(R.id.sequencer_list5).findViewById<ImageView>(R.id.sequence12).setOnTouchListener { _, _ ->
            sequenceTap(e12, R.id.sequencer_list5, R.id.sequence12, "#ffffff")
            false
        }
        findViewById<View>(R.id.sequencer_list5).findViewById<ImageView>(R.id.sequence13).setOnTouchListener { _, _ ->
            sequenceTap(e13, R.id.sequencer_list5, R.id.sequence13, "#ffffff")
            false
        }
        findViewById<View>(R.id.sequencer_list5).findViewById<ImageView>(R.id.sequence14).setOnTouchListener { _, _ ->
            sequenceTap(e14, R.id.sequencer_list5, R.id.sequence14, "#ffffff")
            false
        }
        findViewById<View>(R.id.sequencer_list5).findViewById<ImageView>(R.id.sequence15).setOnTouchListener { _, _ ->
            sequenceTap(e15, R.id.sequencer_list5, R.id.sequence15, "#ffffff")
            false
        }
        findViewById<View>(R.id.sequencer_list5).findViewById<ImageView>(R.id.sequence16).setOnTouchListener { _, _ ->
            sequenceTap(e16, R.id.sequencer_list5, R.id.sequence16, "#ffffff")
            false
        }

        findViewById<View>(R.id.sequencer_list6).findViewById<ImageView>(R.id.sequence).setOnTouchListener { _, _ ->
            sequenceTap(f1, R.id.sequencer_list6, R.id.sequence, "#d03933")
            false
        }
        findViewById<View>(R.id.sequencer_list6).findViewById<ImageView>(R.id.sequence2).setOnTouchListener { _, _ ->
            sequenceTap(f2, R.id.sequencer_list6, R.id.sequence2, "#d03933")
            false
        }
        findViewById<View>(R.id.sequencer_list6).findViewById<ImageView>(R.id.sequence3).setOnTouchListener { _, _ ->
            sequenceTap(f3, R.id.sequencer_list6, R.id.sequence3, "#d03933")
            false
        }
        findViewById<View>(R.id.sequencer_list6).findViewById<ImageView>(R.id.sequence4).setOnTouchListener { _, _ ->
            sequenceTap(f4, R.id.sequencer_list6, R.id.sequence4, "#d03933")
            false
        }
        findViewById<View>(R.id.sequencer_list6).findViewById<ImageView>(R.id.sequence5).setOnTouchListener { _, _ ->
            sequenceTap(f5, R.id.sequencer_list6, R.id.sequence5, "#d03933")
            false
        }
        findViewById<View>(R.id.sequencer_list6).findViewById<ImageView>(R.id.sequence6).setOnTouchListener { _, _ ->
            sequenceTap(f6, R.id.sequencer_list6, R.id.sequence6, "#d03933")
            false
        }
        findViewById<View>(R.id.sequencer_list6).findViewById<ImageView>(R.id.sequence7).setOnTouchListener { _, _ ->
            sequenceTap(f7, R.id.sequencer_list6, R.id.sequence7, "#d03933")
            false
        }
        findViewById<View>(R.id.sequencer_list6).findViewById<ImageView>(R.id.sequence8).setOnTouchListener { _, _ ->
            sequenceTap(f8, R.id.sequencer_list6, R.id.sequence8, "#d03933")
            false
        }
        findViewById<View>(R.id.sequencer_list6).findViewById<ImageView>(R.id.sequence9).setOnTouchListener { _, _ ->
            sequenceTap(f9, R.id.sequencer_list6, R.id.sequence9, "#d03933")
            false
        }
        findViewById<View>(R.id.sequencer_list6).findViewById<ImageView>(R.id.sequence10).setOnTouchListener { _, _ ->
            sequenceTap(f10, R.id.sequencer_list6, R.id.sequence10, "#d03933")
            false
        }
        findViewById<View>(R.id.sequencer_list6).findViewById<ImageView>(R.id.sequence11).setOnTouchListener { _, _ ->
            sequenceTap(f11, R.id.sequencer_list6, R.id.sequence11, "#d03933")
            false
        }
        findViewById<View>(R.id.sequencer_list6).findViewById<ImageView>(R.id.sequence12).setOnTouchListener { _, _ ->
            sequenceTap(f12, R.id.sequencer_list6, R.id.sequence12, "#d03933")
            false
        }
        findViewById<View>(R.id.sequencer_list6).findViewById<ImageView>(R.id.sequence13).setOnTouchListener { _, _ ->
            sequenceTap(f13, R.id.sequencer_list6, R.id.sequence13, "#d03933")
            false
        }
        findViewById<View>(R.id.sequencer_list6).findViewById<ImageView>(R.id.sequence14).setOnTouchListener { _, _ ->
            sequenceTap(f14, R.id.sequencer_list6, R.id.sequence14, "#d03933")
            false
        }
        findViewById<View>(R.id.sequencer_list6).findViewById<ImageView>(R.id.sequence15).setOnTouchListener { _, _ ->
            sequenceTap(f15, R.id.sequencer_list6, R.id.sequence15, "#d03933")
            false
        }
        findViewById<View>(R.id.sequencer_list6).findViewById<ImageView>(R.id.sequence16).setOnTouchListener { _, _ ->
            sequenceTap(f16, R.id.sequencer_list6, R.id.sequence16, "#d03933")
            false
        }

        findViewById<View>(R.id.sequencer_list7).findViewById<ImageView>(R.id.sequence).setOnTouchListener { _, _ ->
            sequenceTap(g1, R.id.sequencer_list7, R.id.sequence, "#e98e2f")
            false
        }
        findViewById<View>(R.id.sequencer_list7).findViewById<ImageView>(R.id.sequence2).setOnTouchListener { _, _ ->
            sequenceTap(g2, R.id.sequencer_list7, R.id.sequence2, "#e98e2f")
            false
        }
        findViewById<View>(R.id.sequencer_list7).findViewById<ImageView>(R.id.sequence3).setOnTouchListener { _, _ ->
            sequenceTap(g3, R.id.sequencer_list7, R.id.sequence3, "#e98e2f")
            false
        }
        findViewById<View>(R.id.sequencer_list7).findViewById<ImageView>(R.id.sequence4).setOnTouchListener { _, _ ->
            sequenceTap(g4, R.id.sequencer_list7, R.id.sequence4, "#e98e2f")
            false
        }
        findViewById<View>(R.id.sequencer_list7).findViewById<ImageView>(R.id.sequence5).setOnTouchListener { _, _ ->
            sequenceTap(g5, R.id.sequencer_list7, R.id.sequence5, "#e98e2f")
            false
        }
        findViewById<View>(R.id.sequencer_list7).findViewById<ImageView>(R.id.sequence6).setOnTouchListener { _, _ ->
            sequenceTap(g6, R.id.sequencer_list7, R.id.sequence6, "#e98e2f")
            false
        }
        findViewById<View>(R.id.sequencer_list7).findViewById<ImageView>(R.id.sequence7).setOnTouchListener { _, _ ->
            sequenceTap(g7, R.id.sequencer_list7, R.id.sequence7, "#e98e2f")
            false
        }
        findViewById<View>(R.id.sequencer_list7).findViewById<ImageView>(R.id.sequence8).setOnTouchListener { _, _ ->
            sequenceTap(g8, R.id.sequencer_list7, R.id.sequence8, "#e98e2f")
            false
        }
        findViewById<View>(R.id.sequencer_list7).findViewById<ImageView>(R.id.sequence9).setOnTouchListener { _, _ ->
            sequenceTap(g9, R.id.sequencer_list7, R.id.sequence9, "#e98e2f")
            false
        }
        findViewById<View>(R.id.sequencer_list7).findViewById<ImageView>(R.id.sequence10).setOnTouchListener { _, _ ->
            sequenceTap(g10, R.id.sequencer_list7, R.id.sequence10, "#e98e2f")
            false
        }
        findViewById<View>(R.id.sequencer_list7).findViewById<ImageView>(R.id.sequence11).setOnTouchListener { _, _ ->
            sequenceTap(g11, R.id.sequencer_list7, R.id.sequence11, "#e98e2f")
            false
        }
        findViewById<View>(R.id.sequencer_list7).findViewById<ImageView>(R.id.sequence12).setOnTouchListener { _, _ ->
            sequenceTap(g12, R.id.sequencer_list7, R.id.sequence12, "#e98e2f")
            false
        }
        findViewById<View>(R.id.sequencer_list7).findViewById<ImageView>(R.id.sequence13).setOnTouchListener { _, _ ->
            sequenceTap(g13, R.id.sequencer_list7, R.id.sequence13, "#e98e2f")
            false
        }
        findViewById<View>(R.id.sequencer_list7).findViewById<ImageView>(R.id.sequence14).setOnTouchListener { _, _ ->
            sequenceTap(g14, R.id.sequencer_list7, R.id.sequence14, "#e98e2f")
            false
        }
        findViewById<View>(R.id.sequencer_list7).findViewById<ImageView>(R.id.sequence15).setOnTouchListener { _, _ ->
            sequenceTap(g15, R.id.sequencer_list7, R.id.sequence15, "#e98e2f")
            false
        }
        findViewById<View>(R.id.sequencer_list7).findViewById<ImageView>(R.id.sequence16).setOnTouchListener { _, _ ->
            sequenceTap(g16, R.id.sequencer_list7, R.id.sequence16, "#e98e2f")
            false
        }

        findViewById<View>(R.id.sequencer_list8).findViewById<ImageView>(R.id.sequence).setOnTouchListener { _, _ ->
            sequenceTap(h1, R.id.sequencer_list8, R.id.sequence, "#dfd441")
            false
        }
        findViewById<View>(R.id.sequencer_list8).findViewById<ImageView>(R.id.sequence2).setOnTouchListener { _, _ ->
            sequenceTap(h2, R.id.sequencer_list8, R.id.sequence2, "#dfd441")
            false
        }
        findViewById<View>(R.id.sequencer_list8).findViewById<ImageView>(R.id.sequence3).setOnTouchListener { _, _ ->
            sequenceTap(h3, R.id.sequencer_list8, R.id.sequence3, "#dfd441")
            false
        }
        findViewById<View>(R.id.sequencer_list8).findViewById<ImageView>(R.id.sequence4).setOnTouchListener { _, _ ->
            sequenceTap(h4, R.id.sequencer_list8, R.id.sequence4, "#dfd441")
            false
        }
        findViewById<View>(R.id.sequencer_list8).findViewById<ImageView>(R.id.sequence5).setOnTouchListener { _, _ ->
            sequenceTap(h5, R.id.sequencer_list8, R.id.sequence5, "#dfd441")
            false
        }
        findViewById<View>(R.id.sequencer_list8).findViewById<ImageView>(R.id.sequence6).setOnTouchListener { _, _ ->
            sequenceTap(h6, R.id.sequencer_list8, R.id.sequence6, "#dfd441")
            false
        }
        findViewById<View>(R.id.sequencer_list8).findViewById<ImageView>(R.id.sequence7).setOnTouchListener { _, _ ->
            sequenceTap(h7, R.id.sequencer_list8, R.id.sequence7, "#dfd441")
            false
        }
        findViewById<View>(R.id.sequencer_list8).findViewById<ImageView>(R.id.sequence8).setOnTouchListener { _, _ ->
            sequenceTap(h8, R.id.sequencer_list8, R.id.sequence8, "#dfd441")
            false
        }
        findViewById<View>(R.id.sequencer_list8).findViewById<ImageView>(R.id.sequence9).setOnTouchListener { _, _ ->
            sequenceTap(h9, R.id.sequencer_list8, R.id.sequence9, "#dfd441")
            false
        }
        findViewById<View>(R.id.sequencer_list8).findViewById<ImageView>(R.id.sequence10).setOnTouchListener { _, _ ->
            sequenceTap(h10, R.id.sequencer_list8, R.id.sequence10, "#dfd441")
            false
        }
        findViewById<View>(R.id.sequencer_list8).findViewById<ImageView>(R.id.sequence11).setOnTouchListener { _, _ ->
            sequenceTap(h11, R.id.sequencer_list8, R.id.sequence11, "#dfd441")
            false
        }
        findViewById<View>(R.id.sequencer_list8).findViewById<ImageView>(R.id.sequence12).setOnTouchListener { _, _ ->
            sequenceTap(h12, R.id.sequencer_list8, R.id.sequence12, "#dfd441")
            false
        }
        findViewById<View>(R.id.sequencer_list8).findViewById<ImageView>(R.id.sequence13).setOnTouchListener { _, _ ->
            sequenceTap(h13, R.id.sequencer_list8, R.id.sequence13, "#dfd441")
            false
        }
        findViewById<View>(R.id.sequencer_list8).findViewById<ImageView>(R.id.sequence14).setOnTouchListener { _, _ ->
            sequenceTap(h14, R.id.sequencer_list8, R.id.sequence14, "#dfd441")
            false
        }
        findViewById<View>(R.id.sequencer_list8).findViewById<ImageView>(R.id.sequence15).setOnTouchListener { _, _ ->
            sequenceTap(h15, R.id.sequencer_list8, R.id.sequence15, "#dfd441")
            false
        }
        findViewById<View>(R.id.sequencer_list8).findViewById<ImageView>(R.id.sequence16).setOnTouchListener { _, _ ->
            sequenceTap(h16, R.id.sequencer_list8, R.id.sequence16, "#dfd441")
            false
        }

        findViewById<View>(R.id.sequencer_list9).findViewById<ImageView>(R.id.sequence).setOnTouchListener { _, _ ->
            sequenceTap(i1, R.id.sequencer_list9, R.id.sequence, "#e9e8e7")
            false
        }
        findViewById<View>(R.id.sequencer_list9).findViewById<ImageView>(R.id.sequence2).setOnTouchListener { _, _ ->
            sequenceTap(i2, R.id.sequencer_list9, R.id.sequence2, "#e9e8e7")
            false
        }
        findViewById<View>(R.id.sequencer_list9).findViewById<ImageView>(R.id.sequence3).setOnTouchListener { _, _ ->
            sequenceTap(i3, R.id.sequencer_list9, R.id.sequence3, "#e9e8e7")
            false
        }
        findViewById<View>(R.id.sequencer_list9).findViewById<ImageView>(R.id.sequence4).setOnTouchListener { _, _ ->
            sequenceTap(i4, R.id.sequencer_list9, R.id.sequence4, "#e9e8e7")
            false
        }
        findViewById<View>(R.id.sequencer_list9).findViewById<ImageView>(R.id.sequence5).setOnTouchListener { _, _ ->
            sequenceTap(i5, R.id.sequencer_list9, R.id.sequence5, "#e9e8e7")
            false
        }
        findViewById<View>(R.id.sequencer_list9).findViewById<ImageView>(R.id.sequence6).setOnTouchListener { _, _ ->
            sequenceTap(i6, R.id.sequencer_list9, R.id.sequence6, "#e9e8e7")
            false
        }
        findViewById<View>(R.id.sequencer_list9).findViewById<ImageView>(R.id.sequence7).setOnTouchListener { _, _ ->
            sequenceTap(i7, R.id.sequencer_list9, R.id.sequence7, "#e9e8e7")
            false
        }
        findViewById<View>(R.id.sequencer_list9).findViewById<ImageView>(R.id.sequence8).setOnTouchListener { _, _ ->
            sequenceTap(i8, R.id.sequencer_list9, R.id.sequence8, "#e9e8e7")
            false
        }
        findViewById<View>(R.id.sequencer_list9).findViewById<ImageView>(R.id.sequence9).setOnTouchListener { _, _ ->
            sequenceTap(i9, R.id.sequencer_list9, R.id.sequence9, "#e9e8e7")
            false
        }
        findViewById<View>(R.id.sequencer_list9).findViewById<ImageView>(R.id.sequence10).setOnTouchListener { _, _ ->
            sequenceTap(i10, R.id.sequencer_list9, R.id.sequence10, "#e9e8e7")
            false
        }
        findViewById<View>(R.id.sequencer_list9).findViewById<ImageView>(R.id.sequence11).setOnTouchListener { _, _ ->
            sequenceTap(i11, R.id.sequencer_list9, R.id.sequence11, "#e9e8e7")
            false
        }
        findViewById<View>(R.id.sequencer_list9).findViewById<ImageView>(R.id.sequence12).setOnTouchListener { _, _ ->
            sequenceTap(i12, R.id.sequencer_list9, R.id.sequence12, "#e9e8e7")
            false
        }
        findViewById<View>(R.id.sequencer_list9).findViewById<ImageView>(R.id.sequence13).setOnTouchListener { _, _ ->
            sequenceTap(i13, R.id.sequencer_list9, R.id.sequence13, "#e9e8e7")
            false
        }
        findViewById<View>(R.id.sequencer_list9).findViewById<ImageView>(R.id.sequence14).setOnTouchListener { _, _ ->
            sequenceTap(i14, R.id.sequencer_list9, R.id.sequence14, "#e9e8e7")
            false
        }
        findViewById<View>(R.id.sequencer_list9).findViewById<ImageView>(R.id.sequence15).setOnTouchListener { _, _ ->
            sequenceTap(i15, R.id.sequencer_list9, R.id.sequence15, "#e9e8e7")
            false
        }
        findViewById<View>(R.id.sequencer_list9).findViewById<ImageView>(R.id.sequence16).setOnTouchListener { _, _ ->
            sequenceTap(i16, R.id.sequencer_list9, R.id.sequence16, "#e9e8e7")
            false
        }

        findViewById<View>(R.id.sequencer_list10).findViewById<ImageView>(R.id.sequence).setOnTouchListener { _, _ ->
            sequenceTap(j1, R.id.sequencer_list10, R.id.sequence, "#ffffff")
            false
        }
        findViewById<View>(R.id.sequencer_list10).findViewById<ImageView>(R.id.sequence2).setOnTouchListener { _, _ ->
            sequenceTap(j2, R.id.sequencer_list10, R.id.sequence2, "#ffffff")
            false
        }
        findViewById<View>(R.id.sequencer_list10).findViewById<ImageView>(R.id.sequence3).setOnTouchListener { _, _ ->
            sequenceTap(j3, R.id.sequencer_list10, R.id.sequence3, "#ffffff")
            false
        }
        findViewById<View>(R.id.sequencer_list10).findViewById<ImageView>(R.id.sequence4).setOnTouchListener { _, _ ->
            sequenceTap(j4, R.id.sequencer_list10, R.id.sequence4, "#ffffff")
            false
        }
        findViewById<View>(R.id.sequencer_list10).findViewById<ImageView>(R.id.sequence5).setOnTouchListener { _, _ ->
            sequenceTap(j5, R.id.sequencer_list10, R.id.sequence5, "#ffffff")
            false
        }
        findViewById<View>(R.id.sequencer_list10).findViewById<ImageView>(R.id.sequence6).setOnTouchListener { _, _ ->
            sequenceTap(j6, R.id.sequencer_list10, R.id.sequence6, "#ffffff")
            false
        }
        findViewById<View>(R.id.sequencer_list10).findViewById<ImageView>(R.id.sequence7).setOnTouchListener { _, _ ->
            sequenceTap(j7, R.id.sequencer_list10, R.id.sequence7, "#ffffff")
            false
        }
        findViewById<View>(R.id.sequencer_list10).findViewById<ImageView>(R.id.sequence8).setOnTouchListener { _, _ ->
            sequenceTap(j8, R.id.sequencer_list10, R.id.sequence8, "#ffffff")
            false
        }
        findViewById<View>(R.id.sequencer_list10).findViewById<ImageView>(R.id.sequence9).setOnTouchListener { _, _ ->
            sequenceTap(j9, R.id.sequencer_list10, R.id.sequence9, "#ffffff")
            false
        }
        findViewById<View>(R.id.sequencer_list10).findViewById<ImageView>(R.id.sequence10).setOnTouchListener { _, _ ->
            sequenceTap(j10, R.id.sequencer_list10, R.id.sequence10, "#ffffff")
            false
        }
        findViewById<View>(R.id.sequencer_list10).findViewById<ImageView>(R.id.sequence11).setOnTouchListener { _, _ ->
            sequenceTap(j11, R.id.sequencer_list10, R.id.sequence11, "#ffffff")
            false
        }
        findViewById<View>(R.id.sequencer_list10).findViewById<ImageView>(R.id.sequence12).setOnTouchListener { _, _ ->
            sequenceTap(j12, R.id.sequencer_list10, R.id.sequence12, "#ffffff")
            false
        }
        findViewById<View>(R.id.sequencer_list10).findViewById<ImageView>(R.id.sequence13).setOnTouchListener { _, _ ->
            sequenceTap(j13, R.id.sequencer_list10, R.id.sequence13, "#ffffff")
            false
        }
        findViewById<View>(R.id.sequencer_list10).findViewById<ImageView>(R.id.sequence14).setOnTouchListener { _, _ ->
            sequenceTap(j14, R.id.sequencer_list10, R.id.sequence14, "#ffffff")
            false
        }
        findViewById<View>(R.id.sequencer_list10).findViewById<ImageView>(R.id.sequence15).setOnTouchListener { _, _ ->
            sequenceTap(j15, R.id.sequencer_list10, R.id.sequence15, "#ffffff")
            false
        }
        findViewById<View>(R.id.sequencer_list10).findViewById<ImageView>(R.id.sequence16).setOnTouchListener { _, _ ->
            sequenceTap(j16, R.id.sequencer_list10, R.id.sequence16, "#ffffff")
            false
        }

        findViewById<View>(R.id.sequencer_list11).findViewById<ImageView>(R.id.sequence).setOnTouchListener { _, _ ->
            sequenceTap(k1, R.id.sequencer_list11, R.id.sequence, "#d03933")
            false
        }
        findViewById<View>(R.id.sequencer_list11).findViewById<ImageView>(R.id.sequence2).setOnTouchListener { _, _ ->
            sequenceTap(k2, R.id.sequencer_list11, R.id.sequence2, "#d03933")
            false
        }
        findViewById<View>(R.id.sequencer_list11).findViewById<ImageView>(R.id.sequence3).setOnTouchListener { _, _ ->
            sequenceTap(k3, R.id.sequencer_list11, R.id.sequence3, "#d03933")
            false
        }
        findViewById<View>(R.id.sequencer_list11).findViewById<ImageView>(R.id.sequence4).setOnTouchListener { _, _ ->
            sequenceTap(k4, R.id.sequencer_list11, R.id.sequence4, "#d03933")
            false
        }
        findViewById<View>(R.id.sequencer_list11).findViewById<ImageView>(R.id.sequence5).setOnTouchListener { _, _ ->
            sequenceTap(k5, R.id.sequencer_list11, R.id.sequence5, "#d03933")
            false
        }
        findViewById<View>(R.id.sequencer_list11).findViewById<ImageView>(R.id.sequence6).setOnTouchListener { _, _ ->
            sequenceTap(k6, R.id.sequencer_list11, R.id.sequence6, "#d03933")
            false
        }
        findViewById<View>(R.id.sequencer_list11).findViewById<ImageView>(R.id.sequence7).setOnTouchListener { _, _ ->
            sequenceTap(k7, R.id.sequencer_list11, R.id.sequence7, "#d03933")
            false
        }
        findViewById<View>(R.id.sequencer_list11).findViewById<ImageView>(R.id.sequence8).setOnTouchListener { _, _ ->
            sequenceTap(k8, R.id.sequencer_list11, R.id.sequence8, "#d03933")
            false
        }
        findViewById<View>(R.id.sequencer_list11).findViewById<ImageView>(R.id.sequence9).setOnTouchListener { _, _ ->
            sequenceTap(k9, R.id.sequencer_list11, R.id.sequence9, "#d03933")
            false
        }
        findViewById<View>(R.id.sequencer_list11).findViewById<ImageView>(R.id.sequence10).setOnTouchListener { _, _ ->
            sequenceTap(k10, R.id.sequencer_list11, R.id.sequence10, "#d03933")
            false
        }
        findViewById<View>(R.id.sequencer_list11).findViewById<ImageView>(R.id.sequence11).setOnTouchListener { _, _ ->
            sequenceTap(k11, R.id.sequencer_list11, R.id.sequence11, "#d03933")
            false
        }
        findViewById<View>(R.id.sequencer_list11).findViewById<ImageView>(R.id.sequence12).setOnTouchListener { _, _ ->
            sequenceTap(k12, R.id.sequencer_list11, R.id.sequence12, "#d03933")
            false
        }
        findViewById<View>(R.id.sequencer_list11).findViewById<ImageView>(R.id.sequence13).setOnTouchListener { _, _ ->
            sequenceTap(k13, R.id.sequencer_list11, R.id.sequence13, "#d03933")
            false
        }
        findViewById<View>(R.id.sequencer_list11).findViewById<ImageView>(R.id.sequence14).setOnTouchListener { _, _ ->
            sequenceTap(k14, R.id.sequencer_list11, R.id.sequence14, "#d03933")
            false
        }
        findViewById<View>(R.id.sequencer_list11).findViewById<ImageView>(R.id.sequence15).setOnTouchListener { _, _ ->
            sequenceTap(k15, R.id.sequencer_list11, R.id.sequence15, "#d03933")
            false
        }
        findViewById<View>(R.id.sequencer_list11).findViewById<ImageView>(R.id.sequence16).setOnTouchListener { _, _ ->
            sequenceTap(k16, R.id.sequencer_list11, R.id.sequence16, "#d03933")
            false
        }

        findViewById<View>(R.id.sequencer_list12).findViewById<ImageView>(R.id.sequence).setOnTouchListener { _, _ ->
            sequenceTap(l1, R.id.sequencer_list12, R.id.sequence, "#e98e2f")
            false
        }
        findViewById<View>(R.id.sequencer_list12).findViewById<ImageView>(R.id.sequence2).setOnTouchListener { _, _ ->
            sequenceTap(l2, R.id.sequencer_list12, R.id.sequence2, "#e98e2f")
            false
        }
        findViewById<View>(R.id.sequencer_list12).findViewById<ImageView>(R.id.sequence3).setOnTouchListener { _, _ ->
            sequenceTap(l3, R.id.sequencer_list12, R.id.sequence3, "#e98e2f")
            false
        }
        findViewById<View>(R.id.sequencer_list12).findViewById<ImageView>(R.id.sequence4).setOnTouchListener { _, _ ->
            sequenceTap(l4, R.id.sequencer_list12, R.id.sequence4, "#e98e2f")
            false
        }
        findViewById<View>(R.id.sequencer_list12).findViewById<ImageView>(R.id.sequence5).setOnTouchListener { _, _ ->
            sequenceTap(l5, R.id.sequencer_list12, R.id.sequence5, "#e98e2f")
            false
        }
        findViewById<View>(R.id.sequencer_list12).findViewById<ImageView>(R.id.sequence6).setOnTouchListener { _, _ ->
            sequenceTap(l6, R.id.sequencer_list12, R.id.sequence6, "#e98e2f")
            false
        }
        findViewById<View>(R.id.sequencer_list12).findViewById<ImageView>(R.id.sequence7).setOnTouchListener { _, _ ->
            sequenceTap(l7, R.id.sequencer_list12, R.id.sequence7, "#e98e2f")
            false
        }
        findViewById<View>(R.id.sequencer_list12).findViewById<ImageView>(R.id.sequence8).setOnTouchListener { _, _ ->
            sequenceTap(l8, R.id.sequencer_list12, R.id.sequence8, "#e98e2f")
            false
        }
        findViewById<View>(R.id.sequencer_list12).findViewById<ImageView>(R.id.sequence9).setOnTouchListener { _, _ ->
            sequenceTap(l9, R.id.sequencer_list12, R.id.sequence9, "#e98e2f")
            false
        }
        findViewById<View>(R.id.sequencer_list12).findViewById<ImageView>(R.id.sequence10).setOnTouchListener { _, _ ->
            sequenceTap(l10, R.id.sequencer_list12, R.id.sequence10, "#e98e2f")
            false
        }
        findViewById<View>(R.id.sequencer_list12).findViewById<ImageView>(R.id.sequence11).setOnTouchListener { _, _ ->
            sequenceTap(l11, R.id.sequencer_list12, R.id.sequence11, "#e98e2f")
            false
        }
        findViewById<View>(R.id.sequencer_list12).findViewById<ImageView>(R.id.sequence12).setOnTouchListener { _, _ ->
            sequenceTap(l12, R.id.sequencer_list12, R.id.sequence12, "#e98e2f")
            false
        }
        findViewById<View>(R.id.sequencer_list12).findViewById<ImageView>(R.id.sequence13).setOnTouchListener { _, _ ->
            sequenceTap(l13, R.id.sequencer_list12, R.id.sequence13, "#e98e2f")
            false
        }
        findViewById<View>(R.id.sequencer_list12).findViewById<ImageView>(R.id.sequence14).setOnTouchListener { _, _ ->
            sequenceTap(l14, R.id.sequencer_list12, R.id.sequence14, "#e98e2f")
            false
        }
        findViewById<View>(R.id.sequencer_list12).findViewById<ImageView>(R.id.sequence15).setOnTouchListener { _, _ ->
            sequenceTap(l15, R.id.sequencer_list12, R.id.sequence15, "#e98e2f")
            false
        }
        findViewById<View>(R.id.sequencer_list12).findViewById<ImageView>(R.id.sequence16).setOnTouchListener { _, _ ->
            sequenceTap(l16, R.id.sequencer_list12, R.id.sequence16, "#e98e2f")
            false
        }

        findViewById<View>(R.id.sequencer_list13).findViewById<ImageView>(R.id.sequence).setOnTouchListener { _, _ ->
            sequenceTap(m1, R.id.sequencer_list13, R.id.sequence, "#dfd441")
            false
        }
        findViewById<View>(R.id.sequencer_list13).findViewById<ImageView>(R.id.sequence2).setOnTouchListener { _, _ ->
            sequenceTap(m2, R.id.sequencer_list13, R.id.sequence2, "#dfd441")
            false
        }
        findViewById<View>(R.id.sequencer_list13).findViewById<ImageView>(R.id.sequence3).setOnTouchListener { _, _ ->
            sequenceTap(m3, R.id.sequencer_list13, R.id.sequence3, "#dfd441")
            false
        }
        findViewById<View>(R.id.sequencer_list13).findViewById<ImageView>(R.id.sequence4).setOnTouchListener { _, _ ->
            sequenceTap(m4, R.id.sequencer_list13, R.id.sequence4, "#dfd441")
            false
        }
        findViewById<View>(R.id.sequencer_list13).findViewById<ImageView>(R.id.sequence5).setOnTouchListener { _, _ ->
            sequenceTap(m5, R.id.sequencer_list13, R.id.sequence5, "#dfd441")
            false
        }
        findViewById<View>(R.id.sequencer_list13).findViewById<ImageView>(R.id.sequence6).setOnTouchListener { _, _ ->
            sequenceTap(m6, R.id.sequencer_list13, R.id.sequence6, "#dfd441")
            false
        }
        findViewById<View>(R.id.sequencer_list13).findViewById<ImageView>(R.id.sequence7).setOnTouchListener { _, _ ->
            sequenceTap(m7, R.id.sequencer_list13, R.id.sequence7, "#dfd441")
            false
        }
        findViewById<View>(R.id.sequencer_list13).findViewById<ImageView>(R.id.sequence8).setOnTouchListener { _, _ ->
            sequenceTap(m8, R.id.sequencer_list13, R.id.sequence8, "#dfd441")
            false
        }
        findViewById<View>(R.id.sequencer_list13).findViewById<ImageView>(R.id.sequence9).setOnTouchListener { _, _ ->
            sequenceTap(m9, R.id.sequencer_list13, R.id.sequence9, "#dfd441")
            false
        }
        findViewById<View>(R.id.sequencer_list13).findViewById<ImageView>(R.id.sequence10).setOnTouchListener { _, _ ->
            sequenceTap(m10, R.id.sequencer_list13, R.id.sequence10, "#dfd441")
            false
        }
        findViewById<View>(R.id.sequencer_list13).findViewById<ImageView>(R.id.sequence11).setOnTouchListener { _, _ ->
            sequenceTap(m11, R.id.sequencer_list13, R.id.sequence11, "#dfd441")
            false
        }
        findViewById<View>(R.id.sequencer_list13).findViewById<ImageView>(R.id.sequence12).setOnTouchListener { _, _ ->
            sequenceTap(m12, R.id.sequencer_list13, R.id.sequence12, "#dfd441")
            false
        }
        findViewById<View>(R.id.sequencer_list13).findViewById<ImageView>(R.id.sequence13).setOnTouchListener { _, _ ->
            sequenceTap(m13, R.id.sequencer_list13, R.id.sequence13, "#dfd441")
            false
        }
        findViewById<View>(R.id.sequencer_list13).findViewById<ImageView>(R.id.sequence14).setOnTouchListener { _, _ ->
            sequenceTap(m14, R.id.sequencer_list13, R.id.sequence14, "#dfd441")
            false
        }
        findViewById<View>(R.id.sequencer_list13).findViewById<ImageView>(R.id.sequence15).setOnTouchListener { _, _ ->
            sequenceTap(m15, R.id.sequencer_list13, R.id.sequence15, "#dfd441")
            false
        }
        findViewById<View>(R.id.sequencer_list13).findViewById<ImageView>(R.id.sequence16).setOnTouchListener { _, _ ->
            sequenceTap(m16, R.id.sequencer_list13, R.id.sequence16, "#dfd441")
            false
        }

        findViewById<View>(R.id.sequencer_list14).findViewById<ImageView>(R.id.sequence).setOnTouchListener { _, _ ->
            sequenceTap(n1, R.id.sequencer_list14, R.id.sequence, "#e9e8e7")
            false
        }
        findViewById<View>(R.id.sequencer_list14).findViewById<ImageView>(R.id.sequence2).setOnTouchListener { _, _ ->
            sequenceTap(n2, R.id.sequencer_list14, R.id.sequence2, "#e9e8e7")
            false
        }
        findViewById<View>(R.id.sequencer_list14).findViewById<ImageView>(R.id.sequence3).setOnTouchListener { _, _ ->
            sequenceTap(n3, R.id.sequencer_list14, R.id.sequence3, "#e9e8e7")
            false
        }
        findViewById<View>(R.id.sequencer_list14).findViewById<ImageView>(R.id.sequence4).setOnTouchListener { _, _ ->
            sequenceTap(n4, R.id.sequencer_list14, R.id.sequence4, "#e9e8e7")
            false
        }
        findViewById<View>(R.id.sequencer_list14).findViewById<ImageView>(R.id.sequence5).setOnTouchListener { _, _ ->
            sequenceTap(n5, R.id.sequencer_list14, R.id.sequence5, "#e9e8e7")
            false
        }
        findViewById<View>(R.id.sequencer_list14).findViewById<ImageView>(R.id.sequence6).setOnTouchListener { _, _ ->
            sequenceTap(n6, R.id.sequencer_list14, R.id.sequence6, "#e9e8e7")
            false
        }
        findViewById<View>(R.id.sequencer_list14).findViewById<ImageView>(R.id.sequence7).setOnTouchListener { _, _ ->
            sequenceTap(n7, R.id.sequencer_list14, R.id.sequence7, "#e9e8e7")
            false
        }
        findViewById<View>(R.id.sequencer_list14).findViewById<ImageView>(R.id.sequence8).setOnTouchListener { _, _ ->
            sequenceTap(n8, R.id.sequencer_list14, R.id.sequence8, "#e9e8e7")
            false
        }
        findViewById<View>(R.id.sequencer_list14).findViewById<ImageView>(R.id.sequence9).setOnTouchListener { _, _ ->
            sequenceTap(n9, R.id.sequencer_list14, R.id.sequence9, "#e9e8e7")
            false
        }
        findViewById<View>(R.id.sequencer_list14).findViewById<ImageView>(R.id.sequence10).setOnTouchListener { _, _ ->
            sequenceTap(n10, R.id.sequencer_list14, R.id.sequence10, "#e9e8e7")
            false
        }
        findViewById<View>(R.id.sequencer_list14).findViewById<ImageView>(R.id.sequence11).setOnTouchListener { _, _ ->
            sequenceTap(n11, R.id.sequencer_list14, R.id.sequence11, "#e9e8e7")
            false
        }
        findViewById<View>(R.id.sequencer_list14).findViewById<ImageView>(R.id.sequence12).setOnTouchListener { _, _ ->
            sequenceTap(n12, R.id.sequencer_list14, R.id.sequence12, "#e9e8e7")
            false
        }
        findViewById<View>(R.id.sequencer_list14).findViewById<ImageView>(R.id.sequence13).setOnTouchListener { _, _ ->
            sequenceTap(n13, R.id.sequencer_list14, R.id.sequence13, "#e9e8e7")
            false
        }
        findViewById<View>(R.id.sequencer_list14).findViewById<ImageView>(R.id.sequence14).setOnTouchListener { _, _ ->
            sequenceTap(n14, R.id.sequencer_list14, R.id.sequence14, "#e9e8e7")
            false
        }
        findViewById<View>(R.id.sequencer_list14).findViewById<ImageView>(R.id.sequence15).setOnTouchListener { _, _ ->
            sequenceTap(n15, R.id.sequencer_list14, R.id.sequence15, "#e9e8e7")
            false
        }
        findViewById<View>(R.id.sequencer_list14).findViewById<ImageView>(R.id.sequence16).setOnTouchListener { _, _ ->
            sequenceTap(n16, R.id.sequencer_list14, R.id.sequence16, "#e9e8e7")
            false
        }

        findViewById<View>(R.id.sequencer_list15).findViewById<ImageView>(R.id.sequence).setOnTouchListener { _, _ ->
            sequenceTap(o1, R.id.sequencer_list15, R.id.sequence, "#ffffff")
            false
        }
        findViewById<View>(R.id.sequencer_list15).findViewById<ImageView>(R.id.sequence2).setOnTouchListener { _, _ ->
            sequenceTap(o2, R.id.sequencer_list15, R.id.sequence2, "#ffffff")
            false
        }
        findViewById<View>(R.id.sequencer_list15).findViewById<ImageView>(R.id.sequence3).setOnTouchListener { _, _ ->
            sequenceTap(o3, R.id.sequencer_list15, R.id.sequence3, "#ffffff")
            false
        }
        findViewById<View>(R.id.sequencer_list15).findViewById<ImageView>(R.id.sequence4).setOnTouchListener { _, _ ->
            sequenceTap(o4, R.id.sequencer_list15, R.id.sequence4, "#ffffff")
            false
        }
        findViewById<View>(R.id.sequencer_list15).findViewById<ImageView>(R.id.sequence5).setOnTouchListener { _, _ ->
            sequenceTap(o5, R.id.sequencer_list15, R.id.sequence5, "#ffffff")
            false
        }
        findViewById<View>(R.id.sequencer_list15).findViewById<ImageView>(R.id.sequence6).setOnTouchListener { _, _ ->
            sequenceTap(o6, R.id.sequencer_list15, R.id.sequence6, "#ffffff")
            false
        }
        findViewById<View>(R.id.sequencer_list15).findViewById<ImageView>(R.id.sequence7).setOnTouchListener { _, _ ->
            sequenceTap(o7, R.id.sequencer_list15, R.id.sequence7, "#ffffff")
            false
        }
        findViewById<View>(R.id.sequencer_list15).findViewById<ImageView>(R.id.sequence8).setOnTouchListener { _, _ ->
            sequenceTap(o8, R.id.sequencer_list15, R.id.sequence8, "#ffffff")
            false
        }
        findViewById<View>(R.id.sequencer_list15).findViewById<ImageView>(R.id.sequence9).setOnTouchListener { _, _ ->
            sequenceTap(o9, R.id.sequencer_list15, R.id.sequence9, "#ffffff")
            false
        }
        findViewById<View>(R.id.sequencer_list15).findViewById<ImageView>(R.id.sequence10).setOnTouchListener { _, _ ->
            sequenceTap(o10, R.id.sequencer_list15, R.id.sequence10, "#ffffff")
            false
        }
        findViewById<View>(R.id.sequencer_list15).findViewById<ImageView>(R.id.sequence11).setOnTouchListener { _, _ ->
            sequenceTap(o11, R.id.sequencer_list15, R.id.sequence11, "#ffffff")
            false
        }
        findViewById<View>(R.id.sequencer_list15).findViewById<ImageView>(R.id.sequence12).setOnTouchListener { _, _ ->
            sequenceTap(o12, R.id.sequencer_list15, R.id.sequence12, "#ffffff")
            false
        }
        findViewById<View>(R.id.sequencer_list15).findViewById<ImageView>(R.id.sequence13).setOnTouchListener { _, _ ->
            sequenceTap(o13, R.id.sequencer_list15, R.id.sequence13, "#ffffff")
            false
        }
        findViewById<View>(R.id.sequencer_list15).findViewById<ImageView>(R.id.sequence14).setOnTouchListener { _, _ ->
            sequenceTap(o14, R.id.sequencer_list15, R.id.sequence14, "#ffffff")
            false
        }
        findViewById<View>(R.id.sequencer_list15).findViewById<ImageView>(R.id.sequence15).setOnTouchListener { _, _ ->
            sequenceTap(o15, R.id.sequencer_list15, R.id.sequence15, "#ffffff")
            false
        }
        findViewById<View>(R.id.sequencer_list15).findViewById<ImageView>(R.id.sequence16).setOnTouchListener { _, _ ->
            sequenceTap(o16, R.id.sequencer_list15, R.id.sequence16, "#ffffff")
            false
        }

        binding.includeMainView.imageView.setOnTouchListener { _, event ->
            when {
                gridView.isVisible -> {
                    gridView.visibility = View.INVISIBLE
                }
                gridView2.isVisible -> {
                    gridView2.visibility = View.INVISIBLE
                }
                soundListView.isVisible -> {
                    soundListView.visibility = View.INVISIBLE
                }
                event!!.actionMasked == MotionEvent.ACTION_DOWN || event.actionMasked == MotionEvent.ACTION_POINTER_DOWN -> {
                    soundPool.play(sound1, soundPoolVolume, soundPoolVolume, 1, 0, soundPoolTempo)
                    tapEvent(a1,a2,a3,a4,a5,a6,a7,a8,a9,a10,a11,a12,a13,a14,a15,a16,duplicate,R.id.include_main_view)
                }
                event.actionMasked == MotionEvent.ACTION_UP -> {
                    if (colorCheck == 1) {
                        findViewById<View>(R.id.include_main_view).findViewById<ImageView>(R.id.imageView).setImageResource(R.drawable.my_ripple3)
                    } else {
                        findViewById<View>(R.id.include_main_view).findViewById<ImageView>(R.id.imageView).setImageResource(R.drawable.my_ripple)
                    }
                }
            }
                false
        }

        binding.includeMainView2.imageView.setOnTouchListener { _, event ->
            when {
                gridView.isVisible -> {
                    gridView.visibility = View.INVISIBLE
                }
                gridView2.isVisible -> {
                    gridView2.visibility = View.INVISIBLE
                }
                soundListView.isVisible -> {
                    soundListView.visibility = View.INVISIBLE
                }
                event!!.actionMasked == MotionEvent.ACTION_DOWN || event.actionMasked == MotionEvent.ACTION_POINTER_DOWN -> {
                    soundPool.play(sound2, soundPoolVolume2, soundPoolVolume2, 1, 0, soundPoolTempo2)
                    tapEvent(f1,f2,f3,f4,f5,f6,f7,f8,f9,f10,f11,f12,f13,f14,f15,f16,duplicate6,R.id.include_main_view2)
                }
                event.actionMasked == MotionEvent.ACTION_UP -> {
                    if (colorCheck == 1) {
                        findViewById<View>(R.id.include_main_view2).findViewById<ImageView>(R.id.imageView).setImageResource(R.drawable.my_ripple3)
                    } else {
                        findViewById<View>(R.id.include_main_view2).findViewById<ImageView>(R.id.imageView).setImageResource(R.drawable.my_ripple)
                    }
                }
            }
                false
        }

        binding.includeMainView3.imageView.setOnTouchListener { _, event ->
            when {
                gridView.isVisible -> {
                    gridView.visibility = View.INVISIBLE
                }
                gridView2.isVisible -> {
                    gridView2.visibility = View.INVISIBLE
                }
                soundListView.isVisible -> {
                    soundListView.visibility = View.INVISIBLE
                }
                event!!.actionMasked == MotionEvent.ACTION_DOWN || event.actionMasked == MotionEvent.ACTION_POINTER_DOWN -> {
                    soundPool.play(sound3, soundPoolVolume3, soundPoolVolume3, 1, 0, soundPoolTempo3)
                    tapEvent(k1,k2,k3,k4,k5,k6,k7,k8,k9,k10,k11,k12,k13,k14,k15,k16,duplicate11,R.id.include_main_view3)
                }
                event.actionMasked == MotionEvent.ACTION_UP -> {
                    if (colorCheck == 1) {
                        findViewById<View>(R.id.include_main_view3).findViewById<ImageView>(R.id.imageView).setImageResource(R.drawable.my_ripple3)
                    } else {
                        findViewById<View>(R.id.include_main_view3).findViewById<ImageView>(R.id.imageView).setImageResource(R.drawable.my_ripple)
                    }
                }
            }
                false
        }

        binding.includeMainView4.imageView.setOnTouchListener { _, event ->
            when {
                gridView.isVisible -> {
                    gridView.visibility = View.INVISIBLE
                }
                gridView2.isVisible -> {
                    gridView2.visibility = View.INVISIBLE
                }
                soundListView.isVisible -> {
                    soundListView.visibility = View.INVISIBLE
                }
                event!!.actionMasked == MotionEvent.ACTION_DOWN || event.actionMasked == MotionEvent.ACTION_POINTER_DOWN -> {
                    soundPool.play(sound4, soundPoolVolume4, soundPoolVolume4, 1, 0, soundPoolTempo4)
                    tapEvent(b1,b2,b3,b4,b5,b6,b7,b8,b9,b10,b11,b12,b13,b14,b15,b16,duplicate2,R.id.include_main_view4)
                }
                event.actionMasked == MotionEvent.ACTION_UP -> {
                    if (colorCheck == 1) {
                        findViewById<View>(R.id.include_main_view4).findViewById<ImageView>(R.id.imageView).setImageResource(R.drawable.my_ripple4)
                    } else {
                        findViewById<View>(R.id.include_main_view4).findViewById<ImageView>(R.id.imageView).setImageResource(R.drawable.my_ripple)
                    }
                }
            }
                false
        }

        binding.includeMainView5.imageView.setOnTouchListener { _, event ->
            when {
                gridView.isVisible -> {
                    gridView.visibility = View.INVISIBLE
                }
                gridView2.isVisible -> {
                    gridView2.visibility = View.INVISIBLE
                }
                soundListView.isVisible -> {
                    soundListView.visibility = View.INVISIBLE
                }
                event!!.actionMasked == MotionEvent.ACTION_DOWN || event.actionMasked == MotionEvent.ACTION_POINTER_DOWN -> {
                    soundPool.play(sound5, soundPoolVolume5, soundPoolVolume5, 1, 0, soundPoolTempo5)
                    tapEvent(g1,g2,g3,g4,g5,g6,g7,g8,g9,g10,g11,g12,g13,g14,g15,g16,duplicate7,R.id.include_main_view5)
                }
                event.actionMasked == MotionEvent.ACTION_UP -> {
                    if (colorCheck == 1) {
                        findViewById<View>(R.id.include_main_view5).findViewById<ImageView>(R.id.imageView).setImageResource(R.drawable.my_ripple4)
                    } else {
                        findViewById<View>(R.id.include_main_view5).findViewById<ImageView>(R.id.imageView).setImageResource(R.drawable.my_ripple)
                    }
                }
            }
                false
        }

        binding.includeMainView6.imageView.setOnTouchListener { _, event ->
            when {
                gridView.isVisible -> {
                    gridView.visibility = View.INVISIBLE
                }
                gridView2.isVisible -> {
                    gridView2.visibility = View.INVISIBLE
                }
                soundListView.isVisible -> {
                    soundListView.visibility = View.INVISIBLE
                }
                event!!.actionMasked == MotionEvent.ACTION_DOWN || event.actionMasked == MotionEvent.ACTION_POINTER_DOWN -> {
                    soundPool.play(sound6, soundPoolVolume6, soundPoolVolume6, 1, 0, soundPoolTempo6)
                    tapEvent(l1,l2,l3,l4,l5,l6,l7,l8,l9,l10,l11,l12,l13,l14,l15,l16,duplicate12,R.id.include_main_view6)
                }
                event.actionMasked == MotionEvent.ACTION_UP -> {
                    if (colorCheck == 1) {
                        findViewById<View>(R.id.include_main_view6).findViewById<ImageView>(R.id.imageView).setImageResource(R.drawable.my_ripple4)
                    } else {
                        findViewById<View>(R.id.include_main_view6).findViewById<ImageView>(R.id.imageView).setImageResource(R.drawable.my_ripple)
                    }
                }
            }
                false
        }

        binding.includeMainView7.imageView.setOnTouchListener { _, event ->
            when {
                gridView.isVisible -> {
                    gridView.visibility = View.INVISIBLE
                }
                gridView2.isVisible -> {
                    gridView2.visibility = View.INVISIBLE
                }
                soundListView.isVisible -> {
                    soundListView.visibility = View.INVISIBLE
                }
                event!!.actionMasked == MotionEvent.ACTION_DOWN || event.actionMasked == MotionEvent.ACTION_POINTER_DOWN -> {
                    soundPool.play(sound7, soundPoolVolume7, soundPoolVolume7, 1, 0, soundPoolTempo7)
                    tapEvent(c1,c2,c3,c4,c5,c6,c7,c8,c9,c10,c11,c12,c13,c14,c15,c16,duplicate3,R.id.include_main_view7)
                }
                event.actionMasked == MotionEvent.ACTION_UP -> {
                    if (colorCheck == 1) {
                        findViewById<View>(R.id.include_main_view7).findViewById<ImageView>(R.id.imageView).setImageResource(R.drawable.my_ripple5)
                    } else {
                        findViewById<View>(R.id.include_main_view7).findViewById<ImageView>(R.id.imageView).setImageResource(R.drawable.my_ripple)
                    }
                }
            }
                false
        }

        binding.includeMainView8.imageView.setOnTouchListener { _, event ->
            when {
                gridView.isVisible -> {
                    gridView.visibility = View.INVISIBLE
                }
                gridView2.isVisible -> {
                    gridView2.visibility = View.INVISIBLE
                }
                soundListView.isVisible -> {
                    soundListView.visibility = View.INVISIBLE
                }
                event!!.actionMasked == MotionEvent.ACTION_DOWN || event.actionMasked == MotionEvent.ACTION_POINTER_DOWN -> {
                    soundPool.play(sound8, soundPoolVolume8, soundPoolVolume8, 1, 0, soundPoolTempo8)
                    tapEvent(h1,h2,h3,h4,h5,h6,h7,h8,h9,h10,h11,h12,h13,h14,h15,h16,duplicate8,R.id.include_main_view8)
                }
                event.actionMasked == MotionEvent.ACTION_UP -> {
                    if (colorCheck == 1) {
                        findViewById<View>(R.id.include_main_view8).findViewById<ImageView>(R.id.imageView).setImageResource(R.drawable.my_ripple5)
                    } else {
                        findViewById<View>(R.id.include_main_view8).findViewById<ImageView>(R.id.imageView).setImageResource(R.drawable.my_ripple)
                    }
                }
            }
                false
        }

        binding.includeMainView9.imageView.setOnTouchListener { _, event ->
            when {
                gridView.isVisible -> {
                    gridView.visibility = View.INVISIBLE
                }
                gridView2.isVisible -> {
                    gridView2.visibility = View.INVISIBLE
                }
                soundListView.isVisible -> {
                    soundListView.visibility = View.INVISIBLE
                }
                event!!.actionMasked == MotionEvent.ACTION_DOWN || event.actionMasked == MotionEvent.ACTION_POINTER_DOWN -> {
                    soundPool.play(sound9, soundPoolVolume9, soundPoolVolume9, 1, 0, soundPoolTempo9)
                    tapEvent(m1,m2,m3,m4,m5,m6,m7,m8,m9,m10,m11,m12,m13,m14,m15,m16,duplicate13,R.id.include_main_view9)
                }
                event.actionMasked == MotionEvent.ACTION_UP -> {
                    if (colorCheck == 1) {
                        findViewById<View>(R.id.include_main_view9).findViewById<ImageView>(R.id.imageView).setImageResource(R.drawable.my_ripple5)
                    } else {
                        findViewById<View>(R.id.include_main_view9).findViewById<ImageView>(R.id.imageView).setImageResource(R.drawable.my_ripple)
                    }
                }
            }
                false

        }

        binding.includeMainView10.imageView.setOnTouchListener { _, event ->
            when {
                gridView.isVisible -> {
                    gridView.visibility = View.INVISIBLE
                }
                gridView2.isVisible -> {
                    gridView2.visibility = View.INVISIBLE
                }
                soundListView.isVisible -> {
                    soundListView.visibility = View.INVISIBLE
                }
                event!!.actionMasked == MotionEvent.ACTION_DOWN || event.actionMasked == MotionEvent.ACTION_POINTER_DOWN -> {
                    soundPool.play(sound10, soundPoolVolume10, soundPoolVolume10, 1, 0, soundPoolTempo10)
                    tapEvent(d1,d2,d3,d4,d5,d6,d7,d8,d9,d10,d11,d12,d13,d14,d15,d16,duplicate4,R.id.include_main_view10)
                }
                event.actionMasked == MotionEvent.ACTION_UP -> {
                    if (colorCheck == 1) {
                        findViewById<View>(R.id.include_main_view10).findViewById<ImageView>(R.id.imageView).setImageResource(R.drawable.my_ripple6)
                    } else {
                        findViewById<View>(R.id.include_main_view10).findViewById<ImageView>(R.id.imageView).setImageResource(R.drawable.my_ripple)
                    }
                }
            }
                false
        }

        binding.includeMainView11.imageView.setOnTouchListener { _, event ->
            when {
                gridView.isVisible -> {
                    gridView.visibility = View.INVISIBLE
                }
                gridView2.isVisible -> {
                    gridView2.visibility = View.INVISIBLE
                }
                soundListView.isVisible -> {
                    soundListView.visibility = View.INVISIBLE
                }
                event!!.actionMasked == MotionEvent.ACTION_DOWN || event.actionMasked == MotionEvent.ACTION_POINTER_DOWN -> {
                    soundPool.play(sound11, soundPoolVolume11, soundPoolVolume11, 1, 0, soundPoolTempo11)
                    tapEvent(i1,i2,i3,i4,i5,i6,i7,i8,i9,i10,i11,i12,i13,i14,i15,i16,duplicate9,R.id.include_main_view11)
                }
                event.actionMasked == MotionEvent.ACTION_UP -> {
                    if (colorCheck == 1) {
                        findViewById<View>(R.id.include_main_view11).findViewById<ImageView>(R.id.imageView).setImageResource(R.drawable.my_ripple6)
                    } else {
                        findViewById<View>(R.id.include_main_view11).findViewById<ImageView>(R.id.imageView).setImageResource(R.drawable.my_ripple)
                    }
                }
            }
                false
        }

        binding.includeMainView12.imageView.setOnTouchListener { _, event ->
            when {
                gridView.isVisible -> {
                    gridView.visibility = View.INVISIBLE
                }
                gridView2.isVisible -> {
                    gridView2.visibility = View.INVISIBLE
                }
                soundListView.isVisible -> {
                    soundListView.visibility = View.INVISIBLE
                }
                event!!.actionMasked == MotionEvent.ACTION_DOWN || event.actionMasked == MotionEvent.ACTION_POINTER_DOWN -> {
                    soundPool.play(sound12, soundPoolVolume12, soundPoolVolume12, 1, 0, soundPoolTempo12)
                    tapEvent(n1,n2,n3,n4,n5,n6,n7,n8,n9,n10,n11,n12,n13,n14,n15,n16,duplicate14,R.id.include_main_view12)
                }
                event.actionMasked == MotionEvent.ACTION_UP -> {
                    if (colorCheck == 1) {
                        findViewById<View>(R.id.include_main_view12).findViewById<ImageView>(R.id.imageView).setImageResource(R.drawable.my_ripple6)
                    } else {
                        findViewById<View>(R.id.include_main_view12).findViewById<ImageView>(R.id.imageView).setImageResource(R.drawable.my_ripple)
                    }
                }
            }
                false
        }

        binding.includeMainView13.imageView.setOnTouchListener { _, event ->
            when {
                gridView.isVisible -> {
                    gridView.visibility = View.INVISIBLE
                }
                gridView2.isVisible -> {
                    gridView2.visibility = View.INVISIBLE
                }
                soundListView.isVisible -> {
                    soundListView.visibility = View.INVISIBLE
                }
                event!!.actionMasked == MotionEvent.ACTION_DOWN || event.actionMasked == MotionEvent.ACTION_POINTER_DOWN -> {
                    soundPool.play(sound13, soundPoolVolume13, soundPoolVolume13, 1, 0, soundPoolTempo13)
                    tapEvent(e1,e2,e3,e4,e5,e6,e7,e8,e9,e10,e11,e12,e13,e14,e15,e16,duplicate5,R.id.include_main_view13)
                }
                event.actionMasked == MotionEvent.ACTION_UP -> {
                    if (colorCheck == 1) {
                        findViewById<View>(R.id.include_main_view13).findViewById<ImageView>(R.id.imageView).setImageResource(R.drawable.my_ripple7)
                    } else {
                        findViewById<View>(R.id.include_main_view13).findViewById<ImageView>(R.id.imageView).setImageResource(R.drawable.my_ripple)
                    }
                }
            }
                false
        }

        binding.includeMainView14.imageView.setOnTouchListener { _, event ->
            when {
                gridView.isVisible -> {
                    gridView.visibility = View.INVISIBLE
                }
                gridView2.isVisible -> {
                    gridView2.visibility = View.INVISIBLE
                }
                soundListView.isVisible -> {
                    soundListView.visibility = View.INVISIBLE
                }
                event!!.actionMasked == MotionEvent.ACTION_DOWN || event.actionMasked == MotionEvent.ACTION_POINTER_DOWN -> {
                    soundPool.play(sound14, soundPoolVolume14, soundPoolVolume14, 1, 0, soundPoolTempo14)
                    tapEvent(j1,j2,j3,j4,j5,j6,j7,j8,j9,j10,j11,j12,j13,j14,j15,j16,duplicate10,R.id.include_main_view14)
                }
                event.actionMasked == MotionEvent.ACTION_UP -> {
                    if (colorCheck == 1) {
                        findViewById<View>(R.id.include_main_view14).findViewById<ImageView>(R.id.imageView).setImageResource(R.drawable.my_ripple7)
                    } else {
                        findViewById<View>(R.id.include_main_view14).findViewById<ImageView>(R.id.imageView).setImageResource(R.drawable.my_ripple)
                    }
                }
            }
                false
        }

        binding.includeMainView15.imageView.setOnTouchListener { _, event ->
            when {
                gridView.isVisible -> {
                    gridView.visibility = View.INVISIBLE
                }
                gridView2.isVisible -> {
                    gridView2.visibility = View.INVISIBLE
                }
                soundListView.isVisible -> {
                    soundListView.visibility = View.INVISIBLE
                }
                event!!.actionMasked == MotionEvent.ACTION_DOWN || event.actionMasked == MotionEvent.ACTION_POINTER_DOWN -> {
                    soundPool.play(sound15, soundPoolVolume15, soundPoolVolume15, 1, 0, soundPoolTempo15)
                    tapEvent(o1,o2,o3,o4,o5,o6,o7,o8,o9,o10,o11,o12,o13,o14,o15,o16,duplicate15,R.id.include_main_view15)
                }
                event.actionMasked == MotionEvent.ACTION_UP -> {
                    if (colorCheck == 1) {
                        findViewById<View>(R.id.include_main_view15).findViewById<ImageView>(R.id.imageView).setImageResource(R.drawable.my_ripple7)
                    } else {
                        findViewById<View>(R.id.include_main_view15).findViewById<ImageView>(R.id.imageView).setImageResource(R.drawable.my_ripple)
                    }
                }
            }
                false
        }


        binding.includeMainView.imageView.setOnClickListener {
            if (paste == 1) {
                buttonA = 1
                meSpinner.avoidDropdownFocus()
                meSpinner.performClick()
            }
        }
        binding.includeMainView2.imageView.setOnClickListener {
            if (paste == 1) {
                buttonA = 2
                meSpinner.avoidDropdownFocus()
                meSpinner.performClick()
            }
        }
        binding.includeMainView3.imageView.setOnClickListener {
            if (paste == 1) {
                buttonA = 3
                meSpinner.avoidDropdownFocus()
                meSpinner.performClick()
            }
        }
        binding.includeMainView4.imageView.setOnClickListener {
            if (paste == 1) {
                buttonA = 4
                meSpinner.avoidDropdownFocus()
                meSpinner.performClick()
            }
        }
        binding.includeMainView5.imageView.setOnClickListener {
            if (paste == 1) {
                buttonA = 5
                meSpinner.avoidDropdownFocus()
                meSpinner.performClick()
            }
        }
        binding.includeMainView6.imageView.setOnClickListener {
            if (paste == 1) {
                buttonA = 6
                meSpinner.avoidDropdownFocus()
                meSpinner.performClick()
            }
        }
        binding.includeMainView7.imageView.setOnClickListener {
            if (paste == 1) {
                buttonA = 7
                meSpinner.avoidDropdownFocus()
                meSpinner.performClick()
            }
        }
        binding.includeMainView8.imageView.setOnClickListener {
            if (paste == 1) {
                buttonA = 8
                meSpinner.avoidDropdownFocus()
                meSpinner.performClick()
            }
        }
        binding.includeMainView9.imageView.setOnClickListener {
            if (paste == 1) {
                buttonA = 9
                meSpinner.avoidDropdownFocus()
                meSpinner.performClick()
            }
        }
        binding.includeMainView10.imageView.setOnClickListener {
            if (paste == 1) {
                buttonA = 10
                meSpinner.avoidDropdownFocus()
                meSpinner.performClick()
            }
        }
        binding.includeMainView11.imageView.setOnClickListener {
            if (paste == 1) {
                buttonA = 11
                meSpinner.avoidDropdownFocus()
                meSpinner.performClick()
            }
        }
        binding.includeMainView12.imageView.setOnClickListener {
            if (paste == 1) {
                buttonA = 12
                meSpinner.avoidDropdownFocus()
                meSpinner.performClick()
            }
        }
        binding.includeMainView13.imageView.setOnClickListener {
            if (paste == 1) {
                buttonA = 13
                meSpinner.avoidDropdownFocus()
                meSpinner.performClick()
            }
        }
        binding.includeMainView14.imageView.setOnClickListener {
            if (paste == 1) {
                buttonA = 14
                meSpinner.avoidDropdownFocus()
                meSpinner.performClick()
            }
        }
        binding.includeMainView15.imageView.setOnClickListener {
            if (paste == 1) {
                buttonA = 15
                meSpinner.avoidDropdownFocus()
                meSpinner.performClick()
            }
        }
        
        findViewById<TextView>(R.id.textView18).setOnTouchListener { _, event ->
            when (event.action) {
                MotionEvent.ACTION_DOWN -> {
                    soundPoolVolume = 0.5f
                    soundPoolTempo = 1.0f
                    soundPoolVolume2 = 0.5f
                    soundPoolTempo2 = 1.0f
                    soundPoolVolume3 = 0.5f
                    soundPoolTempo3 = 1.0f
                    soundPoolVolume4 = 0.5f
                    soundPoolTempo4 = 1.0f
                    soundPoolVolume5 = 0.5f
                    soundPoolTempo5 = 1.0f
                    soundPoolVolume6 = 0.5f
                    soundPoolTempo6 = 1.0f
                    soundPoolVolume7 = 0.5f
                    soundPoolTempo7 = 1.0f
                    soundPoolVolume8 = 0.5f
                    soundPoolTempo8 = 1.0f
                    soundPoolVolume9 = 0.5f
                    soundPoolTempo9 = 1.0f
                    soundPoolVolume10 = 0.5f
                    soundPoolTempo10 = 1.0f
                    soundPoolVolume11 = 0.5f
                    soundPoolTempo11 = 1.0f
                    soundPoolVolume12 = 0.5f
                    soundPoolTempo12 = 1.0f
                    soundPoolVolume13 = 0.5f
                    soundPoolTempo13 = 1.0f
                    soundPoolVolume14 = 0.5f
                    soundPoolTempo14 = 1.0f
                    soundPoolVolume15 = 0.5f
                    soundPoolTempo15 = 1.0f
                    spvF = 5
                    sptF = 10
                    spvF2 = 5
                    sptF2 = 10
                    spvF3 = 5
                    sptF3 = 10
                    spvF4 = 5
                    sptF4 = 10
                    spvF5 = 5
                    sptF5 = 10
                    spvF6 = 5
                    sptF6 = 10
                    spvF7 = 5
                    sptF7 = 10
                    spvF8 = 5
                    sptF8 = 10
                    spvF9 = 5
                    sptF9 = 10
                    spvF10 = 5
                    sptF10 = 10
                    spvF11 = 5
                    sptF11 = 10
                    spvF12 = 5
                    sptF12 = 10
                    spvF13 = 5
                    sptF13 = 10
                    spvF14 = 5
                    sptF14 = 10
                    spvF15 = 5
                    sptF15 = 10
                    pasteText()
                }
            }
            false
        }
        findViewById<TextView>(R.id.textView19).setOnTouchListener { _, event ->
            when (event.action) {
                MotionEvent.ACTION_DOWN -> {
                    soundPoolVolume = 1.0f
                    soundPoolVolume2 = 1.0f
                    soundPoolVolume3 = 1.0f
                    soundPoolVolume4 = 1.0f
                    soundPoolVolume5 = 1.0f
                    soundPoolVolume6 = 1.0f
                    soundPoolVolume7 = 1.0f
                    soundPoolVolume8 = 1.0f
                    soundPoolVolume9 = 1.0f
                    soundPoolVolume10 = 1.0f
                    soundPoolVolume11 = 1.0f
                    soundPoolVolume12 = 1.0f
                    soundPoolVolume13 = 1.0f
                    soundPoolVolume14 = 1.0f
                    soundPoolVolume15 = 1.0f
                    spvF = 10
                    spvF2 = 10
                    spvF3 = 10
                    spvF4 = 10
                    spvF5 = 10
                    spvF6 = 10
                    spvF7 = 10
                    spvF8 = 10
                    spvF9 = 10
                    spvF10 = 10
                    spvF11 = 10
                    spvF12 = 10
                    spvF13 = 10
                    spvF14 = 10
                    spvF15 = 10
                    pasteText()
                }
            }
            false
        }

        findViewById<TextView>(R.id.textView20).setOnTouchListener { _, event ->
            when (event.action) {
                MotionEvent.ACTION_DOWN -> {
                    sptF = pitchArray.random()
                    sptF2 = pitchArray.random()
                    sptF3 = pitchArray.random()
                    sptF4 = pitchArray.random()
                    sptF5 = pitchArray.random()
                    sptF6 = pitchArray.random()
                    sptF7 = pitchArray.random()
                    sptF8 = pitchArray.random()
                    sptF9 = pitchArray.random()
                    sptF10 = pitchArray.random()
                    sptF11 = pitchArray.random()
                    sptF12 = pitchArray.random()
                    sptF13 = pitchArray.random()
                    sptF14 = pitchArray.random()
                    sptF15 = pitchArray.random()
                    spvF = volumeArray.random()
                    spvF2 = volumeArray.random()
                    spvF3 = volumeArray.random()
                    spvF4 = volumeArray.random()
                    spvF5 = volumeArray.random()
                    spvF6 = volumeArray.random()
                    spvF7 = volumeArray.random()
                    spvF8 = volumeArray.random()
                    spvF9 = volumeArray.random()
                    spvF10 = volumeArray.random()
                    spvF11 = volumeArray.random()
                    spvF12 = volumeArray.random()
                    spvF13 = volumeArray.random()
                    spvF14 = volumeArray.random()
                    spvF15 = volumeArray.random()
                    soundPoolVolume = spvF/10.0f
                    soundPoolVolume2 = spvF2/10.0f
                    soundPoolVolume3 = spvF3/10.0f
                    soundPoolVolume4 = spvF4/10.0f
                    soundPoolVolume5 = spvF5/10.0f
                    soundPoolVolume6 = spvF6/10.0f
                    soundPoolVolume7 = spvF7/10.0f
                    soundPoolVolume8 = spvF8/10.0f
                    soundPoolVolume9 = spvF9/10.0f
                    soundPoolVolume10 = spvF10/10.0f
                    soundPoolVolume11 = spvF11/10.0f
                    soundPoolVolume12 = spvF12/10.0f
                    soundPoolVolume13 = spvF13/10.0f
                    soundPoolVolume14 = spvF14/10.0f
                    soundPoolVolume15 = spvF15/10.0f
                    soundPoolTempo = sptF/10.0f
                    soundPoolTempo2 = sptF2/10.0f
                    soundPoolTempo3 = sptF3/10.0f
                    soundPoolTempo4 = sptF4/10.0f
                    soundPoolTempo5 = sptF5/10.0f
                    soundPoolTempo6 = sptF6/10.0f
                    soundPoolTempo7 = sptF7/10.0f
                    soundPoolTempo8 = sptF8/10.0f
                    soundPoolTempo9 = sptF9/10.0f
                    soundPoolTempo10 = sptF10/10.0f
                    soundPoolTempo11 = sptF11/10.0f
                    soundPoolTempo12 = sptF12/10.0f
                    soundPoolTempo13 = sptF13/10.0f
                    soundPoolTempo14 = sptF14/10.0f
                    soundPoolTempo15 = sptF15/10.0f
                    pasteText()
                }
            }
            false
        }

        findViewById<View>(R.id.line_measure).findViewById<ImageView>(R.id.pattern_down).setOnTouchListener { _, event ->
            when (event.action) {
                MotionEvent.ACTION_DOWN -> {
                    if (sequencerSize != 0) {
                        sequencerSize--
                        findViewById<View>(R.id.line_measure).findViewById<TextView>(R.id.measure).text = (sequencerSize + 1).toString()
                        changeSequence()
                    }
                }
            }
            false
        }
        findViewById<View>(R.id.line_measure).findViewById<ImageView>(R.id.pattern_up).setOnTouchListener { _, event ->
            when (event.action) {
                MotionEvent.ACTION_DOWN -> {
                    if (sequencerSize <= 14) {
                        sequencerSize++
                        findViewById<View>(R.id.line_measure).findViewById<TextView>(R.id.measure).text = (sequencerSize + 1).toString()
                        changeSequence()
                    }
                }
            }
            false
        }
        findViewById<View>(R.id.line_measure).findViewById<ImageView>(R.id.patternSize_down).setOnTouchListener { _, event ->
            when (event.action) {
                MotionEvent.ACTION_DOWN -> {
                    if (sequencerMaxSize != 0) {
                        sequencerMaxSize--
                        findViewById<View>(R.id.line_measure).findViewById<TextView>(R.id.measure_max).text = (sequencerMaxSize + 1).toString()
                    }
                }
            }
            false
        }

        findViewById<View>(R.id.line_measure).findViewById<ImageView>(R.id.patternSize_up).setOnTouchListener { _, event ->
            when (event.action) {
                MotionEvent.ACTION_DOWN -> {
                    if (sequencerMaxSize <= 14) {
                        sequencerMaxSize++
                        findViewById<View>(R.id.line_measure).findViewById<TextView>(R.id.measure_max).text = (sequencerMaxSize + 1).toString()
                    }
                }
            }
            false
        }

        findViewById<View>(R.id.line_measure).findViewById<ImageView>(R.id.track_down).setOnTouchListener { _, event ->
            when (event.action) {
                MotionEvent.ACTION_DOWN -> {
                    if (trackCount > 2) {
                        trackCount--
                        findViewById<View>(R.id.line_measure).findViewById<TextView>(R.id.track_count).text = trackCount.toString()
                        sequencerChange(View.GONE)
                    }

                }
            }
            false
        }
        findViewById<View>(R.id.line_measure).findViewById<ImageView>(R.id.track_up).setOnTouchListener { _, event ->
            when (event.action) {
                MotionEvent.ACTION_DOWN -> {
                    if (trackCount < 15) {
                        trackCount++
                        findViewById<View>(R.id.line_measure).findViewById<TextView>(R.id.track_count).text = trackCount.toString()
                        sequencerChange(View.GONE)
                    }

                }
            }
            false
        }

        findViewById<View>(R.id.include_view).findViewById<ImageButton>(R.id.pad).setOnTouchListener { _, event ->
            when (event.action) {
                MotionEvent.ACTION_DOWN -> {
                    soundPool.play(sound1, soundPoolVolume, soundPoolVolume, 1, 0, soundPoolTempo)
                }
            }
            false
        }
        findViewById<View>(R.id.include_view2).findViewById<ImageButton>(R.id.pad).setOnTouchListener { _, event ->
            when (event.action) {
                MotionEvent.ACTION_DOWN -> {
                    soundPool.play(sound2, soundPoolVolume2, soundPoolVolume2, 1, 0, soundPoolTempo2)
                }
            }
            false
        }
        findViewById<View>(R.id.include_view3).findViewById<ImageButton>(R.id.pad).setOnTouchListener { _, event ->
            when (event.action) {
                MotionEvent.ACTION_DOWN -> {
                    soundPool.play(sound3, soundPoolVolume3, soundPoolVolume3, 1, 0, soundPoolTempo3)
                }
            }
            false
        }
        findViewById<View>(R.id.include_view4).findViewById<ImageButton>(R.id.pad).setOnTouchListener { _, event ->
            when (event.action) {
                MotionEvent.ACTION_DOWN -> {
                    soundPool.play(sound4, soundPoolVolume4, soundPoolVolume4, 1, 0, soundPoolTempo4)
                }
            }
            false
        }
        findViewById<View>(R.id.include_view5).findViewById<ImageButton>(R.id.pad).setOnTouchListener { _, event ->
            when (event.action) {
                MotionEvent.ACTION_DOWN -> {
                    soundPool.play(sound5, soundPoolVolume5, soundPoolVolume5, 1, 0, soundPoolTempo5)
                }
            }
            false
        }
        findViewById<View>(R.id.include_view6).findViewById<ImageButton>(R.id.pad).setOnTouchListener { _, event ->
            when (event.action) {
                MotionEvent.ACTION_DOWN -> {
                    soundPool.play(sound6, soundPoolVolume6, soundPoolVolume6, 1, 0, soundPoolTempo6)
                }
            }
            false
        }
        findViewById<View>(R.id.include_view7).findViewById<ImageButton>(R.id.pad).setOnTouchListener { _, event ->
            when (event.action) {
                MotionEvent.ACTION_DOWN -> {
                    soundPool.play(sound7, soundPoolVolume7, soundPoolVolume7, 1, 0, soundPoolTempo7)
                }
            }
            false
        }
        findViewById<View>(R.id.include_view8).findViewById<ImageButton>(R.id.pad).setOnTouchListener { _, event ->
            when (event.action) {
                MotionEvent.ACTION_DOWN -> {
                    soundPool.play(sound8, soundPoolVolume8, soundPoolVolume8, 1, 0, soundPoolTempo8)
                }
            }
            false
        }
        findViewById<View>(R.id.include_view9).findViewById<ImageButton>(R.id.pad).setOnTouchListener { _, event ->
            when (event.action) {
                MotionEvent.ACTION_DOWN -> {
                    soundPool.play(sound9, soundPoolVolume9, soundPoolVolume9, 1, 0, soundPoolTempo9)
                }
            }
            false
        }
        findViewById<View>(R.id.include_view10).findViewById<ImageButton>(R.id.pad).setOnTouchListener { _, event ->
            when (event.action) {
                MotionEvent.ACTION_DOWN -> {
                    soundPool.play(sound10, soundPoolVolume10, soundPoolVolume10, 1, 0, soundPoolTempo10)
                }
            }
            false
        }
        findViewById<View>(R.id.include_view11).findViewById<ImageButton>(R.id.pad).setOnTouchListener { _, event ->
            when (event.action) {
                MotionEvent.ACTION_DOWN -> {
                    soundPool.play(sound11, soundPoolVolume11, soundPoolVolume11, 1, 0, soundPoolTempo11)
                }
            }
            false
        }
        findViewById<View>(R.id.include_view12).findViewById<ImageButton>(R.id.pad).setOnTouchListener { _, event ->
            when (event.action) {
                MotionEvent.ACTION_DOWN -> {
                    soundPool.play(sound12, soundPoolVolume12, soundPoolVolume12, 1, 0, soundPoolTempo12)
                }
            }
            false
        }
        findViewById<View>(R.id.include_view13).findViewById<ImageButton>(R.id.pad).setOnTouchListener { _, event ->
            when (event.action) {
                MotionEvent.ACTION_DOWN -> {
                    soundPool.play(sound13, soundPoolVolume13, soundPoolVolume13, 1, 0, soundPoolTempo13)
                }
            }
            false
        }
        findViewById<View>(R.id.include_view14).findViewById<ImageButton>(R.id.pad).setOnTouchListener { _, event ->
            when (event.action) {
                MotionEvent.ACTION_DOWN -> {
                    soundPool.play(sound14, soundPoolVolume14, soundPoolVolume14, 1, 0, soundPoolTempo14)
                }
            }
            false
        }
        findViewById<View>(R.id.include_view15).findViewById<ImageButton>(R.id.pad).setOnTouchListener { _, event ->
            when (event.action) {
                MotionEvent.ACTION_DOWN -> {
                    soundPool.play(sound15, soundPoolVolume15, soundPoolVolume15, 1, 0, soundPoolTempo15)
                }
            }
            false
        }

        findViewById<View>(R.id.include_view).findViewById<ImageButton>(R.id.volume_minus).setOnTouchListener { _, event ->
            when (event.action) {
                MotionEvent.ACTION_DOWN -> {
                    if (spvF > 1) {
                        spvF -= 1
                        soundPoolVolume = spvF/10.0f
                        findViewById<View>(R.id.tuning_sequencer).findViewById<TextView>(R.id.volume).text = soundPoolVolume.toString().replace("f", "")
                        findViewById<View>(R.id.include_view).findViewById<TextView>(R.id.padText).text =
                            ""
                        findViewById<View>(R.id.include_view).findViewById<TextView>(R.id.padText).text =
                            soundPoolVolume.toString()
                                .replace("f", "") + "            " + soundPoolTempo.toString()
                                .replace("f", "") + "\n" + padText1.replaceBeforeLast("/", "").replace("/", "").replace("tr_8", "TR-8").replace("tr_909", "TR-909").replace("_"," ").replace(".ogg", "").uppercase()
                    }
                    soundPool.play(sound1, soundPoolVolume, soundPoolVolume, 1, 0, soundPoolTempo)
                }
            }
            false
        }
        findViewById<View>(R.id.include_view).findViewById<ImageButton>(R.id.volume_plus).setOnTouchListener { _, event ->
            when (event.action) {
                MotionEvent.ACTION_DOWN -> {
            if (spvF < 10) {
                spvF += 1
                soundPoolVolume = spvF/10.0f
                findViewById<View>(R.id.tuning_sequencer).findViewById<TextView>(R.id.volume).text = soundPoolVolume.toString().replace("f", "")
                findViewById<View>(R.id.include_view).findViewById<TextView>(R.id.padText).text = ""
                findViewById<View>(R.id.include_view).findViewById<TextView>(R.id.padText).text = soundPoolVolume.toString().replace("f", "") + "            " + soundPoolTempo.toString().replace("f", "") + "\n" + padText1.replaceBeforeLast("/", "").replace("/", "").replace("tr_8", "TR-8").replace("tr_909", "TR-909").replace("_"," ").replace(".ogg", "").uppercase()
            }
            soundPool.play(sound1, soundPoolVolume, soundPoolVolume, 1, 0, soundPoolTempo)
        }
            }
            false
        }
        findViewById<View>(R.id.include_view).findViewById<ImageButton>(R.id.tempo_minus).setOnTouchListener { _, event ->
            when (event.action) {
                MotionEvent.ACTION_DOWN -> {
            if (sptF > 2) {
                sptF -= 1
                soundPoolTempo = sptF/10.0f
                findViewById<View>(R.id.tuning_sequencer).findViewById<TextView>(R.id.tempo).text = soundPoolTempo.toString().replace("f", "")
                findViewById<View>(R.id.include_view).findViewById<TextView>(R.id.padText).text = ""
                findViewById<View>(R.id.include_view).findViewById<TextView>(R.id.padText).text = soundPoolVolume.toString().replace("f", "") + "            " + soundPoolTempo.toString().replace("f", "") + "\n" + padText1.replaceBeforeLast("/", "").replace("/", "").replace("tr_8", "TR-8").replace("tr_909", "TR-909").replace("_"," ").replace(".ogg", "").uppercase()
            } else if (soundPoolTempo == 0.2f) {
                soundPoolTempo = 0.125f
                findViewById<View>(R.id.tuning_sequencer).findViewById<TextView>(R.id.tempo).text = soundPoolTempo.toString().replace("f", "")
                findViewById<View>(R.id.include_view).findViewById<TextView>(R.id.padText).text = ""
                findViewById<View>(R.id.include_view).findViewById<TextView>(R.id.padText).text = soundPoolVolume.toString().replace("f", "") + "            " + soundPoolTempo.toString().replace("f", "") + "\n" + padText1.replaceBeforeLast("/", "").replace("/", "").replace("tr_8", "TR-8").replace("tr_909", "TR-909").replace("_"," ").replace(".ogg", "").uppercase()
            }
            soundPool.play(sound1, soundPoolVolume, soundPoolVolume, 1, 0, soundPoolTempo)
        }
            }
            false
        }
        findViewById<View>(R.id.include_view).findViewById<ImageButton>(R.id.tempo_plus).setOnTouchListener { _, event ->
            when (event.action) {
                MotionEvent.ACTION_DOWN -> {
            if (soundPoolTempo == 0.125f) {
                soundPoolTempo = 0.2f
                findViewById<View>(R.id.tuning_sequencer).findViewById<TextView>(R.id.tempo).text = soundPoolTempo.toString().replace("f", "")
                findViewById<View>(R.id.include_view).findViewById<TextView>(R.id.padText).text = ""
                findViewById<View>(R.id.include_view).findViewById<TextView>(R.id.padText).text = soundPoolVolume.toString().replace("f", "") + "            " + soundPoolTempo.toString().replace("f", "") + "\n" + padText1.replaceBeforeLast("/", "").replace("/", "").replace("tr_8", "TR-8").replace("tr_909", "TR-909").replace("_"," ").replace(".ogg", "").uppercase()
            } else if (sptF < 80) {
                sptF += 1
                soundPoolTempo = sptF/10.0f
                findViewById<View>(R.id.tuning_sequencer).findViewById<TextView>(R.id.tempo).text = soundPoolTempo.toString().replace("f", "")
                findViewById<View>(R.id.include_view).findViewById<TextView>(R.id.padText).text = ""
                findViewById<View>(R.id.include_view).findViewById<TextView>(R.id.padText).text = soundPoolVolume.toString().replace("f", "") + "            " + soundPoolTempo.toString().replace("f", "") + "\n" + padText1.replaceBeforeLast("/", "").replace("/", "").replace("tr_8", "TR-8").replace("tr_909", "TR-909").replace("_"," ").replace(".ogg", "").uppercase()
            }
            soundPool.play(sound1, soundPoolVolume, soundPoolVolume, 1, 0, soundPoolTempo)
        }
            }
            false
        }
        findViewById<View>(R.id.include_view2).findViewById<ImageButton>(R.id.volume_minus).setOnTouchListener { _, event ->
            when (event.action) {
                MotionEvent.ACTION_DOWN -> {
            if (spvF2 > 1) {
                spvF2 -= 1
                soundPoolVolume2 = spvF2/10.0f
                findViewById<View>(R.id.include_view2).findViewById<TextView>(R.id.padText).text = ""
                findViewById<View>(R.id.include_view2).findViewById<TextView>(R.id.padText).text = soundPoolVolume2.toString().replace("f", "") + "            " + soundPoolTempo2.toString().replace("f", "") + "\n" + padText2.replaceBeforeLast("/", "").replace("/", "").replace("tr_8", "TR-8").replace("tr_909", "TR-909").replace("_"," ").replace(".ogg", "").uppercase()
            }
            soundPool.play(sound2, soundPoolVolume2, soundPoolVolume2, 1, 0, soundPoolTempo2)
        }
            }
            false
        }
        findViewById<View>(R.id.include_view2).findViewById<ImageButton>(R.id.volume_plus).setOnTouchListener { _, event ->
            when (event.action) {
                MotionEvent.ACTION_DOWN -> {
            if (spvF2 < 10) {
                spvF2 += 1
                soundPoolVolume2 = spvF2/10.0f
                findViewById<View>(R.id.include_view2).findViewById<TextView>(R.id.padText).text = ""
                findViewById<View>(R.id.include_view2).findViewById<TextView>(R.id.padText).text = soundPoolVolume2.toString().replace("f", "") + "            " + soundPoolTempo2.toString().replace("f", "") + "\n" + padText2.replaceBeforeLast("/", "").replace("/", "").replace("tr_8", "TR-8").replace("tr_909", "TR-909").replace("_"," ").replace(".ogg", "").uppercase()
            }
            soundPool.play(sound2, soundPoolVolume2, soundPoolVolume2, 1, 0, soundPoolTempo2)
        }
            }
            false
        }
        findViewById<View>(R.id.include_view2).findViewById<ImageButton>(R.id.tempo_minus).setOnTouchListener { _, event ->
            when (event.action) {
                MotionEvent.ACTION_DOWN -> {
            if (sptF2 > 2) {
                sptF2 -= 1
                soundPoolTempo2 = sptF2/10.0f
                findViewById<View>(R.id.include_view2).findViewById<TextView>(R.id.padText).text = ""
                findViewById<View>(R.id.include_view2).findViewById<TextView>(R.id.padText).text = soundPoolVolume2.toString().replace("f", "") + "            " + soundPoolTempo2.toString().replace("f", "") + "\n" + padText2.replaceBeforeLast("/", "").replace("/", "").replace("tr_8", "TR-8").replace("tr_909", "TR-909").replace("_"," ").replace(".ogg", "").uppercase()
            } else if (soundPoolTempo2 == 0.2f) {
                soundPoolTempo2 = 0.125f
                findViewById<View>(R.id.include_view2).findViewById<TextView>(R.id.padText).text = ""
                findViewById<View>(R.id.include_view2).findViewById<TextView>(R.id.padText).text = soundPoolVolume2.toString().replace("f", "") + "            " + soundPoolTempo2.toString().replace("f", "") + "\n" + padText2.replaceBeforeLast("/", "").replace("/", "").replace("tr_8", "TR-8").replace("tr_909", "TR-909").replace("_"," ").replace(".ogg", "").uppercase()
            }
            soundPool.play(sound2, soundPoolVolume2, soundPoolVolume2, 1, 0, soundPoolTempo2)
        }
            }
            false
        }
        findViewById<View>(R.id.include_view2).findViewById<ImageButton>(R.id.tempo_plus).setOnTouchListener { _, event ->
            when (event.action) {
                MotionEvent.ACTION_DOWN -> {
            if (soundPoolTempo2 == 0.125f) {
                soundPoolTempo2 = 0.2f
                findViewById<View>(R.id.include_view2).findViewById<TextView>(R.id.padText).text = ""
                findViewById<View>(R.id.include_view2).findViewById<TextView>(R.id.padText).text = soundPoolVolume2.toString().replace("f", "") + "            " + soundPoolTempo2.toString().replace("f", "") + "\n" + padText2.replaceBeforeLast("/", "").replace("/", "").replace("tr_8", "TR-8").replace("tr_909", "TR-909").replace("_"," ").replace(".ogg", "").uppercase()
            } else if (sptF2 < 80) {
                sptF2 += 1
                soundPoolTempo2 = sptF2/10.0f
                findViewById<View>(R.id.include_view2).findViewById<TextView>(R.id.padText).text = ""
                findViewById<View>(R.id.include_view2).findViewById<TextView>(R.id.padText).text = soundPoolVolume2.toString().replace("f", "") + "            " + soundPoolTempo2.toString().replace("f", "") + "\n" + padText2.replaceBeforeLast("/", "").replace("/", "").replace("tr_8", "TR-8").replace("tr_909", "TR-909").replace("_"," ").replace(".ogg", "").uppercase()
            }
            soundPool.play(sound2, soundPoolVolume2, soundPoolVolume2, 1, 0, soundPoolTempo2)
        }
            }
            false
        }
        findViewById<View>(R.id.include_view3).findViewById<ImageButton>(R.id.volume_minus).setOnTouchListener { _, event ->
            when (event.action) {
                MotionEvent.ACTION_DOWN -> {
            if (spvF3 > 1) {
                spvF3 -= 1
                soundPoolVolume3 = spvF3/10.0f
                findViewById<View>(R.id.include_view3).findViewById<TextView>(R.id.padText).text = ""
                findViewById<View>(R.id.include_view3).findViewById<TextView>(R.id.padText).text = soundPoolVolume3.toString().replace("f", "") + "            " + soundPoolTempo3.toString().replace("f", "") + "\n" + padText3.replaceBeforeLast("/", "").replace("/", "").replace("tr_8", "TR-8").replace("tr_909", "TR-909").replace("_"," ").replace(".ogg", "").uppercase()
            }
            soundPool.play(sound3, soundPoolVolume3, soundPoolVolume3, 1, 0, soundPoolTempo3)
        }
            }
            false
        }
        findViewById<View>(R.id.include_view3).findViewById<ImageButton>(R.id.volume_plus).setOnTouchListener { _, event ->
            when (event.action) {
                MotionEvent.ACTION_DOWN -> {
            if (spvF3 < 10) {
                spvF3 += 1
                soundPoolVolume3 = spvF3/10.0f
                findViewById<View>(R.id.include_view3).findViewById<TextView>(R.id.padText).text = ""
                findViewById<View>(R.id.include_view3).findViewById<TextView>(R.id.padText).text = soundPoolVolume3.toString().replace("f", "") + "            " + soundPoolTempo3.toString().replace("f", "") + "\n" + padText3.replaceBeforeLast("/", "").replace("/", "").replace("tr_8", "TR-8").replace("tr_909", "TR-909").replace("_"," ").replace(".ogg", "").uppercase()
            }
            soundPool.play(sound3, soundPoolVolume3, soundPoolVolume3, 1, 0, soundPoolTempo3)
        }
            }
            false
        }
        findViewById<View>(R.id.include_view3).findViewById<ImageButton>(R.id.tempo_minus).setOnTouchListener { _, event ->
            when (event.action) {
                MotionEvent.ACTION_DOWN -> {
            if (sptF3 > 2) {
                sptF3 -= 1
                soundPoolTempo3 = sptF3/10.0f
                findViewById<View>(R.id.include_view3).findViewById<TextView>(R.id.padText).text = ""
                findViewById<View>(R.id.include_view3).findViewById<TextView>(R.id.padText).text = soundPoolVolume3.toString().replace("f", "") + "            " + soundPoolTempo3.toString().replace("f", "") + "\n" + padText3.replaceBeforeLast("/", "").replace("/", "").replace("tr_8", "TR-8").replace("tr_909", "TR-909").replace("_"," ").replace(".ogg", "").uppercase()
            } else if (soundPoolTempo3 == 0.2f) {
                soundPoolTempo3 = 0.125f
                findViewById<View>(R.id.include_view3).findViewById<TextView>(R.id.padText).text = ""
                findViewById<View>(R.id.include_view3).findViewById<TextView>(R.id.padText).text = soundPoolVolume3.toString().replace("f", "") + "            " + soundPoolTempo3.toString().replace("f", "") + "\n" + padText3.replaceBeforeLast("/", "").replace("/", "").replace("tr_8", "TR-8").replace("tr_909", "TR-909").replace("_"," ").replace(".ogg", "").uppercase()
            }
            soundPool.play(sound3, soundPoolVolume3, soundPoolVolume3, 1, 0, soundPoolTempo3)
        }
            }
            false
        }
        findViewById<View>(R.id.include_view3).findViewById<ImageButton>(R.id.tempo_plus).setOnTouchListener { _, event ->
            when (event.action) {
                MotionEvent.ACTION_DOWN -> {
            if (soundPoolTempo3 == 0.125f) {
                soundPoolTempo3 = 0.2f
                findViewById<View>(R.id.include_view3).findViewById<TextView>(R.id.padText).text = ""
                findViewById<View>(R.id.include_view3).findViewById<TextView>(R.id.padText).text = soundPoolVolume3.toString().replace("f", "") + "            " + soundPoolTempo3.toString().replace("f", "") + "\n" + padText3.replaceBeforeLast("/", "").replace("/", "").replace("tr_8", "TR-8").replace("tr_909", "TR-909").replace("_"," ").replace(".ogg", "").uppercase()
            } else if (sptF3 < 80) {
                sptF3 += 1
                soundPoolTempo3 = sptF3/10.0f
                findViewById<View>(R.id.include_view3).findViewById<TextView>(R.id.padText).text = ""
                findViewById<View>(R.id.include_view3).findViewById<TextView>(R.id.padText).text = soundPoolVolume3.toString().replace("f", "") + "            " + soundPoolTempo3.toString().replace("f", "") + "\n" + padText3.replaceBeforeLast("/", "").replace("/", "").replace("tr_8", "TR-8").replace("tr_909", "TR-909").replace("_"," ").replace(".ogg", "").uppercase()
            }
            soundPool.play(sound3, soundPoolVolume3, soundPoolVolume3, 1, 0, soundPoolTempo3)
        }
            }
            false
        }
        findViewById<View>(R.id.include_view4).findViewById<ImageButton>(R.id.volume_minus).setOnTouchListener { _, event ->
            when (event.action) {
                MotionEvent.ACTION_DOWN -> {
            if (spvF4 > 1) {
                spvF4 -= 1
                soundPoolVolume4 = spvF4/10.0f
                findViewById<View>(R.id.tuning_sequencer2).findViewById<TextView>(R.id.volume).text = soundPoolVolume4.toString().replace("f", "")
                findViewById<View>(R.id.include_view4).findViewById<TextView>(R.id.padText).text = ""
                findViewById<View>(R.id.include_view4).findViewById<TextView>(R.id.padText).text = soundPoolVolume4.toString().replace("f", "") + "            " + soundPoolTempo4.toString().replace("f", "") + "\n" + padText4.replaceBeforeLast("/", "").replace("/", "").replace("tr_8", "TR-8").replace("tr_909", "TR-909").replace("_"," ").replace(".ogg", "").uppercase()
            }
            soundPool.play(sound4, soundPoolVolume4, soundPoolVolume4, 1, 0, soundPoolTempo4)
        }
            }
            false
        }
        findViewById<View>(R.id.include_view4).findViewById<ImageButton>(R.id.volume_plus).setOnTouchListener { _, event ->
            when (event.action) {
                MotionEvent.ACTION_DOWN -> {
            if (spvF4 < 10) {
                spvF4 += 1
                soundPoolVolume4 = spvF4/10.0f
                findViewById<View>(R.id.tuning_sequencer2).findViewById<TextView>(R.id.volume).text = soundPoolVolume4.toString().replace("f", "")
                findViewById<View>(R.id.include_view4).findViewById<TextView>(R.id.padText).text = ""
                findViewById<View>(R.id.include_view4).findViewById<TextView>(R.id.padText).text = soundPoolVolume4.toString().replace("f", "") + "            " + soundPoolTempo4.toString().replace("f", "") + "\n" + padText4.replaceBeforeLast("/", "").replace("/", "").replace("tr_8", "TR-8").replace("tr_909", "TR-909").replace("_"," ").replace(".ogg", "").uppercase()
            }
            soundPool.play(sound4, soundPoolVolume4, soundPoolVolume4, 1, 0, soundPoolTempo4)
        }
            }
            false
        }
        findViewById<View>(R.id.include_view4).findViewById<ImageButton>(R.id.tempo_minus).setOnTouchListener { _, event ->
            when (event.action) {
                MotionEvent.ACTION_DOWN -> {
            if (sptF4 > 2) {
                sptF4 -= 1
                soundPoolTempo4 = sptF4/10.0f
                findViewById<View>(R.id.tuning_sequencer2).findViewById<TextView>(R.id.tempo).text = soundPoolTempo4.toString().replace("f", "")
                findViewById<View>(R.id.include_view4).findViewById<TextView>(R.id.padText).text = ""
                findViewById<View>(R.id.include_view4).findViewById<TextView>(R.id.padText).text = soundPoolVolume4.toString().replace("f", "") + "            " + soundPoolTempo4.toString().replace("f", "") + "\n" + padText4.replaceBeforeLast("/", "").replace("/", "").replace("tr_8", "TR-8").replace("tr_909", "TR-909").replace("_"," ").replace(".ogg", "").uppercase()
            } else if (soundPoolTempo4 == 0.2f) {
                soundPoolTempo4 = 0.125f
                findViewById<View>(R.id.tuning_sequencer2).findViewById<TextView>(R.id.tempo).text = soundPoolTempo4.toString().replace("f", "")
                findViewById<View>(R.id.include_view4).findViewById<TextView>(R.id.padText).text = ""
                findViewById<View>(R.id.include_view4).findViewById<TextView>(R.id.padText).text = soundPoolVolume4.toString().replace("f", "") + "            " + soundPoolTempo4.toString().replace("f", "") + "\n" + padText4.replaceBeforeLast("/", "").replace("/", "").replace("tr_8", "TR-8").replace("tr_909", "TR-909").replace("_"," ").replace(".ogg", "").uppercase()
            }
            soundPool.play(sound4, soundPoolVolume4, soundPoolVolume4, 1, 0, soundPoolTempo4)
        }
            }
            false
        }
        findViewById<View>(R.id.include_view4).findViewById<ImageButton>(R.id.tempo_plus).setOnTouchListener { _, event ->
            when (event.action) {
                MotionEvent.ACTION_DOWN -> {
            if (soundPoolTempo4 == 0.125f) {
                soundPoolTempo4 = 0.2f
                findViewById<View>(R.id.tuning_sequencer2).findViewById<TextView>(R.id.tempo).text = soundPoolTempo4.toString().replace("f", "")
                findViewById<View>(R.id.include_view4).findViewById<TextView>(R.id.padText).text = ""
                findViewById<View>(R.id.include_view4).findViewById<TextView>(R.id.padText).text = soundPoolVolume4.toString().replace("f", "") + "            " + soundPoolTempo4.toString().replace("f", "") + "\n" + padText4.replaceBeforeLast("/", "").replace("/", "").replace("tr_8", "TR-8").replace("tr_909", "TR-909").replace("_"," ").replace(".ogg", "").uppercase()
            } else if (sptF4 < 80) {
                sptF4 += 1
                soundPoolTempo4 = sptF4/10.0f
                findViewById<View>(R.id.tuning_sequencer2).findViewById<TextView>(R.id.tempo).text = soundPoolTempo4.toString().replace("f", "")
                findViewById<View>(R.id.include_view4).findViewById<TextView>(R.id.padText).text = ""
                findViewById<View>(R.id.include_view4).findViewById<TextView>(R.id.padText).text = soundPoolVolume4.toString().replace("f", "") + "            " + soundPoolTempo4.toString().replace("f", "") + "\n" + padText4.replaceBeforeLast("/", "").replace("/", "").replace("tr_8", "TR-8").replace("tr_909", "TR-909").replace("_"," ").replace(".ogg", "").uppercase()
            }
            soundPool.play(sound4, soundPoolVolume4, soundPoolVolume4, 1, 0, soundPoolTempo4)
        }
            }
            false
        }
        findViewById<View>(R.id.include_view5).findViewById<ImageButton>(R.id.volume_minus).setOnTouchListener { _, event ->
            when (event.action) {
                MotionEvent.ACTION_DOWN -> {
            if (spvF5 > 1) {
                spvF5 -= 1
                soundPoolVolume5 = spvF5/10.0f
                findViewById<View>(R.id.include_view5).findViewById<TextView>(R.id.padText).text = ""
                findViewById<View>(R.id.include_view5).findViewById<TextView>(R.id.padText).text = soundPoolVolume5.toString().replace("f", "") + "            " + soundPoolTempo5.toString().replace("f", "") + "\n" + padText5.replaceBeforeLast("/", "").replace("/", "").replace("tr_8", "TR-8").replace("tr_909", "TR-909").replace("_"," ").replace(".ogg", "").uppercase()
            }
            soundPool.play(sound5, soundPoolVolume5, soundPoolVolume5, 1, 0, soundPoolTempo5)
        }
            }
            false
        }
        findViewById<View>(R.id.include_view5).findViewById<ImageButton>(R.id.volume_plus).setOnTouchListener { _, event ->
            when (event.action) {
                MotionEvent.ACTION_DOWN -> {
            if (spvF5 < 10) {
                spvF5 += 1
                soundPoolVolume5 = spvF5/10.0f
                findViewById<View>(R.id.include_view5).findViewById<TextView>(R.id.padText).text = ""
                findViewById<View>(R.id.include_view5).findViewById<TextView>(R.id.padText).text = soundPoolVolume5.toString().replace("f", "") + "            " + soundPoolTempo5.toString().replace("f", "") + "\n" + padText5.replaceBeforeLast("/", "").replace("/", "").replace("tr_8", "TR-8").replace("tr_909", "TR-909").replace("_"," ").replace(".ogg", "").uppercase()
            }
            soundPool.play(sound5, soundPoolVolume5, soundPoolVolume5, 1, 0, soundPoolTempo5)
        }
            }
            false
        }
        findViewById<View>(R.id.include_view5).findViewById<ImageButton>(R.id.tempo_minus).setOnTouchListener { _, event ->
            when (event.action) {
                MotionEvent.ACTION_DOWN -> {
            if (sptF5 > 2) {
                sptF5 -= 1
                soundPoolTempo5 = sptF5/10.0f
                findViewById<View>(R.id.include_view5).findViewById<TextView>(R.id.padText).text = ""
                findViewById<View>(R.id.include_view5).findViewById<TextView>(R.id.padText).text = soundPoolVolume5.toString().replace("f", "") + "            " + soundPoolTempo5.toString().replace("f", "") + "\n" + padText5.replaceBeforeLast("/", "").replace("/", "").replace("tr_8", "TR-8").replace("tr_909", "TR-909").replace("_"," ").replace(".ogg", "").uppercase()
            } else if (soundPoolTempo5 == 0.2f) {
                soundPoolTempo5 = 0.125f
                findViewById<View>(R.id.include_view5).findViewById<TextView>(R.id.padText).text = ""
                findViewById<View>(R.id.include_view5).findViewById<TextView>(R.id.padText).text = soundPoolVolume5.toString().replace("f", "") + "            " + soundPoolTempo5.toString().replace("f", "") + "\n" + padText5.replaceBeforeLast("/", "").replace("/", "").replace("tr_8", "TR-8").replace("tr_909", "TR-909").replace("_"," ").replace(".ogg", "").uppercase()
            }
            soundPool.play(sound5, soundPoolVolume5, soundPoolVolume5, 1, 0, soundPoolTempo5)
        }
            }
            false
        }
        findViewById<View>(R.id.include_view5).findViewById<ImageButton>(R.id.tempo_plus).setOnTouchListener { _, event ->
            when (event.action) {
                MotionEvent.ACTION_DOWN -> {
            if (soundPoolTempo5 == 0.125f) {
                soundPoolTempo5 = 0.2f
                findViewById<View>(R.id.include_view5).findViewById<TextView>(R.id.padText).text = ""
                findViewById<View>(R.id.include_view5).findViewById<TextView>(R.id.padText).text = soundPoolVolume5.toString().replace("f", "") + "            " + soundPoolTempo5.toString().replace("f", "") + "\n" + padText5.replaceBeforeLast("/", "").replace("/", "").replace("tr_8", "TR-8").replace("tr_909", "TR-909").replace("_"," ").replace(".ogg", "").uppercase()
            } else if (sptF5 < 80) {
                sptF5 += 1
                soundPoolTempo5 = sptF5/10.0f
                findViewById<View>(R.id.include_view5).findViewById<TextView>(R.id.padText).text = ""
                findViewById<View>(R.id.include_view5).findViewById<TextView>(R.id.padText).text = soundPoolVolume5.toString().replace("f", "") + "            " + soundPoolTempo5.toString().replace("f", "") + "\n" + padText5.replaceBeforeLast("/", "").replace("/", "").replace("tr_8", "TR-8").replace("tr_909", "TR-909").replace("_"," ").replace(".ogg", "").uppercase()
            }
            soundPool.play(sound5, soundPoolVolume5, soundPoolVolume5, 1, 0, soundPoolTempo5)
        }
            }
            false
        }
        findViewById<View>(R.id.include_view6).findViewById<ImageButton>(R.id.volume_minus).setOnTouchListener { _, event ->
            when (event.action) {
                MotionEvent.ACTION_DOWN -> {
            if (spvF6 > 1) {
                spvF6 -= 1
                soundPoolVolume6 = spvF6/10.0f
                findViewById<View>(R.id.include_view6).findViewById<TextView>(R.id.padText).text = ""
                findViewById<View>(R.id.include_view6).findViewById<TextView>(R.id.padText).text = soundPoolVolume6.toString().replace("f", "") + "            " + soundPoolTempo6.toString().replace("f", "") + "\n" + padText6.replaceBeforeLast("/", "").replace("/", "").replace("tr_8", "TR-8").replace("tr_909", "TR-909").replace("_"," ").replace(".ogg", "").uppercase()
            }
            soundPool.play(sound6, soundPoolVolume6, soundPoolVolume6, 1, 0, soundPoolTempo6)
        }
            }
            false
        }
        findViewById<View>(R.id.include_view6).findViewById<ImageButton>(R.id.volume_plus).setOnTouchListener { _, event ->
            when (event.action) {
                MotionEvent.ACTION_DOWN -> {
            if (spvF6 < 10) {
                spvF6 += 1
                soundPoolVolume6 = spvF6/10.0f
                findViewById<View>(R.id.include_view6).findViewById<TextView>(R.id.padText).text = ""
                findViewById<View>(R.id.include_view6).findViewById<TextView>(R.id.padText).text = soundPoolVolume6.toString().replace("f", "") + "            " + soundPoolTempo6.toString().replace("f", "") + "\n" + padText6.replaceBeforeLast("/", "").replace("/", "").replace("tr_8", "TR-8").replace("tr_909", "TR-909").replace("_"," ").replace(".ogg", "").uppercase()
            }
            soundPool.play(sound6, soundPoolVolume6, soundPoolVolume6, 1, 0, soundPoolTempo6)
        }
            }
            false
        }
        findViewById<View>(R.id.include_view6).findViewById<ImageButton>(R.id.tempo_minus).setOnTouchListener { _, event ->
            when (event.action) {
                MotionEvent.ACTION_DOWN -> {
            if (sptF6 > 2) {
                sptF6 -= 1
                soundPoolTempo6 = sptF6/10.0f
                findViewById<View>(R.id.include_view6).findViewById<TextView>(R.id.padText).text = ""
                findViewById<View>(R.id.include_view6).findViewById<TextView>(R.id.padText).text = soundPoolVolume6.toString().replace("f", "") + "            " + soundPoolTempo6.toString().replace("f", "") + "\n" + padText6.replaceBeforeLast("/", "").replace("/", "").replace("tr_8", "TR-8").replace("tr_909", "TR-909").replace("_"," ").replace(".ogg", "").uppercase()
            } else if (soundPoolTempo6 == 0.2f) {
                soundPoolTempo6 = 0.125f
                findViewById<View>(R.id.include_view6).findViewById<TextView>(R.id.padText).text = ""
                findViewById<View>(R.id.include_view6).findViewById<TextView>(R.id.padText).text = soundPoolVolume6.toString().replace("f", "") + "            " + soundPoolTempo6.toString().replace("f", "") + "\n" + padText6.replaceBeforeLast("/", "").replace("/", "").replace("tr_8", "TR-8").replace("tr_909", "TR-909").replace("_"," ").replace(".ogg", "").uppercase()
            }
            soundPool.play(sound6, soundPoolVolume6, soundPoolVolume6, 1, 0, soundPoolTempo6)
        }
            }
            false
        }
        findViewById<View>(R.id.include_view6).findViewById<ImageButton>(R.id.tempo_plus).setOnTouchListener { _, event ->
            when (event.action) {
                MotionEvent.ACTION_DOWN -> {
            if (soundPoolTempo6 == 0.125f) {
                soundPoolTempo6 = 0.2f
                findViewById<View>(R.id.include_view6).findViewById<TextView>(R.id.padText).text = ""
                findViewById<View>(R.id.include_view6).findViewById<TextView>(R.id.padText).text = soundPoolVolume6.toString().replace("f", "") + "            " + soundPoolTempo6.toString().replace("f", "") + "\n" + padText6.replaceBeforeLast("/", "").replace("/", "").replace("tr_8", "TR-8").replace("tr_909", "TR-909").replace("_"," ").replace(".ogg", "").uppercase()
            } else if (sptF6 < 80) {
                sptF6 += 1
                soundPoolTempo6 = sptF6/10.0f
                findViewById<View>(R.id.include_view6).findViewById<TextView>(R.id.padText).text = ""
                findViewById<View>(R.id.include_view6).findViewById<TextView>(R.id.padText).text = soundPoolVolume6.toString().replace("f", "") + "            " + soundPoolTempo6.toString().replace("f", "") + "\n" + padText6.replaceBeforeLast("/", "").replace("/", "").replace("tr_8", "TR-8").replace("tr_909", "TR-909").replace("_"," ").replace(".ogg", "").uppercase()
            }
            soundPool.play(sound6, soundPoolVolume6, soundPoolVolume6, 1, 0, soundPoolTempo6)
        }
            }
            false
        }
        findViewById<View>(R.id.include_view7).findViewById<ImageButton>(R.id.volume_minus).setOnTouchListener { _, event ->
            when (event.action) {
                MotionEvent.ACTION_DOWN -> {
            if (spvF7 > 1) {
                spvF7 -= 1
                soundPoolVolume7 = spvF7/10.0f
                findViewById<View>(R.id.tuning_sequencer3).findViewById<TextView>(R.id.volume).text = soundPoolVolume7.toString().replace("f", "")
                findViewById<View>(R.id.include_view7).findViewById<TextView>(R.id.padText).text = ""
                findViewById<View>(R.id.include_view7).findViewById<TextView>(R.id.padText).text = soundPoolVolume7.toString().replace("f", "") + "            " + soundPoolTempo7.toString().replace("f", "") + "\n" + padText7.replaceBeforeLast("/", "").replace("/", "").replace("tr_8", "TR-8").replace("tr_909", "TR-909").replace("_"," ").replace(".ogg", "").uppercase()
            }
            soundPool.play(sound7, soundPoolVolume7, soundPoolVolume7, 1, 0, soundPoolTempo7)
        }
            }
            false
        }
        findViewById<View>(R.id.include_view7).findViewById<ImageButton>(R.id.volume_plus).setOnTouchListener { _, event ->
            when (event.action) {
                MotionEvent.ACTION_DOWN -> {
            if (spvF7 < 10) {
                spvF7 += 1
                soundPoolVolume7 = spvF7/10.0f
                findViewById<View>(R.id.tuning_sequencer3).findViewById<TextView>(R.id.volume).text = soundPoolVolume7.toString().replace("f", "")
                findViewById<View>(R.id.include_view7).findViewById<TextView>(R.id.padText).text = ""
                findViewById<View>(R.id.include_view7).findViewById<TextView>(R.id.padText).text = soundPoolVolume7.toString().replace("f", "") + "            " + soundPoolTempo7.toString().replace("f", "") + "\n" + padText7.replaceBeforeLast("/", "").replace("/", "").replace("tr_8", "TR-8").replace("tr_909", "TR-909").replace("_"," ").replace(".ogg", "").uppercase()
            }
            soundPool.play(sound7, soundPoolVolume7, soundPoolVolume7, 1, 0, soundPoolTempo7)
        }
            }
            false
        }
        findViewById<View>(R.id.include_view7).findViewById<ImageButton>(R.id.tempo_minus).setOnTouchListener { _, event ->
            when (event.action) {
                MotionEvent.ACTION_DOWN -> {
            if (sptF7 > 2) {
                sptF7 -= 1
                soundPoolTempo7 = sptF7/10.0f
                findViewById<View>(R.id.tuning_sequencer3).findViewById<TextView>(R.id.tempo).text = soundPoolTempo7.toString().replace("f", "")
                findViewById<View>(R.id.include_view7).findViewById<TextView>(R.id.padText).text = ""
                findViewById<View>(R.id.include_view7).findViewById<TextView>(R.id.padText).text = soundPoolVolume7.toString().replace("f", "") + "            " + soundPoolTempo7.toString().replace("f", "") + "\n" + padText7.replaceBeforeLast("/", "").replace("/", "").replace("tr_8", "TR-8").replace("tr_909", "TR-909").replace("_"," ").replace(".ogg", "").uppercase()
            } else if (soundPoolTempo7 == 0.2f) {
                soundPoolTempo7 = 0.125f
                findViewById<View>(R.id.tuning_sequencer3).findViewById<TextView>(R.id.tempo).text = soundPoolTempo7.toString().replace("f", "")
                findViewById<View>(R.id.include_view7).findViewById<TextView>(R.id.padText).text = ""
                findViewById<View>(R.id.include_view7).findViewById<TextView>(R.id.padText).text = soundPoolVolume7.toString().replace("f", "") + "            " + soundPoolTempo7.toString().replace("f", "") + "\n" + padText7.replaceBeforeLast("/", "").replace("/", "").replace("tr_8", "TR-8").replace("tr_909", "TR-909").replace("_"," ").replace(".ogg", "").uppercase()
            }
            soundPool.play(sound7, soundPoolVolume7, soundPoolVolume7, 1, 0, soundPoolTempo7)
        }
            }
            false
        }
        findViewById<View>(R.id.include_view7).findViewById<ImageButton>(R.id.tempo_plus).setOnTouchListener { _, event ->
            when (event.action) {
                MotionEvent.ACTION_DOWN -> {
            if (soundPoolTempo7 == 0.125f) {
                soundPoolTempo7 = 0.2f
                findViewById<View>(R.id.tuning_sequencer3).findViewById<TextView>(R.id.tempo).text = soundPoolTempo7.toString().replace("f", "")
                findViewById<View>(R.id.include_view7).findViewById<TextView>(R.id.padText).text = ""
                findViewById<View>(R.id.include_view7).findViewById<TextView>(R.id.padText).text = soundPoolVolume7.toString().replace("f", "") + "            " + soundPoolTempo7.toString().replace("f", "") + "\n" + padText7.replaceBeforeLast("/", "").replace("/", "").replace("tr_8", "TR-8").replace("tr_909", "TR-909").replace("_"," ").replace(".ogg", "").uppercase()
            } else if (sptF7 < 80) {
                sptF7 += 1
                soundPoolTempo7 = sptF7/10.0f
                findViewById<View>(R.id.tuning_sequencer3).findViewById<TextView>(R.id.tempo).text = soundPoolTempo7.toString().replace("f", "")
                findViewById<View>(R.id.include_view7).findViewById<TextView>(R.id.padText).text = ""
                findViewById<View>(R.id.include_view7).findViewById<TextView>(R.id.padText).text = soundPoolVolume7.toString().replace("f", "") + "            " + soundPoolTempo7.toString().replace("f", "") + "\n" + padText7.replaceBeforeLast("/", "").replace("/", "").replace("tr_8", "TR-8").replace("tr_909", "TR-909").replace("_"," ").replace(".ogg", "").uppercase()
            }
            soundPool.play(sound7, soundPoolVolume7, soundPoolVolume7, 1, 0, soundPoolTempo7)
        }
            }
            false
        }
        findViewById<View>(R.id.include_view8).findViewById<ImageButton>(R.id.volume_minus).setOnTouchListener { _, event ->
            when (event.action) {
                MotionEvent.ACTION_DOWN -> {
            if (spvF8 > 1) {
                spvF8 -= 1
                soundPoolVolume8 = spvF8/10.0f
                findViewById<View>(R.id.include_view8).findViewById<TextView>(R.id.padText).text = ""
                findViewById<View>(R.id.include_view8).findViewById<TextView>(R.id.padText).text = soundPoolVolume8.toString().replace("f", "") + "            " + soundPoolTempo8.toString().replace("f", "") + "\n" + padText8.replaceBeforeLast("/", "").replace("/", "").replace("tr_8", "TR-8").replace("tr_909", "TR-909").replace("_"," ").replace(".ogg", "").uppercase()
            }
            soundPool.play(sound8, soundPoolVolume8, soundPoolVolume8, 1, 0, soundPoolTempo8)
        }
            }
            false
        }
        findViewById<View>(R.id.include_view8).findViewById<ImageButton>(R.id.volume_plus).setOnTouchListener { _, event ->
            when (event.action) {
                MotionEvent.ACTION_DOWN -> {
            if (spvF8 < 10) {
                spvF8 += 1
                soundPoolVolume8 = spvF8/10.0f
                findViewById<View>(R.id.include_view8).findViewById<TextView>(R.id.padText).text = ""
                findViewById<View>(R.id.include_view8).findViewById<TextView>(R.id.padText).text = soundPoolVolume8.toString().replace("f", "") + "            " + soundPoolTempo8.toString().replace("f", "") + "\n" + padText8.replaceBeforeLast("/", "").replace("/", "").replace("tr_8", "TR-8").replace("tr_909", "TR-909").replace("_"," ").replace(".ogg", "").uppercase()
            }
            soundPool.play(sound8, soundPoolVolume8, soundPoolVolume8, 1, 0, soundPoolTempo8)
        }
            }
            false
        }
        findViewById<View>(R.id.include_view8).findViewById<ImageButton>(R.id.tempo_minus).setOnTouchListener { _, event ->
            when (event.action) {
                MotionEvent.ACTION_DOWN -> {
            if (sptF8 > 2) {
                sptF8 -= 1
                soundPoolTempo8 = sptF8/10.0f
                findViewById<View>(R.id.include_view8).findViewById<TextView>(R.id.padText).text = ""
                findViewById<View>(R.id.include_view8).findViewById<TextView>(R.id.padText).text = soundPoolVolume8.toString().replace("f", "") + "            " + soundPoolTempo8.toString().replace("f", "") + "\n" + padText8.replaceBeforeLast("/", "").replace("/", "").replace("tr_8", "TR-8").replace("tr_909", "TR-909").replace("_"," ").replace(".ogg", "").uppercase()
            } else if (soundPoolTempo8 == 0.2f) {
                soundPoolTempo8 = 0.125f
                findViewById<View>(R.id.include_view8).findViewById<TextView>(R.id.padText).text = ""
                findViewById<View>(R.id.include_view8).findViewById<TextView>(R.id.padText).text = soundPoolVolume8.toString().replace("f", "") + "            " + soundPoolTempo8.toString().replace("f", "") + "\n" + padText8.replaceBeforeLast("/", "").replace("/", "").replace("tr_8", "TR-8").replace("tr_909", "TR-909").replace("_"," ").replace(".ogg", "").uppercase()
            }
            soundPool.play(sound8, soundPoolVolume8, soundPoolVolume8, 1, 0, soundPoolTempo8)
        }
            }
            false
        }
        findViewById<View>(R.id.include_view8).findViewById<ImageButton>(R.id.tempo_plus).setOnTouchListener { _, event ->
            when (event.action) {
                MotionEvent.ACTION_DOWN -> {
            if (soundPoolTempo8 == 0.125f) {
                soundPoolTempo8 = 0.2f
                findViewById<View>(R.id.include_view8).findViewById<TextView>(R.id.padText).text = ""
                findViewById<View>(R.id.include_view8).findViewById<TextView>(R.id.padText).text = soundPoolVolume8.toString().replace("f", "") + "            " + soundPoolTempo8.toString().replace("f", "") + "\n" + padText8.replaceBeforeLast("/", "").replace("/", "").replace("tr_8", "TR-8").replace("tr_909", "TR-909").replace("_"," ").replace(".ogg", "").uppercase()
            } else if (sptF8 < 80) {
                sptF8 += 1
                soundPoolTempo8 = sptF8/10.0f
                findViewById<View>(R.id.include_view8).findViewById<TextView>(R.id.padText).text = ""
                findViewById<View>(R.id.include_view8).findViewById<TextView>(R.id.padText).text = soundPoolVolume8.toString().replace("f", "") + "            " + soundPoolTempo8.toString().replace("f", "") + "\n" + padText8.replaceBeforeLast("/", "").replace("/", "").replace("tr_8", "TR-8").replace("tr_909", "TR-909").replace("_"," ").replace(".ogg", "").uppercase()
            }
            soundPool.play(sound8, soundPoolVolume8, soundPoolVolume8, 1, 0, soundPoolTempo8)
        }
            }
            false
        }
        findViewById<View>(R.id.include_view9).findViewById<ImageButton>(R.id.volume_minus).setOnTouchListener { _, event ->
            when (event.action) {
                MotionEvent.ACTION_DOWN -> {
            if (spvF9 > 1) {
                spvF9 -= 1
                soundPoolVolume9 = spvF9/10.0f
                findViewById<View>(R.id.include_view9).findViewById<TextView>(R.id.padText).text = ""
                findViewById<View>(R.id.include_view9).findViewById<TextView>(R.id.padText).text = soundPoolVolume9.toString().replace("f", "") + "            " + soundPoolTempo9.toString().replace("f", "") + "\n" + padText9.replaceBeforeLast("/", "").replace("/", "").replace("tr_8", "TR-8").replace("tr_909", "TR-909").replace("_"," ").replace(".ogg", "").uppercase()
            }
            soundPool.play(sound9, soundPoolVolume9, soundPoolVolume9, 1, 0, soundPoolTempo9)
        }
            }
            false
        }
        findViewById<View>(R.id.include_view9).findViewById<ImageButton>(R.id.volume_plus).setOnTouchListener { _, event ->
            when (event.action) {
                MotionEvent.ACTION_DOWN -> {
            if (spvF9 < 10) {
                spvF9 += 1
                soundPoolVolume9 = spvF9/10.0f
                findViewById<View>(R.id.include_view9).findViewById<TextView>(R.id.padText).text = ""
                findViewById<View>(R.id.include_view9).findViewById<TextView>(R.id.padText).text = soundPoolVolume9.toString().replace("f", "") + "            " + soundPoolTempo9.toString().replace("f", "") + "\n" + padText9.replaceBeforeLast("/", "").replace("/", "").replace("tr_8", "TR-8").replace("tr_909", "TR-909").replace("_"," ").replace(".ogg", "").uppercase()
            }
            soundPool.play(sound9, soundPoolVolume9, soundPoolVolume9, 1, 0, soundPoolTempo9)
        }
            }
            false
        }
        findViewById<View>(R.id.include_view9).findViewById<ImageButton>(R.id.tempo_minus).setOnTouchListener { _, event ->
            when (event.action) {
                MotionEvent.ACTION_DOWN -> {
            if (sptF9 > 2) {
                sptF9 -= 1
                soundPoolTempo9 = sptF9/10.0f
                findViewById<View>(R.id.include_view9).findViewById<TextView>(R.id.padText).text = ""
                findViewById<View>(R.id.include_view9).findViewById<TextView>(R.id.padText).text = soundPoolVolume9.toString().replace("f", "") + "            " + soundPoolTempo9.toString().replace("f", "") + "\n" + padText9.replaceBeforeLast("/", "").replace("/", "").replace("tr_8", "TR-8").replace("tr_909", "TR-909").replace("_"," ").replace(".ogg", "").uppercase()
            } else if (soundPoolTempo9 == 0.2f) {
                soundPoolTempo9 = 0.125f
                findViewById<View>(R.id.include_view9).findViewById<TextView>(R.id.padText).text = ""
                findViewById<View>(R.id.include_view9).findViewById<TextView>(R.id.padText).text = soundPoolVolume9.toString().replace("f", "") + "            " + soundPoolTempo9.toString().replace("f", "") + "\n" + padText9.replaceBeforeLast("/", "").replace("/", "").replace("tr_8", "TR-8").replace("tr_909", "TR-909").replace("_"," ").replace(".ogg", "").uppercase()
            }
            soundPool.play(sound9, soundPoolVolume9, soundPoolVolume9, 1, 0, soundPoolTempo9)
        }
            }
            false
        }
        findViewById<View>(R.id.include_view9).findViewById<ImageButton>(R.id.tempo_plus).setOnTouchListener { _, event ->
            when (event.action) {
                MotionEvent.ACTION_DOWN -> {
            if (soundPoolTempo9 == 0.125f) {
                soundPoolTempo9 = 0.2f
                findViewById<View>(R.id.include_view9).findViewById<TextView>(R.id.padText).text = ""
                findViewById<View>(R.id.include_view9).findViewById<TextView>(R.id.padText).text = soundPoolVolume9.toString().replace("f", "") + "            " + soundPoolTempo9.toString().replace("f", "") + "\n" + padText9.replaceBeforeLast("/", "").replace("/", "").replace("tr_8", "TR-8").replace("tr_909", "TR-909").replace("_"," ").replace(".ogg", "").uppercase()
            } else if (sptF9 < 80) {
                sptF9 += 1
                soundPoolTempo9 = sptF9/10.0f
                findViewById<View>(R.id.include_view9).findViewById<TextView>(R.id.padText).text = ""
                findViewById<View>(R.id.include_view9).findViewById<TextView>(R.id.padText).text = soundPoolVolume9.toString().replace("f", "") + "            " + soundPoolTempo9.toString().replace("f", "") + "\n" + padText9.replaceBeforeLast("/", "").replace("/", "").replace("tr_8", "TR-8").replace("tr_909", "TR-909").replace("_"," ").replace(".ogg", "").uppercase()
            }
            soundPool.play(sound9, soundPoolVolume9, soundPoolVolume9, 1, 0, soundPoolTempo9)
        }
            }
            false
        }
        findViewById<View>(R.id.include_view10).findViewById<ImageButton>(R.id.volume_minus).setOnTouchListener { _, event ->
            when (event.action) {
                MotionEvent.ACTION_DOWN -> {
            if (spvF10 > 1) {
                spvF10 -= 1
                soundPoolVolume10 = spvF10/10.0f
                findViewById<View>(R.id.tuning_sequencer4).findViewById<TextView>(R.id.volume).text = soundPoolVolume10.toString().replace("f", "")
                findViewById<View>(R.id.include_view10).findViewById<TextView>(R.id.padText).text = ""
                findViewById<View>(R.id.include_view10).findViewById<TextView>(R.id.padText).text = soundPoolVolume10.toString().replace("f", "") + "            " + soundPoolTempo10.toString().replace("f", "") + "\n" + padText10.replaceBeforeLast("/", "").replace("/", "").replace("tr_8", "TR-8").replace("tr_909", "TR-909").replace("_"," ").replace(".ogg", "").uppercase()
            }
            soundPool.play(sound10, soundPoolVolume10, soundPoolVolume10, 1, 0, soundPoolTempo10)
        }
            }
            false
        }
        findViewById<View>(R.id.include_view10).findViewById<ImageButton>(R.id.volume_plus).setOnTouchListener { _, event ->
            when (event.action) {
                MotionEvent.ACTION_DOWN -> {
            if (spvF10 < 10) {
                spvF10 += 1
                soundPoolVolume10 = spvF10/10.0f
                findViewById<View>(R.id.tuning_sequencer4).findViewById<TextView>(R.id.volume).text = soundPoolVolume10.toString().replace("f", "")
                findViewById<View>(R.id.include_view10).findViewById<TextView>(R.id.padText).text = ""
                findViewById<View>(R.id.include_view10).findViewById<TextView>(R.id.padText).text = soundPoolVolume10.toString().replace("f", "") + "            " + soundPoolTempo10.toString().replace("f", "") + "\n" + padText10.replaceBeforeLast("/", "").replace("/", "").replace("tr_8", "TR-8").replace("tr_909", "TR-909").replace("_"," ").replace(".ogg", "").uppercase()
            }
            soundPool.play(sound10, soundPoolVolume10, soundPoolVolume10, 1, 0, soundPoolTempo10)
        }
            }
            false
        }
        findViewById<View>(R.id.include_view10).findViewById<ImageButton>(R.id.tempo_minus).setOnTouchListener { _, event ->
            when (event.action) {
                MotionEvent.ACTION_DOWN -> {
            if (sptF10 > 2) {
                sptF10 -= 1
                soundPoolTempo10 = sptF10/10.0f
                findViewById<View>(R.id.tuning_sequencer4).findViewById<TextView>(R.id.tempo).text = soundPoolTempo10.toString().replace("f", "")
                findViewById<View>(R.id.include_view10).findViewById<TextView>(R.id.padText).text = ""
                findViewById<View>(R.id.include_view10).findViewById<TextView>(R.id.padText).text = soundPoolVolume10.toString().replace("f", "") + "            " + soundPoolTempo10.toString().replace("f", "") + "\n" + padText10.replaceBeforeLast("/", "").replace("/", "").replace("tr_8", "TR-8").replace("tr_909", "TR-909").replace("_"," ").replace(".ogg", "").uppercase()
            } else if (soundPoolTempo10 == 0.2f) {
                soundPoolTempo10 = 0.125f
                findViewById<View>(R.id.tuning_sequencer4).findViewById<TextView>(R.id.tempo).text = soundPoolTempo10.toString().replace("f", "")
                findViewById<View>(R.id.include_view10).findViewById<TextView>(R.id.padText).text = ""
                findViewById<View>(R.id.include_view10).findViewById<TextView>(R.id.padText).text = soundPoolVolume10.toString().replace("f", "") + "            " + soundPoolTempo10.toString().replace("f", "") + "\n" + padText10.replaceBeforeLast("/", "").replace("/", "").replace("tr_8", "TR-8").replace("tr_909", "TR-909").replace("_"," ").replace(".ogg", "").uppercase()
            }
            soundPool.play(sound10, soundPoolVolume10, soundPoolVolume10, 1, 0, soundPoolTempo10)
        }
            }
            false
        }
        findViewById<View>(R.id.include_view10).findViewById<ImageButton>(R.id.tempo_plus).setOnTouchListener { _, event ->
            when (event.action) {
                MotionEvent.ACTION_DOWN -> {
            if (soundPoolTempo10 == 0.125f) {
                soundPoolTempo10 = 0.2f
                findViewById<View>(R.id.tuning_sequencer4).findViewById<TextView>(R.id.tempo).text = soundPoolTempo10.toString().replace("f", "")
                findViewById<View>(R.id.include_view10).findViewById<TextView>(R.id.padText).text = ""
                findViewById<View>(R.id.include_view10).findViewById<TextView>(R.id.padText).text = soundPoolVolume10.toString().replace("f", "") + "            " + soundPoolTempo10.toString().replace("f", "") + "\n" + padText10.replaceBeforeLast("/", "").replace("/", "").replace("tr_8", "TR-8").replace("tr_909", "TR-909").replace("_"," ").replace(".ogg", "").uppercase()
            } else if (sptF10 < 80) {
                sptF10 += 1
                soundPoolTempo10 = sptF10/10.0f
                findViewById<View>(R.id.tuning_sequencer4).findViewById<TextView>(R.id.tempo).text = soundPoolTempo10.toString().replace("f", "")
                findViewById<View>(R.id.include_view10).findViewById<TextView>(R.id.padText).text = ""
                findViewById<View>(R.id.include_view10).findViewById<TextView>(R.id.padText).text = soundPoolVolume10.toString().replace("f", "") + "            " + soundPoolTempo10.toString().replace("f", "") + "\n" + padText10.replaceBeforeLast("/", "").replace("/", "").replace("tr_8", "TR-8").replace("tr_909", "TR-909").replace("_"," ").replace(".ogg", "").uppercase()
            }
            soundPool.play(sound10, soundPoolVolume10, soundPoolVolume10, 1, 0, soundPoolTempo10)
        }
            }
            false
        }
        findViewById<View>(R.id.include_view11).findViewById<ImageButton>(R.id.volume_minus).setOnTouchListener { _, event ->
            when (event.action) {
                MotionEvent.ACTION_DOWN -> {
            if (spvF11 > 1) {
                spvF11 -= 1
                soundPoolVolume11 = spvF11/10.0f
                findViewById<View>(R.id.include_view11).findViewById<TextView>(R.id.padText).text = ""
                findViewById<View>(R.id.include_view11).findViewById<TextView>(R.id.padText).text = soundPoolVolume11.toString().replace("f", "") + "            " + soundPoolTempo11.toString().replace("f", "") + "\n" + padText11.replaceBeforeLast("/", "").replace("/", "").replace("tr_8", "TR-8").replace("tr_909", "TR-909").replace("_"," ").replace(".ogg", "").uppercase()
            }
            soundPool.play(sound11, soundPoolVolume11, soundPoolVolume11, 1, 0, soundPoolTempo11)
        }
            }
            false
        }
        findViewById<View>(R.id.include_view11).findViewById<ImageButton>(R.id.volume_plus).setOnTouchListener { _, event ->
            when (event.action) {
                MotionEvent.ACTION_DOWN -> {
            if (spvF11 < 10) {
                spvF11 += 1
                soundPoolVolume11 = spvF11/10.0f
                findViewById<View>(R.id.include_view11).findViewById<TextView>(R.id.padText).text = ""
                findViewById<View>(R.id.include_view11).findViewById<TextView>(R.id.padText).text = soundPoolVolume11.toString().replace("f", "") + "            " + soundPoolTempo11.toString().replace("f", "") + "\n" + padText11.replaceBeforeLast("/", "").replace("/", "").replace("tr_8", "TR-8").replace("tr_909", "TR-909").replace("_"," ").replace(".ogg", "").uppercase()
            }
            soundPool.play(sound11, soundPoolVolume11, soundPoolVolume11, 1, 0, soundPoolTempo11)
        }
            }
            false
        }
        findViewById<View>(R.id.include_view11).findViewById<ImageButton>(R.id.tempo_minus).setOnTouchListener { _, event ->
            when (event.action) {
                MotionEvent.ACTION_DOWN -> {
            if (sptF11 > 2) {
                sptF11 -= 1
                soundPoolTempo11 = sptF11/10.0f
                findViewById<View>(R.id.include_view11).findViewById<TextView>(R.id.padText).text = ""
                findViewById<View>(R.id.include_view11).findViewById<TextView>(R.id.padText).text = soundPoolVolume11.toString().replace("f", "") + "            " + soundPoolTempo11.toString().replace("f", "") + "\n" + padText11.replaceBeforeLast("/", "").replace("/", "").replace("tr_8", "TR-8").replace("tr_909", "TR-909").replace("_"," ").replace(".ogg", "").uppercase()
            } else if (soundPoolTempo11 == 0.2f) {
                soundPoolTempo11 = 0.125f
                findViewById<View>(R.id.include_view11).findViewById<TextView>(R.id.padText).text = ""
                findViewById<View>(R.id.include_view11).findViewById<TextView>(R.id.padText).text = soundPoolVolume11.toString().replace("f", "") + "            " + soundPoolTempo11.toString().replace("f", "") + "\n" + padText11.replaceBeforeLast("/", "").replace("/", "").replace("tr_8", "TR-8").replace("tr_909", "TR-909").replace("_"," ").replace(".ogg", "").uppercase()
            }
            soundPool.play(sound11, soundPoolVolume11, soundPoolVolume11, 1, 0, soundPoolTempo11)
        }
            }
            false
        }
        findViewById<View>(R.id.include_view11).findViewById<ImageButton>(R.id.tempo_plus).setOnTouchListener { _, event ->
            when (event.action) {
                MotionEvent.ACTION_DOWN -> {
            if (soundPoolTempo11 == 0.125f) {
                soundPoolTempo11 = 0.2f
                findViewById<View>(R.id.include_view11).findViewById<TextView>(R.id.padText).text = ""
                findViewById<View>(R.id.include_view11).findViewById<TextView>(R.id.padText).text = soundPoolVolume11.toString().replace("f", "") + "            " + soundPoolTempo11.toString().replace("f", "") + "\n" + padText11.replaceBeforeLast("/", "").replace("/", "").replace("tr_8", "TR-8").replace("tr_909", "TR-909").replace("_"," ").replace(".ogg", "").uppercase()
            } else if (sptF11 < 80) {
                sptF11 += 1
                soundPoolTempo11 = sptF11/10.0f
                findViewById<View>(R.id.include_view11).findViewById<TextView>(R.id.padText).text = ""
                findViewById<View>(R.id.include_view11).findViewById<TextView>(R.id.padText).text = soundPoolVolume11.toString().replace("f", "") + "            " + soundPoolTempo11.toString().replace("f", "") + "\n" + padText11.replaceBeforeLast("/", "").replace("/", "").replace("tr_8", "TR-8").replace("tr_909", "TR-909").replace("_"," ").replace(".ogg", "").uppercase()
            }
            soundPool.play(sound11, soundPoolVolume11, soundPoolVolume11, 1, 0, soundPoolTempo11)
        }
            }
            false
        }
        findViewById<View>(R.id.include_view12).findViewById<ImageButton>(R.id.volume_minus).setOnTouchListener { _, event ->
            when (event.action) {
                MotionEvent.ACTION_DOWN -> {
            if (spvF12 > 1) {
                spvF12 -= 1
                soundPoolVolume12 = spvF12/10.0f
                findViewById<View>(R.id.include_view12).findViewById<TextView>(R.id.padText).text = ""
                findViewById<View>(R.id.include_view12).findViewById<TextView>(R.id.padText).text = soundPoolVolume12.toString().replace("f", "") + "            " + soundPoolTempo12.toString().replace("f", "") + "\n" + padText12.replaceBeforeLast("/", "").replace("/", "").replace("tr_8", "TR-8").replace("tr_909", "TR-909").replace("_"," ").replace(".ogg", "").uppercase()
            }
            soundPool.play(sound12, soundPoolVolume12, soundPoolVolume12, 1, 0, soundPoolTempo12)
        }
            }
            false
        }
        findViewById<View>(R.id.include_view12).findViewById<ImageButton>(R.id.volume_plus).setOnTouchListener { _, event ->
            when (event.action) {
                MotionEvent.ACTION_DOWN -> {
            if (spvF12 < 10) {
                spvF12 += 1
                soundPoolVolume12 = spvF12/10.0f
                findViewById<View>(R.id.include_view12).findViewById<TextView>(R.id.padText).text = ""
                findViewById<View>(R.id.include_view12).findViewById<TextView>(R.id.padText).text = soundPoolVolume12.toString().replace("f", "") + "            " + soundPoolTempo12.toString().replace("f", "") + "\n" + padText12.replaceBeforeLast("/", "").replace("/", "").replace("tr_8", "TR-8").replace("tr_909", "TR-909").replace("_"," ").replace(".ogg", "").uppercase()
            }
            soundPool.play(sound12, soundPoolVolume12, soundPoolVolume12, 1, 0, soundPoolTempo12)
        }
            }
            false
        }
        findViewById<View>(R.id.include_view12).findViewById<ImageButton>(R.id.tempo_minus).setOnTouchListener { _, event ->
            when (event.action) {
                MotionEvent.ACTION_DOWN -> {
            if (sptF12 > 2) {
                sptF12 -= 1
                soundPoolTempo12 = sptF12/10.0f
                findViewById<View>(R.id.include_view12).findViewById<TextView>(R.id.padText).text = ""
                findViewById<View>(R.id.include_view12).findViewById<TextView>(R.id.padText).text = soundPoolVolume12.toString().replace("f", "") + "            " + soundPoolTempo12.toString().replace("f", "") + "\n" + padText12.replaceBeforeLast("/", "").replace("/", "").replace("tr_8", "TR-8").replace("tr_909", "TR-909").replace("_"," ").replace(".ogg", "").uppercase()
            } else if (soundPoolTempo12 == 0.2f) {
                soundPoolTempo12 = 0.125f
                findViewById<View>(R.id.include_view12).findViewById<TextView>(R.id.padText).text = ""
                findViewById<View>(R.id.include_view12).findViewById<TextView>(R.id.padText).text = soundPoolVolume12.toString().replace("f", "") + "            " + soundPoolTempo12.toString().replace("f", "") + "\n" + padText12.replaceBeforeLast("/", "").replace("/", "").replace("tr_8", "TR-8").replace("tr_909", "TR-909").replace("_"," ").replace(".ogg", "").uppercase()
            }
            soundPool.play(sound12, soundPoolVolume12, soundPoolVolume12, 1, 0, soundPoolTempo12)
        }
            }
            false
        }
        findViewById<View>(R.id.include_view12).findViewById<ImageButton>(R.id.tempo_plus).setOnTouchListener { _, event ->
            when (event.action) {
                MotionEvent.ACTION_DOWN -> {
            if (soundPoolTempo12 == 0.125f) {
                soundPoolTempo12 = 0.2f
                findViewById<View>(R.id.include_view12).findViewById<TextView>(R.id.padText).text = ""
                findViewById<View>(R.id.include_view12).findViewById<TextView>(R.id.padText).text = soundPoolVolume12.toString().replace("f", "") + "            " + soundPoolTempo12.toString().replace("f", "") + "\n" + padText12.replaceBeforeLast("/", "").replace("/", "").replace("tr_8", "TR-8").replace("tr_909", "TR-909").replace("_"," ").replace(".ogg", "").uppercase()
            } else if (sptF12 < 80) {
                sptF12 += 1
                soundPoolTempo12 = sptF12/10.0f
                findViewById<View>(R.id.include_view12).findViewById<TextView>(R.id.padText).text = ""
                findViewById<View>(R.id.include_view12).findViewById<TextView>(R.id.padText).text = soundPoolVolume12.toString().replace("f", "") + "            " + soundPoolTempo12.toString().replace("f", "") + "\n" + padText12.replaceBeforeLast("/", "").replace("/", "").replace("tr_8", "TR-8").replace("tr_909", "TR-909").replace("_"," ").replace(".ogg", "").uppercase()
            }
            soundPool.play(sound12, soundPoolVolume12, soundPoolVolume12, 1, 0, soundPoolTempo12)
        }
            }
            false
        }
        findViewById<View>(R.id.include_view13).findViewById<ImageButton>(R.id.volume_minus).setOnTouchListener { _, event ->
            when (event.action) {
                MotionEvent.ACTION_DOWN -> {
            if (spvF13 > 1) {
                spvF13 -= 1
                soundPoolVolume13 = spvF13/10.0f
                findViewById<View>(R.id.tuning_sequencer5).findViewById<TextView>(R.id.volume).text = soundPoolVolume13.toString().replace("f", "")
                findViewById<View>(R.id.include_view13).findViewById<TextView>(R.id.padText).text = ""
                findViewById<View>(R.id.include_view13).findViewById<TextView>(R.id.padText).text = soundPoolVolume13.toString().replace("f", "") + "            " + soundPoolTempo13.toString().replace("f", "") + "\n" + padText13.replaceBeforeLast("/", "").replace("/", "").replace("tr_8", "TR-8").replace("tr_909", "TR-909").replace("_"," ").replace(".ogg", "").uppercase()
            }
            soundPool.play(sound13, soundPoolVolume13, soundPoolVolume13, 1, 0, soundPoolTempo13)
        }
            }
            false
        }
        findViewById<View>(R.id.include_view13).findViewById<ImageButton>(R.id.volume_plus).setOnTouchListener { _, event ->
            when (event.action) {
                MotionEvent.ACTION_DOWN -> {
            if (spvF13 < 10) {
                spvF13 += 1
                soundPoolVolume13 = spvF13/10.0f
                findViewById<View>(R.id.tuning_sequencer5).findViewById<TextView>(R.id.volume).text = soundPoolVolume13.toString().replace("f", "")
                findViewById<View>(R.id.include_view13).findViewById<TextView>(R.id.padText).text = ""
                findViewById<View>(R.id.include_view13).findViewById<TextView>(R.id.padText).text = soundPoolVolume13.toString().replace("f", "") + "            " + soundPoolTempo13.toString().replace("f", "") + "\n" + padText13.replaceBeforeLast("/", "").replace("/", "").replace("tr_8", "TR-8").replace("tr_909", "TR-909").replace("_"," ").replace(".ogg", "").uppercase()
            }
            soundPool.play(sound13, soundPoolVolume13, soundPoolVolume13, 1, 0, soundPoolTempo13)
        }
            }
            false
        }
        findViewById<View>(R.id.include_view13).findViewById<ImageButton>(R.id.tempo_minus).setOnTouchListener { _, event ->
            when (event.action) {
                MotionEvent.ACTION_DOWN -> {
            if (sptF13 > 2) {
                sptF13 -= 1
                soundPoolTempo13 = sptF13/10.0f
                findViewById<View>(R.id.tuning_sequencer5).findViewById<TextView>(R.id.tempo).text = soundPoolTempo13.toString().replace("f", "")
                findViewById<View>(R.id.include_view13).findViewById<TextView>(R.id.padText).text = ""
                findViewById<View>(R.id.include_view13).findViewById<TextView>(R.id.padText).text = soundPoolVolume13.toString().replace("f", "") + "            " + soundPoolTempo13.toString().replace("f", "") + "\n" + padText13.replaceBeforeLast("/", "").replace("/", "").replace("tr_8", "TR-8").replace("tr_909", "TR-909").replace("_"," ").replace(".ogg", "").uppercase()
            } else if (soundPoolTempo13 == 0.2f) {
                soundPoolTempo13 = 0.125f
                findViewById<View>(R.id.tuning_sequencer5).findViewById<TextView>(R.id.tempo).text = soundPoolTempo13.toString().replace("f", "")
                findViewById<View>(R.id.include_view13).findViewById<TextView>(R.id.padText).text = ""
                findViewById<View>(R.id.include_view13).findViewById<TextView>(R.id.padText).text = soundPoolVolume13.toString().replace("f", "") + "            " + soundPoolTempo13.toString().replace("f", "") + "\n" + padText13.replaceBeforeLast("/", "").replace("/", "").replace("tr_8", "TR-8").replace("tr_909", "TR-909").replace("_"," ").replace(".ogg", "").uppercase()
            }
            soundPool.play(sound13, soundPoolVolume13, soundPoolVolume13, 1, 0, soundPoolTempo13)
        }
            }
            false
        }
        findViewById<View>(R.id.include_view13).findViewById<ImageButton>(R.id.tempo_plus).setOnTouchListener { _, event ->
            when (event.action) {
                MotionEvent.ACTION_DOWN -> {
            if (soundPoolTempo13 == 0.125f) {
                soundPoolTempo13 = 0.2f
                findViewById<View>(R.id.tuning_sequencer5).findViewById<TextView>(R.id.tempo).text = soundPoolTempo13.toString().replace("f", "")
                findViewById<View>(R.id.include_view13).findViewById<TextView>(R.id.padText).text = ""
                findViewById<View>(R.id.include_view13).findViewById<TextView>(R.id.padText).text = soundPoolVolume13.toString().replace("f", "") + "            " + soundPoolTempo13.toString().replace("f", "") + "\n" + padText13.replaceBeforeLast("/", "").replace("/", "").replace("tr_8", "TR-8").replace("tr_909", "TR-909").replace("_"," ").replace(".ogg", "").uppercase()
            } else if (sptF13 < 80) {
                sptF13 += 1
                soundPoolTempo13 = sptF13/10.0f
                findViewById<View>(R.id.tuning_sequencer5).findViewById<TextView>(R.id.tempo).text = soundPoolTempo13.toString().replace("f", "")
                findViewById<View>(R.id.include_view13).findViewById<TextView>(R.id.padText).text = ""
                findViewById<View>(R.id.include_view13).findViewById<TextView>(R.id.padText).text = soundPoolVolume13.toString().replace("f", "") + "            " + soundPoolTempo13.toString().replace("f", "") + "\n" + padText13.replaceBeforeLast("/", "").replace("/", "").replace("tr_8", "TR-8").replace("tr_909", "TR-909").replace("_"," ").replace(".ogg", "").uppercase()
            }
            soundPool.play(sound13, soundPoolVolume13, soundPoolVolume13, 1, 0, soundPoolTempo13)
        }
            }
            false
        }
        findViewById<View>(R.id.include_view14).findViewById<ImageButton>(R.id.volume_minus).setOnTouchListener { _, event ->
            when (event.action) {
                MotionEvent.ACTION_DOWN -> {
            if (spvF14 > 1) {
                spvF14 -= 1
                soundPoolVolume14 = spvF14/10.0f
                findViewById<View>(R.id.include_view14).findViewById<TextView>(R.id.padText).text = ""
                findViewById<View>(R.id.include_view14).findViewById<TextView>(R.id.padText).text = soundPoolVolume14.toString().replace("f", "") + "            " + soundPoolTempo14.toString().replace("f", "") + "\n" + padText14.replaceBeforeLast("/", "").replace("/", "").replace("tr_8", "TR-8").replace("tr_909", "TR-909").replace("_"," ").replace(".ogg", "").uppercase()
            }
            soundPool.play(sound14, soundPoolVolume14, soundPoolVolume14, 1, 0, soundPoolTempo14)
        }
            }
            false
        }
        findViewById<View>(R.id.include_view14).findViewById<ImageButton>(R.id.volume_plus).setOnTouchListener { _, event ->
            when (event.action) {
                MotionEvent.ACTION_DOWN -> {
            if (spvF14 < 10) {
                spvF14 += 1
                soundPoolVolume14 = spvF14/10.0f
                findViewById<View>(R.id.include_view14).findViewById<TextView>(R.id.padText).text = ""
                findViewById<View>(R.id.include_view14).findViewById<TextView>(R.id.padText).text = soundPoolVolume14.toString().replace("f", "") + "            " + soundPoolTempo14.toString().replace("f", "") + "\n" + padText14.replaceBeforeLast("/", "").replace("/", "").replace("tr_8", "TR-8").replace("tr_909", "TR-909").replace("_"," ").replace(".ogg", "").uppercase()
            }
            soundPool.play(sound14, soundPoolVolume14, soundPoolVolume14, 1, 0, soundPoolTempo14)
        }
            }
            false
        }
        findViewById<View>(R.id.include_view14).findViewById<ImageButton>(R.id.tempo_minus).setOnTouchListener { _, event ->
            when (event.action) {
                MotionEvent.ACTION_DOWN -> {
            if (sptF14 > 2) {
                sptF14 -= 1
                soundPoolTempo14 = sptF14/10.0f
                findViewById<View>(R.id.include_view14).findViewById<TextView>(R.id.padText).text = ""
                findViewById<View>(R.id.include_view14).findViewById<TextView>(R.id.padText).text = soundPoolVolume14.toString().replace("f", "") + "            " + soundPoolTempo14.toString().replace("f", "") + "\n" + padText14.replaceBeforeLast("/", "").replace("/", "").replace("tr_8", "TR-8").replace("tr_909", "TR-909").replace("_"," ").replace(".ogg", "").uppercase()
            } else if (soundPoolTempo14 == 0.2f) {
                soundPoolTempo14 = 0.125f
                findViewById<View>(R.id.include_view14).findViewById<TextView>(R.id.padText).text = ""
                findViewById<View>(R.id.include_view14).findViewById<TextView>(R.id.padText).text = soundPoolVolume14.toString().replace("f", "") + "            " + soundPoolTempo14.toString().replace("f", "") + "\n" + padText14.replaceBeforeLast("/", "").replace("/", "").replace("tr_8", "TR-8").replace("tr_909", "TR-909").replace("_"," ").replace(".ogg", "").uppercase()
            }
            soundPool.play(sound14, soundPoolVolume14, soundPoolVolume14, 1, 0, soundPoolTempo14)
        }
            }
            false
        }
        findViewById<View>(R.id.include_view14).findViewById<ImageButton>(R.id.tempo_plus).setOnTouchListener { _, event ->
            when (event.action) {
                MotionEvent.ACTION_DOWN -> {
            if (soundPoolTempo14 == 0.125f) {
                soundPoolTempo14 = 0.2f
                findViewById<View>(R.id.include_view14).findViewById<TextView>(R.id.padText).text = ""
                findViewById<View>(R.id.include_view14).findViewById<TextView>(R.id.padText).text = soundPoolVolume14.toString().replace("f", "") + "            " + soundPoolTempo14.toString().replace("f", "") + "\n" + padText14.replaceBeforeLast("/", "").replace("/", "").replace("tr_8", "TR-8").replace("tr_909", "TR-909").replace("_"," ").replace(".ogg", "").uppercase()
            } else if (sptF14 < 80) {
                sptF14 += 1
                soundPoolTempo14 = sptF14/10.0f
                findViewById<View>(R.id.include_view14).findViewById<TextView>(R.id.padText).text = ""
                findViewById<View>(R.id.include_view14).findViewById<TextView>(R.id.padText).text = soundPoolVolume14.toString().replace("f", "") + "            " + soundPoolTempo14.toString().replace("f", "") + "\n" + padText14.replaceBeforeLast("/", "").replace("/", "").replace("tr_8", "TR-8").replace("tr_909", "TR-909").replace("_"," ").replace(".ogg", "").uppercase()
            }
            soundPool.play(sound14, soundPoolVolume14, soundPoolVolume14, 1, 0, soundPoolTempo14)
        }
            }
            false
        }
        findViewById<View>(R.id.include_view15).findViewById<ImageButton>(R.id.volume_minus).setOnTouchListener { _, event ->
            when (event.action) {
                MotionEvent.ACTION_DOWN -> {
            if (spvF15 > 1) {
                spvF15 -= 1
                soundPoolVolume15 = spvF15/10.0f
                findViewById<View>(R.id.include_view15).findViewById<TextView>(R.id.padText).text = ""
                findViewById<View>(R.id.include_view15).findViewById<TextView>(R.id.padText).text = soundPoolVolume15.toString().replace("f", "") + "            " + soundPoolTempo15.toString().replace("f", "") + "\n" + padText15.replaceBeforeLast("/", "").replace("/", "").replace("tr_8", "TR-8").replace("tr_909", "TR-909").replace("_"," ").replace(".ogg", "").uppercase()
            }
            soundPool.play(sound15, soundPoolVolume15, soundPoolVolume15, 1, 0, soundPoolTempo15)
        }
            }
            false
        }
        findViewById<View>(R.id.include_view15).findViewById<ImageButton>(R.id.volume_plus).setOnTouchListener { _, event ->
            when (event.action) {
                MotionEvent.ACTION_DOWN -> {
            if (spvF15 < 10) {
                spvF15 += 1
                soundPoolVolume15 = spvF15/10.0f
                findViewById<View>(R.id.include_view15).findViewById<TextView>(R.id.padText).text = ""
                findViewById<View>(R.id.include_view15).findViewById<TextView>(R.id.padText).text = soundPoolVolume15.toString().replace("f", "") + "            " + soundPoolTempo15.toString().replace("f", "") + "\n" + padText15.replaceBeforeLast("/", "").replace("/", "").replace("tr_8", "TR-8").replace("tr_909", "TR-909").replace("_"," ").replace(".ogg", "").uppercase()
            }
            soundPool.play(sound15, soundPoolVolume15, soundPoolVolume15, 1, 0, soundPoolTempo15)
        }
            }
            false
        }
        findViewById<View>(R.id.include_view15).findViewById<ImageButton>(R.id.tempo_minus).setOnTouchListener { _, event ->
            when (event.action) {
                MotionEvent.ACTION_DOWN -> {
            if (sptF15 > 2) {
                sptF15 -= 1
                soundPoolTempo15 = sptF15/10.0f
                findViewById<View>(R.id.include_view15).findViewById<TextView>(R.id.padText).text = ""
                findViewById<View>(R.id.include_view15).findViewById<TextView>(R.id.padText).text = soundPoolVolume15.toString().replace("f", "") + "            " + soundPoolTempo15.toString().replace("f", "") + "\n" + padText15.replaceBeforeLast("/", "").replace("/", "").replace("tr_8", "TR-8").replace("tr_909", "TR-909").replace("_"," ").replace(".ogg", "").uppercase()
            } else if (soundPoolTempo15 == 0.2f) {
                soundPoolTempo15 = 0.125f
                findViewById<View>(R.id.include_view15).findViewById<TextView>(R.id.padText).text = ""
                findViewById<View>(R.id.include_view15).findViewById<TextView>(R.id.padText).text = soundPoolVolume15.toString().replace("f", "") + "            " + soundPoolTempo15.toString().replace("f", "") + "\n" + padText15.replaceBeforeLast("/", "").replace("/", "").replace("tr_8", "TR-8").replace("tr_909", "TR-909").replace("_"," ").replace(".ogg", "").uppercase()
            }
            soundPool.play(sound15, soundPoolVolume15, soundPoolVolume15, 1, 0, soundPoolTempo15)
        }
            }
            false
        }
        findViewById<View>(R.id.include_view15).findViewById<ImageButton>(R.id.tempo_plus).setOnTouchListener { _, event ->
            when (event.action) {
                MotionEvent.ACTION_DOWN -> {
            if (soundPoolTempo15 == 0.125f) {
                soundPoolTempo15 = 0.2f
                findViewById<View>(R.id.include_view15).findViewById<TextView>(R.id.padText).text = ""
                findViewById<View>(R.id.include_view15).findViewById<TextView>(R.id.padText).text = soundPoolVolume15.toString().replace("f", "") + "            " + soundPoolTempo15.toString().replace("f", "") + "\n" + padText15.replaceBeforeLast("/", "").replace("/", "").replace("tr_8", "TR-8").replace("tr_909", "TR-909").replace("_"," ").replace(".ogg", "").uppercase()
            } else if (sptF15 < 80) {
                sptF15 += 1
                soundPoolTempo15 = sptF15/10.0f
                findViewById<View>(R.id.include_view15).findViewById<TextView>(R.id.padText).text = ""
                findViewById<View>(R.id.include_view15).findViewById<TextView>(R.id.padText).text = soundPoolVolume15.toString().replace("f", "") + "            " + soundPoolTempo15.toString().replace("f", "") + "\n" + padText15.replaceBeforeLast("/", "").replace("/", "").replace("tr_8", "TR-8").replace("tr_909", "TR-909").replace("_"," ").replace(".ogg", "").uppercase()
            }
            soundPool.play(sound15, soundPoolVolume15, soundPoolVolume15, 1, 0, soundPoolTempo15)
                }
            }
            false
        }

        findViewById<View>(R.id.tuning_sequencer).findViewById<TextView>(R.id.change_sound).setOnTouchListener { _, event ->
            when (event.action) {
                MotionEvent.ACTION_DOWN -> {
                    buttonA = 1
                    meSpinner.avoidDropdownFocus()
                    meSpinner.performClick()
                }
            }
            false
        }

        findViewById<View>(R.id.tuning_sequencer2).findViewById<TextView>(R.id.change_sound).setOnTouchListener { _, event ->
            when (event.action) {
                MotionEvent.ACTION_DOWN -> {
                    buttonA = 4
                    meSpinner.avoidDropdownFocus()
                    meSpinner.performClick()
                }
            }
            false
        }

        findViewById<View>(R.id.tuning_sequencer3).findViewById<TextView>(R.id.change_sound).setOnTouchListener { _, event ->
            when (event.action) {
                MotionEvent.ACTION_DOWN -> {
                    buttonA = 7
                    meSpinner.avoidDropdownFocus()
                    meSpinner.performClick()
                }
            }
            false
        }

        findViewById<View>(R.id.tuning_sequencer4).findViewById<TextView>(R.id.change_sound).setOnTouchListener { _, event ->
            when (event.action) {
                MotionEvent.ACTION_DOWN -> {
                    buttonA = 10
                    meSpinner.avoidDropdownFocus()
                    meSpinner.performClick()
                }
            }
            false
        }

        findViewById<View>(R.id.tuning_sequencer5).findViewById<TextView>(R.id.change_sound).setOnTouchListener { _, event ->
            when (event.action) {
                MotionEvent.ACTION_DOWN -> {
                    buttonA = 13
                    meSpinner.avoidDropdownFocus()
                    meSpinner.performClick()
                }
            }
            false
        }

        findViewById<View>(R.id.tuning_sequencer6).findViewById<TextView>(R.id.change_sound).setOnTouchListener { _, event ->
            when (event.action) {
                MotionEvent.ACTION_DOWN -> {
                    buttonA = 2
                    meSpinner.avoidDropdownFocus()
                    meSpinner.performClick()
                }
            }
            false
        }

        findViewById<View>(R.id.tuning_sequencer7).findViewById<TextView>(R.id.change_sound).setOnTouchListener { _, event ->
            when (event.action) {
                MotionEvent.ACTION_DOWN -> {
                    buttonA = 5
                    meSpinner.avoidDropdownFocus()
                    meSpinner.performClick()
                }
            }
            false
        }

        findViewById<View>(R.id.tuning_sequencer8).findViewById<TextView>(R.id.change_sound).setOnTouchListener { _, event ->
            when (event.action) {
                MotionEvent.ACTION_DOWN -> {
                    buttonA = 8
                    meSpinner.avoidDropdownFocus()
                    meSpinner.performClick()
                }
            }
            false
        }

        findViewById<View>(R.id.tuning_sequencer9).findViewById<TextView>(R.id.change_sound).setOnTouchListener { _, event ->
            when (event.action) {
                MotionEvent.ACTION_DOWN -> {
                    buttonA = 11
                    meSpinner.avoidDropdownFocus()
                    meSpinner.performClick()
                }
            }
            false
        }

        findViewById<View>(R.id.tuning_sequencer10).findViewById<TextView>(R.id.change_sound).setOnTouchListener { _, event ->
            when (event.action) {
                MotionEvent.ACTION_DOWN -> {
                    buttonA = 14
                    meSpinner.avoidDropdownFocus()
                    meSpinner.performClick()
                }
            }
            false
        }

        findViewById<View>(R.id.tuning_sequencer11).findViewById<TextView>(R.id.change_sound).setOnTouchListener { _, event ->
            when (event.action) {
                MotionEvent.ACTION_DOWN -> {
                    buttonA = 3
                    meSpinner.avoidDropdownFocus()
                    meSpinner.performClick()
                }
            }
            false
        }

        findViewById<View>(R.id.tuning_sequencer12).findViewById<TextView>(R.id.change_sound).setOnTouchListener { _, event ->
            when (event.action) {
                MotionEvent.ACTION_DOWN -> {
                    buttonA = 6
                    meSpinner.avoidDropdownFocus()
                    meSpinner.performClick()
                }
            }
            false
        }

        findViewById<View>(R.id.tuning_sequencer13).findViewById<TextView>(R.id.change_sound).setOnTouchListener { _, event ->
            when (event.action) {
                MotionEvent.ACTION_DOWN -> {
                    buttonA = 9
                    meSpinner.avoidDropdownFocus()
                    meSpinner.performClick()
                }
            }
            false
        }

        findViewById<View>(R.id.tuning_sequencer14).findViewById<TextView>(R.id.change_sound).setOnTouchListener { _, event ->
            when (event.action) {
                MotionEvent.ACTION_DOWN -> {
                    buttonA = 12
                    meSpinner.avoidDropdownFocus()
                    meSpinner.performClick()
                }
            }
            false
        }

        findViewById<View>(R.id.tuning_sequencer15).findViewById<TextView>(R.id.change_sound).setOnTouchListener { _, event ->
            when (event.action) {
                MotionEvent.ACTION_DOWN -> {
                    buttonA = 15
                    meSpinner.avoidDropdownFocus()
                    meSpinner.performClick()
                }
            }
            false
        }

        findViewById<View>(R.id.tuning_sequencer).findViewById<ImageView>(R.id.volume_minus).setOnTouchListener { _, event ->
            when (event.action) {
                MotionEvent.ACTION_DOWN -> {
                    if (spvF > 1) {
                        spvF -= 1
                        soundPoolVolume = spvF/10.0f
                        textChange(R.id.include_view, soundPoolVolume, soundPoolTempo, R.id.tuning_sequencer, padText1, R.id.volume, soundPoolVolume)
                    }
                }
            }
            false
        }
        findViewById<View>(R.id.tuning_sequencer).findViewById<ImageView>(R.id.volume_plus).setOnTouchListener { _, event ->
            when (event.action) {
                MotionEvent.ACTION_DOWN -> {
                    if (spvF < 10) {
                        spvF += 1
                        soundPoolVolume = spvF/10.0f
                        textChange(R.id.include_view, soundPoolVolume, soundPoolTempo, R.id.tuning_sequencer, padText1, R.id.volume, soundPoolVolume)
                    }
                }
            }
            false
        }
        findViewById<View>(R.id.tuning_sequencer).findViewById<ImageView>(R.id.tempo_minus).setOnTouchListener { _, event ->
            when (event.action) {
                MotionEvent.ACTION_DOWN -> {
                    if (sptF > 2) {
                        sptF -= 1
                        soundPoolTempo = sptF/10.0f
                        textChange(R.id.include_view, soundPoolVolume, soundPoolTempo, R.id.tuning_sequencer, padText1, R.id.tempo, soundPoolTempo)
                    } else if (soundPoolTempo == 0.2f) {
                        soundPoolTempo = 0.125f
                        textChange(R.id.include_view, soundPoolVolume, soundPoolTempo, R.id.tuning_sequencer, padText1, R.id.tempo, soundPoolTempo)
                    }
                }
            }
            false
        }
        findViewById<View>(R.id.tuning_sequencer).findViewById<ImageView>(R.id.tempo_plus).setOnTouchListener { _, event ->
            when (event.action) {
                MotionEvent.ACTION_DOWN -> {
                    if (soundPoolTempo == 0.125f) {
                        soundPoolTempo = 0.2f
                        textChange(R.id.include_view, soundPoolVolume, soundPoolTempo, R.id.tuning_sequencer, padText1, R.id.tempo, soundPoolTempo)
                    } else if (sptF < 80) {
                        sptF += 1
                        soundPoolTempo = sptF/10.0f
                        textChange(R.id.include_view, soundPoolVolume, soundPoolTempo, R.id.tuning_sequencer, padText1, R.id.tempo, soundPoolTempo)
                    }
                }
            }
            false
        }
        findViewById<View>(R.id.tuning_sequencer2).findViewById<ImageView>(R.id.volume_minus).setOnTouchListener { _, event ->
            when (event.action) {
                MotionEvent.ACTION_DOWN -> {
                    if (spvF4 > 1) {
                        spvF4 -= 1
                        soundPoolVolume4 = spvF4/10.0f
                        textChange(R.id.include_view4, soundPoolVolume4, soundPoolTempo4, R.id.tuning_sequencer2, padText4, R.id.volume, soundPoolVolume4)
                    }
                }
            }
            false
        }
        findViewById<View>(R.id.tuning_sequencer2).findViewById<ImageView>(R.id.volume_plus).setOnTouchListener { _, event ->
            when (event.action) {
                MotionEvent.ACTION_DOWN -> {
                    if (spvF4 < 10) {
                        spvF4 += 1
                        soundPoolVolume4 = spvF4/10.0f
                        textChange(R.id.include_view4, soundPoolVolume4, soundPoolTempo4, R.id.tuning_sequencer2, padText4, R.id.volume, soundPoolVolume4)
                    }
                }
            }
            false
        }
        findViewById<View>(R.id.tuning_sequencer2).findViewById<ImageView>(R.id.tempo_minus).setOnTouchListener { _, event ->
            when (event.action) {
                MotionEvent.ACTION_DOWN -> {
                    if (sptF4 > 2) {
                        sptF4 -= 1
                        soundPoolTempo4 = sptF4/10.0f
                        textChange(R.id.include_view4, soundPoolVolume4, soundPoolTempo4, R.id.tuning_sequencer2, padText4, R.id.tempo, soundPoolTempo4)
                    } else if (soundPoolTempo4 == 0.2f) {
                        soundPoolTempo4 = 0.125f
                        textChange(R.id.include_view4, soundPoolVolume4, soundPoolTempo4, R.id.tuning_sequencer2, padText4, R.id.tempo, soundPoolTempo4)
                    }
                }
            }
            false
        }
        findViewById<View>(R.id.tuning_sequencer2).findViewById<ImageView>(R.id.tempo_plus).setOnTouchListener { _, event ->
            when (event.action) {
                MotionEvent.ACTION_DOWN -> {
                    if (soundPoolTempo4 == 0.125f) {
                        soundPoolTempo4 = 0.2f
                        textChange(R.id.include_view4, soundPoolVolume4, soundPoolTempo4, R.id.tuning_sequencer2, padText4, R.id.tempo, soundPoolTempo4)
                    } else if (sptF4 < 80) {
                        sptF4 += 1
                        soundPoolTempo4 = sptF4/10.0f
                        textChange(R.id.include_view4, soundPoolVolume4, soundPoolTempo4, R.id.tuning_sequencer2, padText4, R.id.tempo, soundPoolTempo4)
                    }
                }
            }
            false
        }
        findViewById<View>(R.id.tuning_sequencer3).findViewById<ImageView>(R.id.volume_minus).setOnTouchListener { _, event ->
            when (event.action) {
                MotionEvent.ACTION_DOWN -> {
                    if (spvF7 > 1) {
                        spvF7 -= 1
                        soundPoolVolume7 = spvF7/10.0f
                        textChange(R.id.include_view7, soundPoolVolume7, soundPoolTempo7, R.id.tuning_sequencer3, padText7, R.id.volume, soundPoolVolume7)
                    }
                }
            }
            false
        }
        findViewById<View>(R.id.tuning_sequencer3).findViewById<ImageView>(R.id.volume_plus).setOnTouchListener { _, event ->
            when (event.action) {
                MotionEvent.ACTION_DOWN -> {
                    if (spvF7 < 10) {
                        spvF7 += 1
                        soundPoolVolume7 = spvF7/10.0f
                        textChange(R.id.include_view7, soundPoolVolume7, soundPoolTempo7, R.id.tuning_sequencer3, padText7, R.id.volume, soundPoolVolume7)
                    }
                }
            }
            false
        }
        findViewById<View>(R.id.tuning_sequencer3).findViewById<ImageView>(R.id.tempo_minus).setOnTouchListener { _, event ->
            when (event.action) {
                MotionEvent.ACTION_DOWN -> {
                    if (sptF7 > 2) {
                        sptF7 -= 1
                        soundPoolTempo7 = sptF7/10.0f
                        textChange(R.id.include_view7, soundPoolVolume7, soundPoolTempo7, R.id.tuning_sequencer3, padText7, R.id.tempo, soundPoolTempo7)
                    } else if (soundPoolTempo7 == 0.2f) {
                        soundPoolTempo7 = 0.125f
                        textChange(R.id.include_view7, soundPoolVolume7, soundPoolTempo7, R.id.tuning_sequencer3, padText7, R.id.tempo, soundPoolTempo7)
                    }
                }
            }
            false
        }
        findViewById<View>(R.id.tuning_sequencer3).findViewById<ImageView>(R.id.tempo_plus).setOnTouchListener { _, event ->
            when (event.action) {
                MotionEvent.ACTION_DOWN -> {
                    if (soundPoolTempo7 == 0.125f) {
                        soundPoolTempo7 = 0.2f
                        textChange(R.id.include_view7, soundPoolVolume7, soundPoolTempo7, R.id.tuning_sequencer3, padText7, R.id.tempo, soundPoolTempo7)
                    } else if (sptF7 < 80) {
                        sptF7 += 1
                        soundPoolTempo7 = sptF7/10.0f
                        textChange(R.id.include_view7, soundPoolVolume7, soundPoolTempo7, R.id.tuning_sequencer3, padText7, R.id.tempo, soundPoolTempo7)
                    }
                }
            }
            false
        }
        findViewById<View>(R.id.tuning_sequencer4).findViewById<ImageView>(R.id.volume_minus).setOnTouchListener { _, event ->
            when (event.action) {
                MotionEvent.ACTION_DOWN -> {
                    if (spvF10 > 1) {
                        spvF10 -= 1
                        soundPoolVolume10 = spvF10/10.0f
                        textChange(R.id.include_view10, soundPoolVolume10, soundPoolTempo10, R.id.tuning_sequencer4, padText10, R.id.volume, soundPoolVolume10)
                    }
                }
            }
            false
        }
        findViewById<View>(R.id.tuning_sequencer4).findViewById<ImageView>(R.id.volume_plus).setOnTouchListener { _, event ->
            when (event.action) {
                MotionEvent.ACTION_DOWN -> {
                    if (spvF10 < 10) {
                        spvF10 += 1
                        soundPoolVolume10 = spvF10/10.0f
                        textChange(R.id.include_view10, soundPoolVolume10, soundPoolTempo10, R.id.tuning_sequencer4, padText10, R.id.volume, soundPoolVolume10)
                    }
                }
            }
            false
        }
        findViewById<View>(R.id.tuning_sequencer4).findViewById<ImageView>(R.id.tempo_minus).setOnTouchListener { _, event ->
            when (event.action) {
                MotionEvent.ACTION_DOWN -> {
                    if (sptF10 > 2) {
                        sptF10 -= 1
                        soundPoolTempo10 = sptF10/10.0f
                        textChange(R.id.include_view10, soundPoolVolume10, soundPoolTempo10, R.id.tuning_sequencer4, padText10, R.id.tempo, soundPoolTempo10)
                    } else if (soundPoolTempo10 == 0.2f) {
                        soundPoolTempo10 = 0.125f
                        textChange(R.id.include_view10, soundPoolVolume10, soundPoolTempo10, R.id.tuning_sequencer4, padText10, R.id.tempo, soundPoolTempo10)
                    }
                }
            }
            false
        }
        findViewById<View>(R.id.tuning_sequencer4).findViewById<ImageView>(R.id.tempo_plus).setOnTouchListener { _, event ->
            when (event.action) {
                MotionEvent.ACTION_DOWN -> {
                    if (soundPoolTempo10 == 0.125f) {
                        soundPoolTempo10 = 0.2f
                        textChange(R.id.include_view10, soundPoolVolume10, soundPoolTempo10, R.id.tuning_sequencer4, padText10, R.id.tempo, soundPoolTempo10)
                    } else if (sptF10 < 80) {
                        sptF10 += 1
                        soundPoolTempo10 = sptF10/10.0f
                        textChange(R.id.include_view10, soundPoolVolume10, soundPoolTempo10, R.id.tuning_sequencer4, padText10, R.id.tempo, soundPoolTempo10)
                    }
                }
            }
            false
        }
        findViewById<View>(R.id.tuning_sequencer5).findViewById<ImageView>(R.id.volume_minus).setOnTouchListener { _, event ->
            when (event.action) {
                MotionEvent.ACTION_DOWN -> {
                    if (spvF13 > 1) {
                        spvF13 -= 1
                        soundPoolVolume13 = spvF13/10.0f
                        textChange(R.id.include_view13, soundPoolVolume13, soundPoolTempo13, R.id.tuning_sequencer5, padText13, R.id.volume, soundPoolVolume13)
                    }
                }
            }
            false
        }
        findViewById<View>(R.id.tuning_sequencer5).findViewById<ImageView>(R.id.volume_plus).setOnTouchListener { _, event ->
            when (event.action) {
                MotionEvent.ACTION_DOWN -> {
                    if (spvF13 < 10) {
                        spvF13 += 1
                        soundPoolVolume13 = spvF13/10.0f
                        textChange(R.id.include_view13, soundPoolVolume13, soundPoolTempo13, R.id.tuning_sequencer5, padText13, R.id.volume, soundPoolVolume13)
                    }
                }
            }
            false
        }
        findViewById<View>(R.id.tuning_sequencer5).findViewById<ImageView>(R.id.tempo_minus).setOnTouchListener { _, event ->
            when (event.action) {
                MotionEvent.ACTION_DOWN -> {
                    if (sptF13 > 2) {
                        sptF13 -= 1
                        soundPoolTempo13 = sptF13/10.0f
                        textChange(R.id.include_view13, soundPoolVolume13, soundPoolTempo13, R.id.tuning_sequencer5, padText13, R.id.tempo, soundPoolTempo13)
                    } else if (soundPoolTempo13 == 0.2f) {
                        soundPoolTempo13 = 0.125f
                        textChange(R.id.include_view13, soundPoolVolume13, soundPoolTempo13, R.id.tuning_sequencer5, padText13, R.id.tempo, soundPoolTempo13)
                    }
                }
            }
            false
        }
        findViewById<View>(R.id.tuning_sequencer5).findViewById<ImageView>(R.id.tempo_plus).setOnTouchListener { _, event ->
            when (event.action) {
                MotionEvent.ACTION_DOWN -> {
                    if (soundPoolTempo13 == 0.125f) {
                        soundPoolTempo13 = 0.2f
                        textChange(R.id.include_view13, soundPoolVolume13, soundPoolTempo13, R.id.tuning_sequencer5, padText13, R.id.tempo, soundPoolTempo13)
                    } else if (sptF13 < 80) {
                        sptF13 += 1
                        soundPoolTempo13 = sptF13/10.0f
                        textChange(R.id.include_view13, soundPoolVolume13, soundPoolTempo13, R.id.tuning_sequencer5, padText13, R.id.tempo, soundPoolTempo13)
                    }
                }
            }
            false
        }

        findViewById<View>(R.id.accent_reset).findViewById<TextView>(R.id.accent).setOnTouchListener { _, event ->
            when (event.action) {
                MotionEvent.ACTION_DOWN -> {
                    soundPoolVolume = 1.0f
                    soundPoolVolume2 = 1.0f
                    soundPoolVolume3 = 1.0f
                    soundPoolVolume4 = 1.0f
                    soundPoolVolume5 = 1.0f
                    soundPoolVolume6 = 1.0f
                    soundPoolVolume7 = 1.0f
                    soundPoolVolume8 = 1.0f
                    soundPoolVolume9 = 1.0f
                    soundPoolVolume10 = 1.0f
                    soundPoolVolume11 = 1.0f
                    soundPoolVolume12 = 1.0f
                    soundPoolVolume13 = 1.0f
                    soundPoolVolume14 = 1.0f
                    soundPoolVolume15 = 1.0f
                    spvF = 10
                    spvF2 = 10
                    spvF3 = 10
                    spvF4 = 10
                    spvF5 = 10
                    spvF6 = 10
                    spvF7 = 10
                    spvF8 = 10
                    spvF9 = 10
                    spvF10 = 10
                    spvF11 = 10
                    spvF12 = 10
                    spvF13 = 10
                    spvF14 = 10
                    spvF15 = 10
                    pasteText()
                }
            }
            false
        }

        findViewById<View>(R.id.accent_reset).findViewById<TextView>(R.id.reset).setOnTouchListener { _, event ->
            when (event.action) {
                MotionEvent.ACTION_DOWN -> {
                    soundPoolVolume = 0.5f
                    soundPoolTempo = 1.0f
                    soundPoolVolume2 = 0.5f
                    soundPoolTempo2 = 1.0f
                    soundPoolVolume3 = 0.5f
                    soundPoolTempo3 = 1.0f
                    soundPoolVolume4 = 0.5f
                    soundPoolTempo4 = 1.0f
                    soundPoolVolume5 = 0.5f
                    soundPoolTempo5 = 1.0f
                    soundPoolVolume6 = 0.5f
                    soundPoolTempo6 = 1.0f
                    soundPoolVolume7 = 0.5f
                    soundPoolTempo7 = 1.0f
                    soundPoolVolume8 = 0.5f
                    soundPoolTempo8 = 1.0f
                    soundPoolVolume9 = 0.5f
                    soundPoolTempo9 = 1.0f
                    soundPoolVolume10 = 0.5f
                    soundPoolTempo10 = 1.0f
                    soundPoolVolume11 = 0.5f
                    soundPoolTempo11 = 1.0f
                    soundPoolVolume12 = 0.5f
                    soundPoolTempo12 = 1.0f
                    soundPoolVolume13 = 0.5f
                    soundPoolTempo13 = 1.0f
                    soundPoolVolume14 = 0.5f
                    soundPoolTempo14 = 1.0f
                    soundPoolVolume15 = 0.5f
                    soundPoolTempo15 = 1.0f
                    spvF = 5
                    sptF = 10
                    spvF2 = 5
                    sptF2 = 10
                    spvF3 = 5
                    sptF3 = 10
                    spvF4 = 5
                    sptF4 = 10
                    spvF5 = 5
                    sptF5 = 10
                    spvF6 = 5
                    sptF6 = 10
                    spvF7 = 5
                    sptF7 = 10
                    spvF8 = 5
                    sptF8 = 10
                    spvF9 = 5
                    sptF9 = 10
                    spvF10 = 5
                    sptF10 = 10
                    spvF11 = 5
                    sptF11 = 10
                    spvF12 = 5
                    sptF12 = 10
                    spvF13 = 5
                    sptF13 = 10
                    spvF14 = 5
                    sptF14 = 10
                    spvF15 = 5
                    sptF15 = 10
                    pasteText()
                }
            }
            false
        }

        findViewById<View>(R.id.accent_reset).findViewById<TextView>(R.id.sound_random).setOnTouchListener { _, event ->
            when (event.action) {
                MotionEvent.ACTION_DOWN -> {
                    soundRandom()
                }
            }
            false
        }

        findViewById<View>(R.id.accent_reset).findViewById<TextView>(R.id.pitch_random).setOnTouchListener { _, event ->
            when (event.action) {
                MotionEvent.ACTION_DOWN -> {
                    sptF = pitchArray.random()
                    sptF2 = pitchArray.random()
                    sptF3 = pitchArray.random()
                    sptF4 = pitchArray.random()
                    sptF5 = pitchArray.random()
                    sptF6 = pitchArray.random()
                    sptF7 = pitchArray.random()
                    sptF8 = pitchArray.random()
                    sptF9 = pitchArray.random()
                    sptF10 = pitchArray.random()
                    sptF11 = pitchArray.random()
                    sptF12 = pitchArray.random()
                    sptF13 = pitchArray.random()
                    sptF14 = pitchArray.random()
                    sptF15 = pitchArray.random()
                    spvF = volumeArray.random()
                    spvF2 = volumeArray.random()
                    spvF3 = volumeArray.random()
                    spvF4 = volumeArray.random()
                    spvF5 = volumeArray.random()
                    spvF6 = volumeArray.random()
                    spvF7 = volumeArray.random()
                    spvF8 = volumeArray.random()
                    spvF9 = volumeArray.random()
                    spvF10 = volumeArray.random()
                    spvF11 = volumeArray.random()
                    spvF12 = volumeArray.random()
                    spvF13 = volumeArray.random()
                    spvF14 = volumeArray.random()
                    spvF15 = volumeArray.random()
                    soundPoolVolume = spvF/10.0f
                    soundPoolVolume2 = spvF2/10.0f
                    soundPoolVolume3 = spvF3/10.0f
                    soundPoolVolume4 = spvF4/10.0f
                    soundPoolVolume5 = spvF5/10.0f
                    soundPoolVolume6 = spvF6/10.0f
                    soundPoolVolume7 = spvF7/10.0f
                    soundPoolVolume8 = spvF8/10.0f
                    soundPoolVolume9 = spvF9/10.0f
                    soundPoolVolume10 = spvF10/10.0f
                    soundPoolVolume11 = spvF11/10.0f
                    soundPoolVolume12 = spvF12/10.0f
                    soundPoolVolume13 = spvF13/10.0f
                    soundPoolVolume14 = spvF14/10.0f
                    soundPoolVolume15 = spvF15/10.0f
                    soundPoolTempo = sptF/10.0f
                    soundPoolTempo2 = sptF2/10.0f
                    soundPoolTempo3 = sptF3/10.0f
                    soundPoolTempo4 = sptF4/10.0f
                    soundPoolTempo5 = sptF5/10.0f
                    soundPoolTempo6 = sptF6/10.0f
                    soundPoolTempo7 = sptF7/10.0f
                    soundPoolTempo8 = sptF8/10.0f
                    soundPoolTempo9 = sptF9/10.0f
                    soundPoolTempo10 = sptF10/10.0f
                    soundPoolTempo11 = sptF11/10.0f
                    soundPoolTempo12 = sptF12/10.0f
                    soundPoolTempo13 = sptF13/10.0f
                    soundPoolTempo14 = sptF14/10.0f
                    soundPoolTempo15 = sptF15/10.0f
                    pasteText()
                }
            }
            false
        }

        findViewById<View>(R.id.accent_reset).findViewById<TextView>(R.id.save).setOnTouchListener { _, event ->
            when (event.action) {
                MotionEvent.ACTION_DOWN -> {
                    val builder = AlertDialog.Builder(this, R.style.AppCompatAlertDialogStyle)
                    val inflater = layoutInflater
                    val dialogView = inflater.inflate(R.layout.save_load, null)

                    if (mRealm.where(SaveSlot::class.java).equalTo("id", "1").findFirst()?.actionTitleR != null) {
                        dialogView.findViewById<TextView>(R.id.slot1).text = (mRealm.where(SaveSlot::class.java).equalTo("id", "1").findFirst()?.actionTitleR.toString())
                    }
                    if (mRealm.where(SaveSlot::class.java).equalTo("id", "2").findFirst()?.actionTitleR != null) {
                        dialogView.findViewById<TextView>(R.id.slot2).text = (mRealm.where(SaveSlot::class.java).equalTo("id", "2").findFirst()?.actionTitleR.toString())
                    }
                    if (mRealm.where(SaveSlot::class.java).equalTo("id", "3").findFirst()?.actionTitleR != null) {
                        dialogView.findViewById<TextView>(R.id.slot3).text = (mRealm.where(SaveSlot::class.java).equalTo("id", "3").findFirst()?.actionTitleR.toString())
                    }
                    if (mRealm.where(SaveSlot::class.java).equalTo("id", "4").findFirst()?.actionTitleR != null) {
                        dialogView.findViewById<TextView>(R.id.slot4).text = (mRealm.where(SaveSlot::class.java).equalTo("id", "4").findFirst()?.actionTitleR.toString())
                    }
                    if (mRealm.where(SaveSlot::class.java).equalTo("id", "5").findFirst()?.actionTitleR != null) {
                        dialogView.findViewById<TextView>(R.id.slot5).text = (mRealm.where(SaveSlot::class.java).equalTo("id", "5").findFirst()?.actionTitleR.toString())
                    }
                    if (mRealm.where(SaveSlot::class.java).equalTo("id", "6").findFirst()?.actionTitleR != null) {
                        dialogView.findViewById<TextView>(R.id.slot6).text = (mRealm.where(SaveSlot::class.java).equalTo("id", "6").findFirst()?.actionTitleR.toString())
                    }
                    if (mRealm.where(SaveSlot::class.java).equalTo("id", "7").findFirst()?.actionTitleR != null) {
                        dialogView.findViewById<TextView>(R.id.slot7).text = (mRealm.where(SaveSlot::class.java).equalTo("id", "7").findFirst()?.actionTitleR.toString())
                    }
                    if (mRealm.where(SaveSlot::class.java).equalTo("id", "8").findFirst()?.actionTitleR != null) {
                        dialogView.findViewById<TextView>(R.id.slot8).text = (mRealm.where(SaveSlot::class.java).equalTo("id", "8").findFirst()?.actionTitleR.toString())
                    }

                    builder.setView(dialogView)
                        .setOnCancelListener {
                            stickyImmersiveMode()
                        }
                        .setTitle(R.string.save)
                        .setNegativeButton("CANCEL") { _, _ ->
                            stickyImmersiveMode()
                        }
                    val dialog = builder.create()
                    dialog.show()

                    dialogView.findViewById<TextView>(R.id.slot1).setOnClickListener {
                        dialog.cancel()
                        if (mRealm.where(SaveSlot::class.java).equalTo("id", "1").findFirst()?.pad == null) {
                            create("1")
                            window.addFlags(WindowManager.LayoutParams.FLAG_NOT_TOUCHABLE)
                            val snackBar = Snackbar.make(findViewById(R.id.snack_space) , R.string.Saved, Snackbar.LENGTH_LONG)
                            val snackTextView: TextView = snackBar.view.findViewById(R.id.snackbar_text)
                            snackTextView.textAlignment = TextView.TEXT_ALIGNMENT_CENTER
                            snackBar.setDuration(2000).show()
                            handler.postDelayed({
                                window.clearFlags(WindowManager.LayoutParams.FLAG_NOT_TOUCHABLE)
                                val manager = ReviewManagerFactory.create(this)
                                val request = manager.requestReviewFlow()
                                request.addOnCompleteListener { task: Task<ReviewInfo?> ->
                                    when {
                                        task.isSuccessful -> {
                                            val reviewInfo = task.result
                                            val flow = manager.launchReviewFlow(this, reviewInfo)
                                            flow.addOnCompleteListener {
                                                stickyImmersiveMode()
                                            }
                                        }
                                        else -> {
                                            stickyImmersiveMode()
                                        }
                                    }
                                }
                            }, 2000)
                        } else {
                            update("1")
                            window.addFlags(WindowManager.LayoutParams.FLAG_NOT_TOUCHABLE)
                            val snackBar = Snackbar.make(findViewById(R.id.snack_space) , R.string.Saved, Snackbar.LENGTH_LONG)
                            val snackTextView: TextView = snackBar.view.findViewById(R.id.snackbar_text)
                            snackTextView.textAlignment = TextView.TEXT_ALIGNMENT_CENTER
                            snackBar.setDuration(2000).show()
                            handler.postDelayed({
                                window.clearFlags(WindowManager.LayoutParams.FLAG_NOT_TOUCHABLE)
                            }, 2000)
                        }
                    }

                    dialogView.findViewById<TextView>(R.id.slot2).setOnClickListener {
                        dialog.cancel()
                        if (mRealm.where(SaveSlot::class.java).equalTo("id", "2").findFirst()?.pad == null) {
                            create("2")
                            window.addFlags(WindowManager.LayoutParams.FLAG_NOT_TOUCHABLE)
                            val snackBar = Snackbar.make(findViewById(R.id.snack_space) , R.string.Saved, Snackbar.LENGTH_LONG)
                            val snackTextView: TextView = snackBar.view.findViewById(R.id.snackbar_text)
                            snackTextView.textAlignment = TextView.TEXT_ALIGNMENT_CENTER
                            snackBar.setDuration(2000).show()
                            handler.postDelayed({
                                window.clearFlags(WindowManager.LayoutParams.FLAG_NOT_TOUCHABLE)
                            }, 2000)
                        } else {
                            update("2")
                            window.addFlags(WindowManager.LayoutParams.FLAG_NOT_TOUCHABLE)
                            val snackBar = Snackbar.make(findViewById(R.id.snack_space) , R.string.Saved, Snackbar.LENGTH_LONG)
                            val snackTextView: TextView = snackBar.view.findViewById(R.id.snackbar_text)
                            snackTextView.textAlignment = TextView.TEXT_ALIGNMENT_CENTER
                            snackBar.setDuration(2000).show()
                            handler.postDelayed({
                                window.clearFlags(WindowManager.LayoutParams.FLAG_NOT_TOUCHABLE)
                            }, 2000)
                        }
                    }

                    dialogView.findViewById<TextView>(R.id.slot3).setOnClickListener {
                        dialog.cancel()
                        if (mRealm.where(SaveSlot::class.java).equalTo("id", "3").findFirst()?.pad == null) {
                            create("3")
                            window.addFlags(WindowManager.LayoutParams.FLAG_NOT_TOUCHABLE)
                            val snackBar = Snackbar.make(findViewById(R.id.snack_space) , R.string.Saved, Snackbar.LENGTH_LONG)
                            val snackTextView: TextView = snackBar.view.findViewById(R.id.snackbar_text)
                            snackTextView.textAlignment = TextView.TEXT_ALIGNMENT_CENTER
                            snackBar.setDuration(2000).show()
                            handler.postDelayed({
                                window.clearFlags(WindowManager.LayoutParams.FLAG_NOT_TOUCHABLE)
                                val manager = ReviewManagerFactory.create(this)
                                val request = manager.requestReviewFlow()
                                request.addOnCompleteListener { task: Task<ReviewInfo?> ->
                                    when {
                                        task.isSuccessful -> {
                                            val reviewInfo = task.result
                                            val flow = manager.launchReviewFlow(this, reviewInfo)
                                            flow.addOnCompleteListener {
                                                stickyImmersiveMode()
                                            }
                                        }
                                        else -> {
                                            stickyImmersiveMode()
                                        }
                                    }
                                }
                            }, 2000)
                        } else {
                            update("3")
                            window.addFlags(WindowManager.LayoutParams.FLAG_NOT_TOUCHABLE)
                            val snackBar = Snackbar.make(findViewById(R.id.snack_space) , R.string.Saved, Snackbar.LENGTH_LONG)
                            val snackTextView: TextView = snackBar.view.findViewById(R.id.snackbar_text)
                            snackTextView.textAlignment = TextView.TEXT_ALIGNMENT_CENTER
                            snackBar.setDuration(2000).show()
                            handler.postDelayed({
                                window.clearFlags(WindowManager.LayoutParams.FLAG_NOT_TOUCHABLE)
                            }, 2000)
                        }
                    }

                    dialogView.findViewById<TextView>(R.id.slot4).setOnClickListener {
                        dialog.cancel()
                        if (mRealm.where(SaveSlot::class.java).equalTo("id", "4").findFirst()?.pad == null) {
                            create("4")
                            window.addFlags(WindowManager.LayoutParams.FLAG_NOT_TOUCHABLE)
                            val snackBar = Snackbar.make(findViewById(R.id.snack_space) , R.string.Saved, Snackbar.LENGTH_LONG)
                            val snackTextView: TextView = snackBar.view.findViewById(R.id.snackbar_text)
                            snackTextView.textAlignment = TextView.TEXT_ALIGNMENT_CENTER
                            snackBar.setDuration(2000).show()
                            handler.postDelayed({
                                window.clearFlags(WindowManager.LayoutParams.FLAG_NOT_TOUCHABLE)
                            }, 2000)
                        } else {
                            update("4")
                            window.addFlags(WindowManager.LayoutParams.FLAG_NOT_TOUCHABLE)
                            val snackBar = Snackbar.make(findViewById(R.id.snack_space) , R.string.Saved, Snackbar.LENGTH_LONG)
                            val snackTextView: TextView = snackBar.view.findViewById(R.id.snackbar_text)
                            snackTextView.textAlignment = TextView.TEXT_ALIGNMENT_CENTER
                            snackBar.setDuration(2000).show()
                            handler.postDelayed({
                                window.clearFlags(WindowManager.LayoutParams.FLAG_NOT_TOUCHABLE)
                            }, 2000)
                        }
                    }

                    dialogView.findViewById<TextView>(R.id.slot5).setOnClickListener {
                        dialog.cancel()
                        if (mRealm.where(SaveSlot::class.java).equalTo("id", "5").findFirst()?.pad == null) {
                            create("5")
                            window.addFlags(WindowManager.LayoutParams.FLAG_NOT_TOUCHABLE)
                            val snackBar = Snackbar.make(findViewById(R.id.snack_space) , R.string.Saved, Snackbar.LENGTH_LONG)
                            val snackTextView: TextView = snackBar.view.findViewById(R.id.snackbar_text)
                            snackTextView.textAlignment = TextView.TEXT_ALIGNMENT_CENTER
                            snackBar.setDuration(2000).show()
                            handler.postDelayed({
                                window.clearFlags(WindowManager.LayoutParams.FLAG_NOT_TOUCHABLE)
                                val manager = ReviewManagerFactory.create(this)
                                val request = manager.requestReviewFlow()
                                request.addOnCompleteListener { task: Task<ReviewInfo?> ->
                                    when {
                                        task.isSuccessful -> {
                                            val reviewInfo = task.result
                                            val flow = manager.launchReviewFlow(this, reviewInfo)
                                            flow.addOnCompleteListener {
                                                stickyImmersiveMode()
                                            }
                                        }
                                        else -> {
                                            stickyImmersiveMode()
                                        }
                                    }
                                }
                            }, 2000)
                        } else {
                            update("5")
                            window.addFlags(WindowManager.LayoutParams.FLAG_NOT_TOUCHABLE)
                            val snackBar = Snackbar.make(findViewById(R.id.snack_space) , R.string.Saved, Snackbar.LENGTH_LONG)
                            val snackTextView: TextView = snackBar.view.findViewById(R.id.snackbar_text)
                            snackTextView.textAlignment = TextView.TEXT_ALIGNMENT_CENTER
                            snackBar.setDuration(2000).show()
                            handler.postDelayed({
                                window.clearFlags(WindowManager.LayoutParams.FLAG_NOT_TOUCHABLE)
                            }, 2000)
                        }
                    }

                    dialogView.findViewById<TextView>(R.id.slot6).setOnClickListener {
                        dialog.cancel()
                        if (mRealm.where(SaveSlot::class.java).equalTo("id", "6").findFirst()?.pad == null) {
                            create("6")
                            window.addFlags(WindowManager.LayoutParams.FLAG_NOT_TOUCHABLE)
                            val snackBar = Snackbar.make(findViewById(R.id.snack_space) , R.string.Saved, Snackbar.LENGTH_LONG)
                            val snackTextView: TextView = snackBar.view.findViewById(R.id.snackbar_text)
                            snackTextView.textAlignment = TextView.TEXT_ALIGNMENT_CENTER
                            snackBar.setDuration(2000).show()
                            handler.postDelayed({
                                window.clearFlags(WindowManager.LayoutParams.FLAG_NOT_TOUCHABLE)
                            }, 2000)
                        } else {
                            update("6")
                            window.addFlags(WindowManager.LayoutParams.FLAG_NOT_TOUCHABLE)
                            val snackBar = Snackbar.make(findViewById(R.id.snack_space) , R.string.Saved, Snackbar.LENGTH_LONG)
                            val snackTextView: TextView = snackBar.view.findViewById(R.id.snackbar_text)
                            snackTextView.textAlignment = TextView.TEXT_ALIGNMENT_CENTER
                            snackBar.setDuration(2000).show()
                            handler.postDelayed({
                                window.clearFlags(WindowManager.LayoutParams.FLAG_NOT_TOUCHABLE)
                            }, 2000)
                        }
                    }

                    dialogView.findViewById<TextView>(R.id.slot7).setOnClickListener {
                        dialog.cancel()
                        if (mRealm.where(SaveSlot::class.java).equalTo("id", "7").findFirst()?.pad == null) {
                            create("7")
                            window.addFlags(WindowManager.LayoutParams.FLAG_NOT_TOUCHABLE)
                            val snackBar = Snackbar.make(findViewById(R.id.snack_space) , R.string.Saved, Snackbar.LENGTH_LONG)
                            val snackTextView: TextView = snackBar.view.findViewById(R.id.snackbar_text)
                            snackTextView.textAlignment = TextView.TEXT_ALIGNMENT_CENTER
                            snackBar.setDuration(2000).show()
                            handler.postDelayed({
                                window.clearFlags(WindowManager.LayoutParams.FLAG_NOT_TOUCHABLE)
                            }, 2000)
                        } else {
                            update("7")
                            window.addFlags(WindowManager.LayoutParams.FLAG_NOT_TOUCHABLE)
                            val snackBar = Snackbar.make(findViewById(R.id.snack_space) , R.string.Saved, Snackbar.LENGTH_LONG)
                            val snackTextView: TextView = snackBar.view.findViewById(R.id.snackbar_text)
                            snackTextView.textAlignment = TextView.TEXT_ALIGNMENT_CENTER
                            snackBar.setDuration(2000).show()
                            handler.postDelayed({
                                window.clearFlags(WindowManager.LayoutParams.FLAG_NOT_TOUCHABLE)
                            }, 2000)
                        }
                    }

                    dialogView.findViewById<TextView>(R.id.slot8).setOnClickListener {
                        dialog.cancel()
                        if (mRealm.where(SaveSlot::class.java).equalTo("id", "8").findFirst()?.pad == null) {
                            create("8")
                            window.addFlags(WindowManager.LayoutParams.FLAG_NOT_TOUCHABLE)
                            val snackBar = Snackbar.make(findViewById(R.id.snack_space) , R.string.Saved, Snackbar.LENGTH_LONG)
                            val snackTextView: TextView = snackBar.view.findViewById(R.id.snackbar_text)
                            snackTextView.textAlignment = TextView.TEXT_ALIGNMENT_CENTER
                            snackBar.setDuration(2000).show()
                            handler.postDelayed({
                                window.clearFlags(WindowManager.LayoutParams.FLAG_NOT_TOUCHABLE)
                                val manager = ReviewManagerFactory.create(this)
                                val request = manager.requestReviewFlow()
                                request.addOnCompleteListener { task: Task<ReviewInfo?> ->
                                    when {
                                        task.isSuccessful -> {
                                            val reviewInfo = task.result
                                            val flow = manager.launchReviewFlow(this, reviewInfo)
                                            flow.addOnCompleteListener {
                                                stickyImmersiveMode()
                                            }
                                        }
                                        else -> {
                                            stickyImmersiveMode()
                                        }
                                    }
                                }
                            }, 2000)
                        } else {
                            update("8")
                            window.addFlags(WindowManager.LayoutParams.FLAG_NOT_TOUCHABLE)
                            val snackBar = Snackbar.make(findViewById(R.id.snack_space) , R.string.Saved, Snackbar.LENGTH_LONG)
                            val snackTextView: TextView = snackBar.view.findViewById(R.id.snackbar_text)
                            snackTextView.textAlignment = TextView.TEXT_ALIGNMENT_CENTER
                            snackBar.setDuration(2000).show()
                            handler.postDelayed({
                                window.clearFlags(WindowManager.LayoutParams.FLAG_NOT_TOUCHABLE)
                            }, 2000)
                        }
                    }
                }
            }
            false
        }

        findViewById<View>(R.id.accent_reset).findViewById<TextView>(R.id.load).setOnTouchListener { _, event ->
            when (event.action) {
                MotionEvent.ACTION_DOWN -> {
                    val builder = AlertDialog.Builder(this, R.style.AppCompatAlertDialogStyle)
                    val inflater = layoutInflater
                    val dialogView = inflater.inflate(R.layout.save_load, null)

                    if (mRealm.where(SaveSlot::class.java).equalTo("id", "1").findFirst()?.actionTitleR != null) {
                        dialogView.findViewById<TextView>(R.id.slot1).text = (mRealm.where(SaveSlot::class.java).equalTo("id", "1").findFirst()?.actionTitleR.toString())
                    }
                    if (mRealm.where(SaveSlot::class.java).equalTo("id", "2").findFirst()?.actionTitleR != null) {
                        dialogView.findViewById<TextView>(R.id.slot2).text = (mRealm.where(SaveSlot::class.java).equalTo("id", "2").findFirst()?.actionTitleR.toString())
                    }
                    if (mRealm.where(SaveSlot::class.java).equalTo("id", "3").findFirst()?.actionTitleR != null) {
                        dialogView.findViewById<TextView>(R.id.slot3).text = (mRealm.where(SaveSlot::class.java).equalTo("id", "3").findFirst()?.actionTitleR.toString())
                    }
                    if (mRealm.where(SaveSlot::class.java).equalTo("id", "4").findFirst()?.actionTitleR != null) {
                        dialogView.findViewById<TextView>(R.id.slot4).text = (mRealm.where(SaveSlot::class.java).equalTo("id", "4").findFirst()?.actionTitleR.toString())
                    }
                    if (mRealm.where(SaveSlot::class.java).equalTo("id", "5").findFirst()?.actionTitleR != null) {
                        dialogView.findViewById<TextView>(R.id.slot5).text = (mRealm.where(SaveSlot::class.java).equalTo("id", "5").findFirst()?.actionTitleR.toString())
                    }
                    if (mRealm.where(SaveSlot::class.java).equalTo("id", "6").findFirst()?.actionTitleR != null) {
                        dialogView.findViewById<TextView>(R.id.slot6).text = (mRealm.where(SaveSlot::class.java).equalTo("id", "6").findFirst()?.actionTitleR.toString())
                    }
                    if (mRealm.where(SaveSlot::class.java).equalTo("id", "7").findFirst()?.actionTitleR != null) {
                        dialogView.findViewById<TextView>(R.id.slot7).text = (mRealm.where(SaveSlot::class.java).equalTo("id", "7").findFirst()?.actionTitleR.toString())
                    }
                    if (mRealm.where(SaveSlot::class.java).equalTo("id", "8").findFirst()?.actionTitleR != null) {
                        dialogView.findViewById<TextView>(R.id.slot8).text = (mRealm.where(SaveSlot::class.java).equalTo("id", "8").findFirst()?.actionTitleR.toString())
                    }

                    builder.setView(dialogView)
                        .setOnCancelListener {
                            stickyImmersiveMode()
                        }
                        .setTitle(R.string.load)
                        .setNegativeButton("CANCEL") { _, _ ->
                            stickyImmersiveMode()
                        }
                    val dialog = builder.create()
                    dialog.show()

                    dialogView.findViewById<TextView>(R.id.slot1).setOnClickListener {
                        read("1")
                        dialog.cancel()
                        if (mRealm.where(SaveSlot::class.java).equalTo("id", "1").findFirst()?.pad != null) {
                            sequencerSize = 0
                            findViewById<View>(R.id.line_measure).findViewById<TextView>(R.id.measure).text = (sequencerSize + 1).toString()
                            changeSequence()
                            window.addFlags(WindowManager.LayoutParams.FLAG_NOT_TOUCHABLE)
                            val snackBar2 = Snackbar.make(findViewById(R.id.snack_space),
                                R.string.Loaded,
                                Snackbar.LENGTH_LONG)
                            val snackTextView2: TextView =
                                snackBar2.view.findViewById(R.id.snackbar_text)
                            snackTextView2.textAlignment = TextView.TEXT_ALIGNMENT_CENTER
                            snackBar2.setDuration(2000).show()
                            handler.postDelayed({
                                window.clearFlags(WindowManager.LayoutParams.FLAG_NOT_TOUCHABLE)
                            }, 2000)
                        }
                    }

                    dialogView.findViewById<TextView>(R.id.slot2).setOnClickListener {
                        read("2")
                        dialog.cancel()
                        if (mRealm.where(SaveSlot::class.java).equalTo("id", "2").findFirst()?.pad != null) {
                            sequencerSize = 0
                            findViewById<View>(R.id.line_measure).findViewById<TextView>(R.id.measure).text = (sequencerSize + 1).toString()
                            changeSequence()
                            window.addFlags(WindowManager.LayoutParams.FLAG_NOT_TOUCHABLE)
                            val snackBar2 = Snackbar.make(findViewById(R.id.snack_space),
                                R.string.Loaded,
                                Snackbar.LENGTH_LONG)
                            val snackTextView2: TextView =
                                snackBar2.view.findViewById(R.id.snackbar_text)
                            snackTextView2.textAlignment = TextView.TEXT_ALIGNMENT_CENTER
                            snackBar2.setDuration(2000).show()
                            handler.postDelayed({
                                window.clearFlags(WindowManager.LayoutParams.FLAG_NOT_TOUCHABLE)
                            }, 2000)
                        }
                    }

                    dialogView.findViewById<TextView>(R.id.slot3).setOnClickListener {
                        read("3")
                        dialog.cancel()
                        if (mRealm.where(SaveSlot::class.java).equalTo("id", "3").findFirst()?.pad != null) {
                            sequencerSize = 0
                            findViewById<View>(R.id.line_measure).findViewById<TextView>(R.id.measure).text = (sequencerSize + 1).toString()
                            changeSequence()
                            window.addFlags(WindowManager.LayoutParams.FLAG_NOT_TOUCHABLE)
                            val snackBar2 = Snackbar.make(findViewById(R.id.snack_space),
                                R.string.Loaded,
                                Snackbar.LENGTH_LONG)
                            val snackTextView2: TextView =
                                snackBar2.view.findViewById(R.id.snackbar_text)
                            snackTextView2.textAlignment = TextView.TEXT_ALIGNMENT_CENTER
                            snackBar2.setDuration(2000).show()
                            handler.postDelayed({
                                window.clearFlags(WindowManager.LayoutParams.FLAG_NOT_TOUCHABLE)
                            }, 2000)
                        }
                    }

                    dialogView.findViewById<TextView>(R.id.slot4).setOnClickListener {
                        read("4")
                        dialog.cancel()
                        if (mRealm.where(SaveSlot::class.java).equalTo("id", "4").findFirst()?.pad != null) {
                            sequencerSize = 0
                            findViewById<View>(R.id.line_measure).findViewById<TextView>(R.id.measure).text = (sequencerSize + 1).toString()
                            changeSequence()
                            window.addFlags(WindowManager.LayoutParams.FLAG_NOT_TOUCHABLE)
                            val snackBar2 = Snackbar.make(findViewById(R.id.snack_space),
                                R.string.Loaded,
                                Snackbar.LENGTH_LONG)
                            val snackTextView2: TextView =
                                snackBar2.view.findViewById(R.id.snackbar_text)
                            snackTextView2.textAlignment = TextView.TEXT_ALIGNMENT_CENTER
                            snackBar2.setDuration(2000).show()
                            handler.postDelayed({
                                window.clearFlags(WindowManager.LayoutParams.FLAG_NOT_TOUCHABLE)
                            }, 2000)
                        }
                    }

                    dialogView.findViewById<TextView>(R.id.slot5).setOnClickListener {
                        read("5")
                        dialog.cancel()
                        if (mRealm.where(SaveSlot::class.java).equalTo("id", "5").findFirst()?.pad != null) {
                            sequencerSize = 0
                            findViewById<View>(R.id.line_measure).findViewById<TextView>(R.id.measure).text = (sequencerSize + 1).toString()
                            changeSequence()
                            window.addFlags(WindowManager.LayoutParams.FLAG_NOT_TOUCHABLE)
                            val snackBar2 = Snackbar.make(findViewById(R.id.snack_space),
                                R.string.Loaded,
                                Snackbar.LENGTH_LONG)
                            val snackTextView2: TextView =
                                snackBar2.view.findViewById(R.id.snackbar_text)
                            snackTextView2.textAlignment = TextView.TEXT_ALIGNMENT_CENTER
                            snackBar2.setDuration(2000).show()
                            handler.postDelayed({
                                window.clearFlags(WindowManager.LayoutParams.FLAG_NOT_TOUCHABLE)
                            }, 2000)
                        }
                    }

                    dialogView.findViewById<TextView>(R.id.slot6).setOnClickListener {
                        read("6")
                        dialog.cancel()
                        if (mRealm.where(SaveSlot::class.java).equalTo("id", "6").findFirst()?.pad != null) {
                            sequencerSize = 0
                            findViewById<View>(R.id.line_measure).findViewById<TextView>(R.id.measure).text = (sequencerSize + 1).toString()
                            changeSequence()
                            window.addFlags(WindowManager.LayoutParams.FLAG_NOT_TOUCHABLE)
                            val snackBar2 = Snackbar.make(findViewById(R.id.snack_space),
                                R.string.Loaded,
                                Snackbar.LENGTH_LONG)
                            val snackTextView2: TextView =
                                snackBar2.view.findViewById(R.id.snackbar_text)
                            snackTextView2.textAlignment = TextView.TEXT_ALIGNMENT_CENTER
                            snackBar2.setDuration(2000).show()
                            handler.postDelayed({
                                window.clearFlags(WindowManager.LayoutParams.FLAG_NOT_TOUCHABLE)
                            }, 2000)
                        }
                    }

                    dialogView.findViewById<TextView>(R.id.slot7).setOnClickListener {
                        read("7")
                        dialog.cancel()
                        if (mRealm.where(SaveSlot::class.java).equalTo("id", "7").findFirst()?.pad != null) {
                            sequencerSize = 0
                            findViewById<View>(R.id.line_measure).findViewById<TextView>(R.id.measure).text = (sequencerSize + 1).toString()
                            changeSequence()
                            window.addFlags(WindowManager.LayoutParams.FLAG_NOT_TOUCHABLE)
                            val snackBar2 = Snackbar.make(findViewById(R.id.snack_space),
                                R.string.Loaded,
                                Snackbar.LENGTH_LONG)
                            val snackTextView2: TextView =
                                snackBar2.view.findViewById(R.id.snackbar_text)
                            snackTextView2.textAlignment = TextView.TEXT_ALIGNMENT_CENTER
                            snackBar2.setDuration(2000).show()
                            handler.postDelayed({
                                window.clearFlags(WindowManager.LayoutParams.FLAG_NOT_TOUCHABLE)
                            }, 2000)
                        }
                    }

                    dialogView.findViewById<TextView>(R.id.slot8).setOnClickListener {
                        read("8")
                        dialog.cancel()
                        if (mRealm.where(SaveSlot::class.java).equalTo("id", "8").findFirst()?.pad != null) {
                            sequencerSize = 0
                            findViewById<View>(R.id.line_measure).findViewById<TextView>(R.id.measure).text = (sequencerSize + 1).toString()
                            changeSequence()
                            window.addFlags(WindowManager.LayoutParams.FLAG_NOT_TOUCHABLE)
                            val snackBar2 = Snackbar.make(findViewById(R.id.snack_space),
                                R.string.Loaded,
                                Snackbar.LENGTH_LONG)
                            val snackTextView2: TextView =
                                snackBar2.view.findViewById(R.id.snackbar_text)
                            snackTextView2.textAlignment = TextView.TEXT_ALIGNMENT_CENTER
                            snackBar2.setDuration(2000).show()
                            handler.postDelayed({
                                window.clearFlags(WindowManager.LayoutParams.FLAG_NOT_TOUCHABLE)
                            }, 2000)
                        }
                    }
                }
            }
            false
        }

        findViewById<View>(R.id.accent_reset).findViewById<TextView>(R.id.sequence_random).setOnTouchListener { _, event ->
            when (event.action) {
                MotionEvent.ACTION_DOWN -> {
                    var sequencerRandom = sequenceArray
                    when(trackCount) {
                        in 2..4 -> {
                            sequencerRandom = sequenceArray
                        }
                        in 5..8 -> {
                            sequencerRandom = sequenceArray5
                        }
                        in 9..12 -> {
                            sequencerRandom = sequenceArray10
                        }
                        in 13..15 -> {
                            sequencerRandom = sequenceArray15
                        }
                    }
                    a1[sequencerSize] = sequencerRandom.random()
                    a2[sequencerSize] = sequencerRandom.random()
                    a3[sequencerSize] = sequencerRandom.random()
                    a4[sequencerSize] = sequencerRandom.random()
                    a5[sequencerSize] = sequencerRandom.random()
                    a6[sequencerSize] = sequencerRandom.random()
                    a7[sequencerSize] = sequencerRandom.random()
                    a8[sequencerSize] = sequencerRandom.random()
                    a9[sequencerSize] = sequencerRandom.random()
                    a10[sequencerSize] = sequencerRandom.random()
                    a11[sequencerSize] = sequencerRandom.random()
                    a12[sequencerSize] = sequencerRandom.random()
                    a13[sequencerSize] = sequencerRandom.random()
                    a14[sequencerSize] = sequencerRandom.random()
                    a15[sequencerSize] = sequencerRandom.random()
                    a16[sequencerSize] = sequencerRandom.random()
                    b1[sequencerSize] = sequencerRandom.random()
                    b2[sequencerSize] = sequencerRandom.random()
                    b3[sequencerSize] = sequencerRandom.random()
                    b4[sequencerSize] = sequencerRandom.random()
                    b5[sequencerSize] = sequencerRandom.random()
                    b6[sequencerSize] = sequencerRandom.random()
                    b7[sequencerSize] = sequencerRandom.random()
                    b8[sequencerSize] = sequencerRandom.random()
                    b9[sequencerSize] = sequencerRandom.random()
                    b10[sequencerSize] = sequencerRandom.random()
                    b11[sequencerSize] = sequencerRandom.random()
                    b12[sequencerSize] = sequencerRandom.random()
                    b13[sequencerSize] = sequencerRandom.random()
                    b14[sequencerSize] = sequencerRandom.random()
                    b15[sequencerSize] = sequencerRandom.random()
                    b16[sequencerSize] = sequencerRandom.random()
                    c1[sequencerSize] = sequencerRandom.random()
                    c2[sequencerSize] = sequencerRandom.random()
                    c3[sequencerSize] = sequencerRandom.random()
                    c4[sequencerSize] = sequencerRandom.random()
                    c5[sequencerSize] = sequencerRandom.random()
                    c6[sequencerSize] = sequencerRandom.random()
                    c7[sequencerSize] = sequencerRandom.random()
                    c8[sequencerSize] = sequencerRandom.random()
                    c9[sequencerSize] = sequencerRandom.random()
                    c10[sequencerSize] = sequencerRandom.random()
                    c11[sequencerSize] = sequencerRandom.random()
                    c12[sequencerSize] = sequencerRandom.random()
                    c13[sequencerSize] = sequencerRandom.random()
                    c14[sequencerSize] = sequencerRandom.random()
                    c15[sequencerSize] = sequencerRandom.random()
                    c16[sequencerSize] = sequencerRandom.random()
                    d1[sequencerSize] = sequencerRandom.random()
                    d2[sequencerSize] = sequencerRandom.random()
                    d3[sequencerSize] = sequencerRandom.random()
                    d4[sequencerSize] = sequencerRandom.random()
                    d5[sequencerSize] = sequencerRandom.random()
                    d6[sequencerSize] = sequencerRandom.random()
                    d7[sequencerSize] = sequencerRandom.random()
                    d8[sequencerSize] = sequencerRandom.random()
                    d9[sequencerSize] = sequencerRandom.random()
                    d10[sequencerSize] = sequencerRandom.random()
                    d11[sequencerSize] = sequencerRandom.random()
                    d12[sequencerSize] = sequencerRandom.random()
                    d13[sequencerSize] = sequencerRandom.random()
                    d14[sequencerSize] = sequencerRandom.random()
                    d15[sequencerSize] = sequencerRandom.random()
                    d16[sequencerSize] = sequencerRandom.random()
                    e1[sequencerSize] = sequencerRandom.random()
                    e2[sequencerSize] = sequencerRandom.random()
                    e3[sequencerSize] = sequencerRandom.random()
                    e4[sequencerSize] = sequencerRandom.random()
                    e5[sequencerSize] = sequencerRandom.random()
                    e6[sequencerSize] = sequencerRandom.random()
                    e7[sequencerSize] = sequencerRandom.random()
                    e8[sequencerSize] = sequencerRandom.random()
                    e9[sequencerSize] = sequencerRandom.random()
                    e10[sequencerSize] = sequencerRandom.random()
                    e11[sequencerSize] = sequencerRandom.random()
                    e12[sequencerSize] = sequencerRandom.random()
                    e13[sequencerSize] = sequencerRandom.random()
                    e14[sequencerSize] = sequencerRandom.random()
                    e15[sequencerSize] = sequencerRandom.random()
                    e16[sequencerSize] = sequencerRandom.random()
                    f1[sequencerSize] = sequencerRandom.random()
                    f2[sequencerSize] = sequencerRandom.random()
                    f3[sequencerSize] = sequencerRandom.random()
                    f4[sequencerSize] = sequencerRandom.random()
                    f5[sequencerSize] = sequencerRandom.random()
                    f6[sequencerSize] = sequencerRandom.random()
                    f7[sequencerSize] = sequencerRandom.random()
                    f8[sequencerSize] = sequencerRandom.random()
                    f9[sequencerSize] = sequencerRandom.random()
                    f10[sequencerSize] = sequencerRandom.random()
                    f11[sequencerSize] = sequencerRandom.random()
                    f12[sequencerSize] = sequencerRandom.random()
                    f13[sequencerSize] = sequencerRandom.random()
                    f14[sequencerSize] = sequencerRandom.random()
                    f15[sequencerSize] = sequencerRandom.random()
                    f16[sequencerSize] = sequencerRandom.random()
                    g1[sequencerSize] = sequencerRandom.random()
                    g2[sequencerSize] = sequencerRandom.random()
                    g3[sequencerSize] = sequencerRandom.random()
                    g4[sequencerSize] = sequencerRandom.random()
                    g5[sequencerSize] = sequencerRandom.random()
                    g6[sequencerSize] = sequencerRandom.random()
                    g7[sequencerSize] = sequencerRandom.random()
                    g8[sequencerSize] = sequencerRandom.random()
                    g9[sequencerSize] = sequencerRandom.random()
                    g10[sequencerSize] = sequencerRandom.random()
                    g11[sequencerSize] = sequencerRandom.random()
                    g12[sequencerSize] = sequencerRandom.random()
                    g13[sequencerSize] = sequencerRandom.random()
                    g14[sequencerSize] = sequencerRandom.random()
                    g15[sequencerSize] = sequencerRandom.random()
                    g16[sequencerSize] = sequencerRandom.random()
                    h1[sequencerSize] = sequencerRandom.random()
                    h2[sequencerSize] = sequencerRandom.random()
                    h3[sequencerSize] = sequencerRandom.random()
                    h4[sequencerSize] = sequencerRandom.random()
                    h5[sequencerSize] = sequencerRandom.random()
                    h6[sequencerSize] = sequencerRandom.random()
                    h7[sequencerSize] = sequencerRandom.random()
                    h8[sequencerSize] = sequencerRandom.random()
                    h9[sequencerSize] = sequencerRandom.random()
                    h10[sequencerSize] = sequencerRandom.random()
                    h11[sequencerSize] = sequencerRandom.random()
                    h12[sequencerSize] = sequencerRandom.random()
                    h13[sequencerSize] = sequencerRandom.random()
                    h14[sequencerSize] = sequencerRandom.random()
                    h15[sequencerSize] = sequencerRandom.random()
                    h16[sequencerSize] = sequencerRandom.random()
                    i1[sequencerSize] = sequencerRandom.random()
                    i2[sequencerSize] = sequencerRandom.random()
                    i3[sequencerSize] = sequencerRandom.random()
                    i4[sequencerSize] = sequencerRandom.random()
                    i5[sequencerSize] = sequencerRandom.random()
                    i6[sequencerSize] = sequencerRandom.random()
                    i7[sequencerSize] = sequencerRandom.random()
                    i8[sequencerSize] = sequencerRandom.random()
                    i9[sequencerSize] = sequencerRandom.random()
                    i10[sequencerSize] = sequencerRandom.random()
                    i11[sequencerSize] = sequencerRandom.random()
                    i12[sequencerSize] = sequencerRandom.random()
                    i13[sequencerSize] = sequencerRandom.random()
                    i14[sequencerSize] = sequencerRandom.random()
                    i15[sequencerSize] = sequencerRandom.random()
                    i16[sequencerSize] = sequencerRandom.random()
                    j1[sequencerSize] = sequencerRandom.random()
                    j2[sequencerSize] = sequencerRandom.random()
                    j3[sequencerSize] = sequencerRandom.random()
                    j4[sequencerSize] = sequencerRandom.random()
                    j5[sequencerSize] = sequencerRandom.random()
                    j6[sequencerSize] = sequencerRandom.random()
                    j7[sequencerSize] = sequencerRandom.random()
                    j8[sequencerSize] = sequencerRandom.random()
                    j9[sequencerSize] = sequencerRandom.random()
                    j10[sequencerSize] = sequencerRandom.random()
                    j11[sequencerSize] = sequencerRandom.random()
                    j12[sequencerSize] = sequencerRandom.random()
                    j13[sequencerSize] = sequencerRandom.random()
                    j14[sequencerSize] = sequencerRandom.random()
                    j15[sequencerSize] = sequencerRandom.random()
                    j16[sequencerSize] = sequencerRandom.random()
                    k1[sequencerSize] = sequencerRandom.random()
                    k2[sequencerSize] = sequencerRandom.random()
                    k3[sequencerSize] = sequencerRandom.random()
                    k4[sequencerSize] = sequencerRandom.random()
                    k5[sequencerSize] = sequencerRandom.random()
                    k6[sequencerSize] = sequencerRandom.random()
                    k7[sequencerSize] = sequencerRandom.random()
                    k8[sequencerSize] = sequencerRandom.random()
                    k9[sequencerSize] = sequencerRandom.random()
                    k10[sequencerSize] = sequencerRandom.random()
                    k11[sequencerSize] = sequencerRandom.random()
                    k12[sequencerSize] = sequencerRandom.random()
                    k13[sequencerSize] = sequencerRandom.random()
                    k14[sequencerSize] = sequencerRandom.random()
                    k15[sequencerSize] = sequencerRandom.random()
                    k16[sequencerSize] = sequencerRandom.random()
                    l1[sequencerSize] = sequencerRandom.random()
                    l2[sequencerSize] = sequencerRandom.random()
                    l3[sequencerSize] = sequencerRandom.random()
                    l4[sequencerSize] = sequencerRandom.random()
                    l5[sequencerSize] = sequencerRandom.random()
                    l6[sequencerSize] = sequencerRandom.random()
                    l7[sequencerSize] = sequencerRandom.random()
                    l8[sequencerSize] = sequencerRandom.random()
                    l9[sequencerSize] = sequencerRandom.random()
                    l10[sequencerSize] = sequencerRandom.random()
                    l11[sequencerSize] = sequencerRandom.random()
                    l12[sequencerSize] = sequencerRandom.random()
                    l13[sequencerSize] = sequencerRandom.random()
                    l14[sequencerSize] = sequencerRandom.random()
                    l15[sequencerSize] = sequencerRandom.random()
                    l16[sequencerSize] = sequencerRandom.random()
                    m1[sequencerSize] = sequencerRandom.random()
                    m2[sequencerSize] = sequencerRandom.random()
                    m3[sequencerSize] = sequencerRandom.random()
                    m4[sequencerSize] = sequencerRandom.random()
                    m5[sequencerSize] = sequencerRandom.random()
                    m6[sequencerSize] = sequencerRandom.random()
                    m7[sequencerSize] = sequencerRandom.random()
                    m8[sequencerSize] = sequencerRandom.random()
                    m9[sequencerSize] = sequencerRandom.random()
                    m10[sequencerSize] = sequencerRandom.random()
                    m11[sequencerSize] = sequencerRandom.random()
                    m12[sequencerSize] = sequencerRandom.random()
                    m13[sequencerSize] = sequencerRandom.random()
                    m14[sequencerSize] = sequencerRandom.random()
                    m15[sequencerSize] = sequencerRandom.random()
                    m16[sequencerSize] = sequencerRandom.random()
                    n1[sequencerSize] = sequencerRandom.random()
                    n2[sequencerSize] = sequencerRandom.random()
                    n3[sequencerSize] = sequencerRandom.random()
                    n4[sequencerSize] = sequencerRandom.random()
                    n5[sequencerSize] = sequencerRandom.random()
                    n6[sequencerSize] = sequencerRandom.random()
                    n7[sequencerSize] = sequencerRandom.random()
                    n8[sequencerSize] = sequencerRandom.random()
                    n9[sequencerSize] = sequencerRandom.random()
                    n10[sequencerSize] = sequencerRandom.random()
                    n11[sequencerSize] = sequencerRandom.random()
                    n12[sequencerSize] = sequencerRandom.random()
                    n13[sequencerSize] = sequencerRandom.random()
                    n14[sequencerSize] = sequencerRandom.random()
                    n15[sequencerSize] = sequencerRandom.random()
                    n16[sequencerSize] = sequencerRandom.random()
                    o1[sequencerSize] = sequencerRandom.random()
                    o2[sequencerSize] = sequencerRandom.random()
                    o3[sequencerSize] = sequencerRandom.random()
                    o4[sequencerSize] = sequencerRandom.random()
                    o5[sequencerSize] = sequencerRandom.random()
                    o6[sequencerSize] = sequencerRandom.random()
                    o7[sequencerSize] = sequencerRandom.random()
                    o8[sequencerSize] = sequencerRandom.random()
                    o9[sequencerSize] = sequencerRandom.random()
                    o10[sequencerSize] = sequencerRandom.random()
                    o11[sequencerSize] = sequencerRandom.random()
                    o12[sequencerSize] = sequencerRandom.random()
                    o13[sequencerSize] = sequencerRandom.random()
                    o14[sequencerSize] = sequencerRandom.random()
                    o15[sequencerSize] = sequencerRandom.random()
                    o16[sequencerSize] = sequencerRandom.random()
                    changeSequence()
                }
            }
            false
        }

        findViewById<View>(R.id.bpm).findViewById<EditText>(R.id.bpmCount).addTextChangedListener(object: TextWatcher{
            override fun afterTextChanged(p0: Editable?) {
                if (p0?.isNotEmpty() == true) {
                    editBpm = p0.toString().toLong()
                }
            }

            override fun beforeTextChanged(p0: CharSequence?, p1: Int, p2: Int, p3: Int) {

            }

            override fun onTextChanged(p0: CharSequence?, p1: Int, p2: Int, p3: Int) {

            }
        })
    }

    private fun switchPadSequencer(visible: Int) {
        findViewById<View>(R.id.include_main_view).visibility = visible
        findViewById<View>(R.id.include_main_view2).visibility = visible
        findViewById<View>(R.id.include_main_view3).visibility = visible
        findViewById<View>(R.id.include_main_view4).visibility = visible
        findViewById<View>(R.id.include_main_view5).visibility = visible
        findViewById<View>(R.id.include_main_view6).visibility = visible
        findViewById<View>(R.id.include_main_view7).visibility = visible
        findViewById<View>(R.id.include_main_view8).visibility = visible
        findViewById<View>(R.id.include_main_view9).visibility = visible
        findViewById<View>(R.id.include_main_view10).visibility = visible
        findViewById<View>(R.id.include_main_view11).visibility = visible
        findViewById<View>(R.id.include_main_view12).visibility = visible
        findViewById<View>(R.id.include_main_view13).visibility = visible
        findViewById<View>(R.id.include_main_view14).visibility = visible
        findViewById<View>(R.id.include_main_view15).visibility = visible
    }

    private fun sequencerVisibility(l3:Int, l4:Int, l5:Int, l6:Int, l7:Int, l8:Int, l9:Int, l10:Int, l11:Int, l12:Int, l13:Int, l14:Int, l15:Int) {
        findViewById<View>(R.id.sequencer_list3).visibility = l3
        findViewById<View>(R.id.sequencer_list4).visibility = l4
        findViewById<View>(R.id.sequencer_list5).visibility = l5
        findViewById<View>(R.id.sequencer_list6).visibility = l6
        findViewById<View>(R.id.sequencer_list7).visibility = l7
        findViewById<View>(R.id.sequencer_list8).visibility = l8
        findViewById<View>(R.id.sequencer_list9).visibility = l9
        findViewById<View>(R.id.sequencer_list10).visibility = l10
        findViewById<View>(R.id.sequencer_list11).visibility = l11
        findViewById<View>(R.id.sequencer_list12).visibility = l12
        findViewById<View>(R.id.sequencer_list13).visibility = l13
        findViewById<View>(R.id.sequencer_list14).visibility = l14
        findViewById<View>(R.id.sequencer_list15).visibility = l15
        findViewById<View>(R.id.tuning_sequencer3).visibility = l3
        findViewById<View>(R.id.tuning_sequencer4).visibility = l4
        findViewById<View>(R.id.tuning_sequencer5).visibility = l5
        findViewById<View>(R.id.tuning_sequencer6).visibility = l6
        findViewById<View>(R.id.tuning_sequencer7).visibility = l7
        findViewById<View>(R.id.tuning_sequencer8).visibility = l8
        findViewById<View>(R.id.tuning_sequencer9).visibility = l9
        findViewById<View>(R.id.tuning_sequencer10).visibility = l10
        findViewById<View>(R.id.tuning_sequencer11).visibility = l11
        findViewById<View>(R.id.tuning_sequencer12).visibility = l12
        findViewById<View>(R.id.tuning_sequencer13).visibility = l13
        findViewById<View>(R.id.tuning_sequencer14).visibility = l14
        findViewById<View>(R.id.tuning_sequencer15).visibility = l15
        binding.sequencerView.visibility = View.VISIBLE
        binding.notes.visibility = View.VISIBLE
    }

    private fun pasteText() {
        findViewById<View>(R.id.tuning_sequencer).findViewById<TextView>(R.id.volume).text = soundPoolVolume.toString().replace("f", "")
        findViewById<View>(R.id.tuning_sequencer2).findViewById<TextView>(R.id.volume).text = soundPoolVolume4.toString().replace("f", "")
        findViewById<View>(R.id.tuning_sequencer3).findViewById<TextView>(R.id.volume).text = soundPoolVolume7.toString().replace("f", "")
        findViewById<View>(R.id.tuning_sequencer4).findViewById<TextView>(R.id.volume).text = soundPoolVolume10.toString().replace("f", "")
        findViewById<View>(R.id.tuning_sequencer5).findViewById<TextView>(R.id.volume).text = soundPoolVolume13.toString().replace("f", "")
        findViewById<View>(R.id.tuning_sequencer6).findViewById<TextView>(R.id.volume).text = soundPoolVolume2.toString().replace("f", "")
        findViewById<View>(R.id.tuning_sequencer7).findViewById<TextView>(R.id.volume).text = soundPoolVolume5.toString().replace("f", "")
        findViewById<View>(R.id.tuning_sequencer8).findViewById<TextView>(R.id.volume).text = soundPoolVolume8.toString().replace("f", "")
        findViewById<View>(R.id.tuning_sequencer9).findViewById<TextView>(R.id.volume).text = soundPoolVolume11.toString().replace("f", "")
        findViewById<View>(R.id.tuning_sequencer10).findViewById<TextView>(R.id.volume).text = soundPoolVolume14.toString().replace("f", "")
        findViewById<View>(R.id.tuning_sequencer11).findViewById<TextView>(R.id.volume).text = soundPoolVolume3.toString().replace("f", "")
        findViewById<View>(R.id.tuning_sequencer12).findViewById<TextView>(R.id.volume).text = soundPoolVolume6.toString().replace("f", "")
        findViewById<View>(R.id.tuning_sequencer13).findViewById<TextView>(R.id.volume).text = soundPoolVolume9.toString().replace("f", "")
        findViewById<View>(R.id.tuning_sequencer14).findViewById<TextView>(R.id.volume).text = soundPoolVolume12.toString().replace("f", "")
        findViewById<View>(R.id.tuning_sequencer15).findViewById<TextView>(R.id.volume).text = soundPoolVolume15.toString().replace("f", "")
        findViewById<View>(R.id.tuning_sequencer).findViewById<TextView>(R.id.tempo).text = soundPoolTempo.toString().replace("f", "")
        findViewById<View>(R.id.tuning_sequencer2).findViewById<TextView>(R.id.tempo).text = soundPoolTempo4.toString().replace("f", "")
        findViewById<View>(R.id.tuning_sequencer3).findViewById<TextView>(R.id.tempo).text = soundPoolTempo7.toString().replace("f", "")
        findViewById<View>(R.id.tuning_sequencer4).findViewById<TextView>(R.id.tempo).text = soundPoolTempo10.toString().replace("f", "")
        findViewById<View>(R.id.tuning_sequencer5).findViewById<TextView>(R.id.tempo).text = soundPoolTempo13.toString().replace("f", "")
        findViewById<View>(R.id.tuning_sequencer6).findViewById<TextView>(R.id.tempo).text = soundPoolTempo2.toString().replace("f", "")
        findViewById<View>(R.id.tuning_sequencer7).findViewById<TextView>(R.id.tempo).text = soundPoolTempo5.toString().replace("f", "")
        findViewById<View>(R.id.tuning_sequencer8).findViewById<TextView>(R.id.tempo).text = soundPoolTempo8.toString().replace("f", "")
        findViewById<View>(R.id.tuning_sequencer9).findViewById<TextView>(R.id.tempo).text = soundPoolTempo11.toString().replace("f", "")
        findViewById<View>(R.id.tuning_sequencer10).findViewById<TextView>(R.id.tempo).text = soundPoolTempo14.toString().replace("f", "")
        findViewById<View>(R.id.tuning_sequencer11).findViewById<TextView>(R.id.tempo).text = soundPoolTempo3.toString().replace("f", "")
        findViewById<View>(R.id.tuning_sequencer12).findViewById<TextView>(R.id.tempo).text = soundPoolTempo6.toString().replace("f", "")
        findViewById<View>(R.id.tuning_sequencer13).findViewById<TextView>(R.id.tempo).text = soundPoolTempo9.toString().replace("f", "")
        findViewById<View>(R.id.tuning_sequencer14).findViewById<TextView>(R.id.tempo).text = soundPoolTempo12.toString().replace("f", "")
        findViewById<View>(R.id.tuning_sequencer15).findViewById<TextView>(R.id.tempo).text = soundPoolTempo15.toString().replace("f", "")
        findViewById<View>(R.id.include_view).findViewById<TextView>(R.id.padText).text = soundPoolVolume.toString().replace("f", "") + "            " + soundPoolTempo.toString().replace("f", "") + "\n" + padText1.replace("tr_8", "TR-8").replace("tr_909", "TR-909").replace("_"," ").uppercase()
        findViewById<View>(R.id.include_view2).findViewById<TextView>(R.id.padText).text = soundPoolVolume2.toString().replace("f", "") + "            " + soundPoolTempo2.toString().replace("f", "") + "\n" + padText2.replace("tr_8", "TR-8").replace("tr_909", "TR-909").replace("_"," ").uppercase()
        findViewById<View>(R.id.include_view3).findViewById<TextView>(R.id.padText).text = soundPoolVolume3.toString().replace("f", "") + "            " + soundPoolTempo3.toString().replace("f", "") + "\n" + padText3.replace("tr_8", "TR-8").replace("tr_909", "TR-909").replace("_"," ").uppercase()
        findViewById<View>(R.id.include_view4).findViewById<TextView>(R.id.padText).text = soundPoolVolume4.toString().replace("f", "") + "            " + soundPoolTempo4.toString().replace("f", "") + "\n" + padText4.replace("tr_8", "TR-8").replace("tr_909", "TR-909").replace("_"," ").uppercase()
        findViewById<View>(R.id.include_view5).findViewById<TextView>(R.id.padText).text = soundPoolVolume5.toString().replace("f", "") + "            " + soundPoolTempo5.toString().replace("f", "") + "\n" + padText5.replace("tr_8", "TR-8").replace("tr_909", "TR-909").replace("_"," ").uppercase()
        findViewById<View>(R.id.include_view6).findViewById<TextView>(R.id.padText).text = soundPoolVolume6.toString().replace("f", "") + "            " + soundPoolTempo6.toString().replace("f", "") + "\n" + padText6.replace("tr_8", "TR-8").replace("tr_909", "TR-909").replace("_"," ").uppercase()
        findViewById<View>(R.id.include_view7).findViewById<TextView>(R.id.padText).text = soundPoolVolume7.toString().replace("f", "") + "            " + soundPoolTempo7.toString().replace("f", "") + "\n" + padText7.replace("tr_8", "TR-8").replace("tr_909", "TR-909").replace("_"," ").uppercase()
        findViewById<View>(R.id.include_view8).findViewById<TextView>(R.id.padText).text = soundPoolVolume8.toString().replace("f", "") + "            " + soundPoolTempo8.toString().replace("f", "") + "\n" + padText8.replace("tr_8", "TR-8").replace("tr_909", "TR-909").replace("_"," ").uppercase()
        findViewById<View>(R.id.include_view9).findViewById<TextView>(R.id.padText).text = soundPoolVolume9.toString().replace("f", "") + "            " + soundPoolTempo9.toString().replace("f", "") + "\n" + padText9.replace("tr_8", "TR-8").replace("tr_909", "TR-909").replace("_"," ").uppercase()
        findViewById<View>(R.id.include_view10).findViewById<TextView>(R.id.padText).text = soundPoolVolume10.toString().replace("f", "") + "            " + soundPoolTempo10.toString().replace("f", "") + "\n" + padText10.replace("tr_8", "TR-8").replace("tr_909", "TR-909").replace("_"," ").uppercase()
        findViewById<View>(R.id.include_view11).findViewById<TextView>(R.id.padText).text = soundPoolVolume11.toString().replace("f", "") + "            " + soundPoolTempo11.toString().replace("f", "") + "\n" + padText11.replace("tr_8", "TR-8").replace("tr_909", "TR-909").replace("_"," ").uppercase()
        findViewById<View>(R.id.include_view12).findViewById<TextView>(R.id.padText).text = soundPoolVolume12.toString().replace("f", "") + "            " + soundPoolTempo12.toString().replace("f", "") + "\n" + padText12.replace("tr_8", "TR-8").replace("tr_909", "TR-909").replace("_"," ").uppercase()
        findViewById<View>(R.id.include_view13).findViewById<TextView>(R.id.padText).text = soundPoolVolume13.toString().replace("f", "") + "            " + soundPoolTempo13.toString().replace("f", "") + "\n" + padText13.replace("tr_8", "TR-8").replace("tr_909", "TR-909").replace("_"," ").uppercase()
        findViewById<View>(R.id.include_view14).findViewById<TextView>(R.id.padText).text = soundPoolVolume14.toString().replace("f", "") + "            " + soundPoolTempo14.toString().replace("f", "") + "\n" + padText14.replace("tr_8", "TR-8").replace("tr_909", "TR-909").replace("_"," ").uppercase()
        findViewById<View>(R.id.include_view15).findViewById<TextView>(R.id.padText).text = soundPoolVolume15.toString().replace("f", "") + "            " + soundPoolTempo15.toString().replace("f", "") + "\n" + padText15.replace("tr_8", "TR-8").replace("tr_909", "TR-909").replace("_"," ").uppercase()
    }

    private fun textChange(view: Int, vol: Float, tem: Float, seq: Int, pad: String, voltem: Int, voltem2: Float) {
            findViewById<View>(view).findViewById<TextView>(R.id.padText).text = ""
            findViewById<View>(view).findViewById<TextView>(R.id.padText).text =
                vol.toString()
                    .replace("f", "") + "            " + tem.toString()
                    .replace("f", "") + "\n" + pad.replaceBeforeLast("/", "")
                    .replace("/", "").replace("tr_8", "TR-8")
                    .replace("tr_909", "TR-909")
                    .replace("_"," ")
                    .replace(".ogg", "").uppercase()
            findViewById<View>(seq).findViewById<TextView>(voltem).text = voltem2.toString().replace("f", "")
    }

    private fun sequenceTap(number: MutableList<Int>, list: Int, sequence: Int, color: String) {
        if (number[sequencerSize] == 0) {
            number[sequencerSize] = 1
            findViewById<View>(list).findViewById<ImageView>(sequence).setBackgroundColor(Color.parseColor(color))
        } else {
            number[sequencerSize] = 0
            findViewById<View>(list).findViewById<ImageView>(sequence).setBackgroundColor(Color.parseColor("#5A5A66"))
        }
    }
    
    private fun sequencerChange(view: Int) {
        val v = View.VISIBLE
        val g = View.GONE
        when (trackCount) {
            2 -> {
                switchPadSequencer(view)
                sequencerVisibility(g,g,g,g,g,g,g,g,g,g,g,g,g)
            }
            3 -> {
                switchPadSequencer(view)
                sequencerVisibility(v,g,g,g,g,g,g,g,g,g,g,g,g)
            }
            4 -> {
                switchPadSequencer(view)
                sequencerVisibility(v,v,g,g,g,g,g,g,g,g,g,g,g)
            }
            5 -> {
                switchPadSequencer(view)
                sequencerVisibility(v,v,v,g,g,g,g,g,g,g,g,g,g)
            }
            6 -> {
                switchPadSequencer(view)
                sequencerVisibility(v,v,v,v,g,g,g,g,g,g,g,g,g)
            }
            7 -> {
                switchPadSequencer(view)
                sequencerVisibility(v,v,v,v,v,g,g,g,g,g,g,g,g)
            }
            8 -> {
                switchPadSequencer(view)
                sequencerVisibility(v,v,v,v,v,v,g,g,g,g,g,g,g)
            }
            9 -> {
                switchPadSequencer(view)
                sequencerVisibility(v,v,v,v,v,v,v,g,g,g,g,g,g)
            }
            10 -> {
                switchPadSequencer(view)
                sequencerVisibility(v,v,v,v,v,v,v,v,g,g,g,g,g)
            }
            11 -> {
                switchPadSequencer(view)
                sequencerVisibility(v,v,v,v,v,v,v,v,v,g,g,g,g)
            }
            12 -> {
                switchPadSequencer(view)
                sequencerVisibility(v,v,v,v,v,v,v,v,v,v,g,g,g)
            }
            13 -> {
                switchPadSequencer(view)
                sequencerVisibility(v,v,v,v,v,v,v,v,v,v,v,g,g)
            }
            14 -> {
                switchPadSequencer(view)
                sequencerVisibility(v,v,v,v,v,v,v,v,v,v,v,v,g)
            }
            15 -> {
                switchPadSequencer(view)
                sequencerVisibility(v,v,v,v,v,v,v,v,v,v,v,v,v)
            }
        }
    }
    
    private fun playTapTiming(a: MutableList<Int>,
                              b: MutableList<Int>,
                              c: MutableList<Int>,
                              d: MutableList<Int>,
                              e: MutableList<Int>,
                              f: MutableList<Int>,
                              g: MutableList<Int>,
                              h: MutableList<Int>,
                              i: MutableList<Int>,
                              j: MutableList<Int>,
                              k: MutableList<Int>,
                              l: MutableList<Int>,
                              m: MutableList<Int>,
                              n: MutableList<Int>,
                              o: MutableList<Int>) {
        if (a[sequencerSize] == 1) { tapTiming(R.id.include_main_view, R.drawable.my_ripple3) }
        if (b[sequencerSize] == 1) { tapTiming(R.id.include_main_view4, R.drawable.my_ripple4) }
        if (c[sequencerSize] == 1 && trackCount >= 3) { tapTiming(R.id.include_main_view7, R.drawable.my_ripple5) }
        if (d[sequencerSize] == 1 && trackCount >= 4) { tapTiming(R.id.include_main_view10, R.drawable.my_ripple6) }
        if (e[sequencerSize] == 1 && trackCount >= 5) { tapTiming(R.id.include_main_view13, R.drawable.my_ripple7) }
        if (f[sequencerSize] == 1 && trackCount >= 6) { tapTiming(R.id.include_main_view2, R.drawable.my_ripple3) }
        if (g[sequencerSize] == 1 && trackCount >= 7) { tapTiming(R.id.include_main_view5, R.drawable.my_ripple4) }
        if (h[sequencerSize] == 1 && trackCount >= 8) { tapTiming(R.id.include_main_view8, R.drawable.my_ripple5) }
        if (i[sequencerSize] == 1 && trackCount >= 9) { tapTiming(R.id.include_main_view11, R.drawable.my_ripple6) }
        if (j[sequencerSize] == 1 && trackCount >= 10) { tapTiming(R.id.include_main_view14, R.drawable.my_ripple7) }
        if (k[sequencerSize] == 1 && trackCount >= 11) { tapTiming(R.id.include_main_view3, R.drawable.my_ripple3) }
        if (l[sequencerSize] == 1 && trackCount >= 12) { tapTiming(R.id.include_main_view6, R.drawable.my_ripple4) }
        if (m[sequencerSize] == 1 && trackCount >= 13) { tapTiming(R.id.include_main_view9, R.drawable.my_ripple5) }
        if (n[sequencerSize] == 1 && trackCount >= 14) { tapTiming(R.id.include_main_view12, R.drawable.my_ripple6) }
        if (o[sequencerSize] == 1 && trackCount >= 15) { tapTiming(R.id.include_main_view15, R.drawable.my_ripple7) }
    }
    
    @SuppressLint("SetTextI18n")
    private fun tapEvent(a1: MutableList<Int>,
                         a2: MutableList<Int>,
                         a3: MutableList<Int>,
                         a4: MutableList<Int>,
                         a5: MutableList<Int>,
                         a6: MutableList<Int>,
                         a7: MutableList<Int>,
                         a8: MutableList<Int>,
                         a9: MutableList<Int>,
                         a10: MutableList<Int>,
                         a11: MutableList<Int>,
                         a12: MutableList<Int>,
                         a13: MutableList<Int>,
                         a14: MutableList<Int>,
                         a15: MutableList<Int>,
                         a16: MutableList<Int>, duplicate: Int , view: Int) {
        when {
            justification == 0 -> {
                findViewById<View>(view).findViewById<ImageView>(R.id.imageView).setImageResource(R.drawable.my_ripple2)
            }
            a1[sequencerSize] == 1 && justification == 1 && duplicate == 0 -> {
                findViewById<View>(view).findViewById<ImageView>(R.id.imageView).setImageResource(R.drawable.my_ripple2)
                hitScore++
                score++
                binding.editTitle.setText("PERIOD : $gameCount/8 SCORE : $score", TextView.BufferType.NORMAL)
                this@MainActivity.duplicate = 1
            }
            a2[sequencerSize] == 1 && justification == 2 && duplicate == 0 -> {
                findViewById<View>(view).findViewById<ImageView>(R.id.imageView).setImageResource(R.drawable.my_ripple2)
                hitScore++
                score++
                binding.editTitle.setText("PERIOD : $gameCount/8 SCORE : $score", TextView.BufferType.NORMAL)
                this@MainActivity.duplicate = 1
            }
            a3[sequencerSize] == 1 && justification == 3 && duplicate == 0 -> {
                findViewById<View>(view).findViewById<ImageView>(R.id.imageView).setImageResource(R.drawable.my_ripple2)
                hitScore++
                score++
                binding.editTitle.setText("PERIOD : $gameCount/8 SCORE : $score", TextView.BufferType.NORMAL)
                this@MainActivity.duplicate = 1
            }
            a4[sequencerSize] == 1 && justification == 4 && duplicate == 0 -> {
                findViewById<View>(view).findViewById<ImageView>(R.id.imageView).setImageResource(R.drawable.my_ripple2)
                hitScore++
                score++
                binding.editTitle.setText("PERIOD : $gameCount/8 SCORE : $score", TextView.BufferType.NORMAL)
                this@MainActivity.duplicate = 1
            }
            a5[sequencerSize] == 1 && justification == 5 && duplicate == 0 -> {
                findViewById<View>(view).findViewById<ImageView>(R.id.imageView).setImageResource(R.drawable.my_ripple2)
                hitScore++
                score++
                binding.editTitle.setText("PERIOD : $gameCount/8 SCORE : $score", TextView.BufferType.NORMAL)
                this@MainActivity.duplicate = 1
            }
            a6[sequencerSize] == 1 && justification == 6 && duplicate == 0 -> {
                findViewById<View>(view).findViewById<ImageView>(R.id.imageView).setImageResource(R.drawable.my_ripple2)
                hitScore++
                score++
                binding.editTitle.setText("PERIOD : $gameCount/8 SCORE : $score", TextView.BufferType.NORMAL)
                this@MainActivity.duplicate = 1
            }
            a7[sequencerSize] == 1 && justification == 7 && duplicate == 0 -> {
                findViewById<View>(view).findViewById<ImageView>(R.id.imageView).setImageResource(R.drawable.my_ripple2)
                hitScore++
                score++
                binding.editTitle.setText("PERIOD : $gameCount/8 SCORE : $score", TextView.BufferType.NORMAL)
                this@MainActivity.duplicate = 1
            }
            a8[sequencerSize] == 1 && justification == 8 && duplicate == 0 -> {
                findViewById<View>(view).findViewById<ImageView>(R.id.imageView).setImageResource(R.drawable.my_ripple2)
                hitScore++
                score++
                binding.editTitle.setText("PERIOD : $gameCount/8 SCORE : $score", TextView.BufferType.NORMAL)
                this@MainActivity.duplicate = 1
            }
            a9[sequencerSize] == 1 && justification == 9 && duplicate == 0 -> {
                findViewById<View>(view).findViewById<ImageView>(R.id.imageView).setImageResource(R.drawable.my_ripple2)
                hitScore++
                score++
                binding.editTitle.setText("PERIOD : $gameCount/8 SCORE : $score", TextView.BufferType.NORMAL)
                this@MainActivity.duplicate = 1
            }
            a10[sequencerSize] == 1 && justification == 10 && duplicate == 0 -> {
                findViewById<View>(view).findViewById<ImageView>(R.id.imageView).setImageResource(R.drawable.my_ripple2)
                hitScore++
                score++
                binding.editTitle.setText("PERIOD : $gameCount/8 SCORE : $score", TextView.BufferType.NORMAL)
                this@MainActivity.duplicate = 1
            }
            a11[sequencerSize] == 1 && justification == 11 && duplicate == 0 -> {
                findViewById<View>(view).findViewById<ImageView>(R.id.imageView).setImageResource(R.drawable.my_ripple2)
                hitScore++
                score++
                binding.editTitle.setText("PERIOD : $gameCount/8 SCORE : $score", TextView.BufferType.NORMAL)
                this@MainActivity.duplicate = 1
            }
            a12[sequencerSize] == 1 && justification == 12 && duplicate == 0 -> {
                findViewById<View>(view).findViewById<ImageView>(R.id.imageView).setImageResource(R.drawable.my_ripple2)
                hitScore++
                score++
                binding.editTitle.setText("PERIOD : $gameCount/8 SCORE : $score", TextView.BufferType.NORMAL)
                this@MainActivity.duplicate = 1
            }
            a13[sequencerSize] == 1 && justification == 13 && duplicate == 0 -> {
                findViewById<View>(view).findViewById<ImageView>(R.id.imageView).setImageResource(R.drawable.my_ripple2)
                hitScore++
                score++
                binding.editTitle.setText("PERIOD : $gameCount/8 SCORE : $score", TextView.BufferType.NORMAL)
                this@MainActivity.duplicate = 1
            }
            a14[sequencerSize] == 1 && justification == 14 && duplicate == 0 -> {
                findViewById<View>(view).findViewById<ImageView>(R.id.imageView).setImageResource(R.drawable.my_ripple2)
                hitScore++
                score++
                binding.editTitle.setText("PERIOD : $gameCount/8 SCORE : $score", TextView.BufferType.NORMAL)
                this@MainActivity.duplicate = 1
            }
            a15[sequencerSize] == 1 && justification == 15 && duplicate == 0 -> {
                findViewById<View>(view).findViewById<ImageView>(R.id.imageView).setImageResource(R.drawable.my_ripple2)
                hitScore++
                score++
                binding.editTitle.setText("PERIOD : $gameCount/8 SCORE : $score", TextView.BufferType.NORMAL)
                this@MainActivity.duplicate = 1
            }
            a16[sequencerSize] == 1 && justification == 16 && duplicate == 0 -> {
                findViewById<View>(view).findViewById<ImageView>(R.id.imageView).setImageResource(R.drawable.my_ripple2)
                hitScore++
                score++
                binding.editTitle.setText("PERIOD : $gameCount/8 SCORE : $score", TextView.BufferType.NORMAL)
                this@MainActivity.duplicate = 1
            }
            a1[sequencerSize] == 1 && justification == 1 && duplicate == 1 -> {
                findViewById<View>(view).findViewById<ImageView>(R.id.imageView).setImageResource(R.drawable.my_ripple8)
                missScore++
                score--
                binding.editTitle.setText("PERIOD : $gameCount/8 SCORE : $score", TextView.BufferType.NORMAL)
            }
            a2[sequencerSize] == 1 && justification == 2 && duplicate == 1 -> {
                findViewById<View>(view).findViewById<ImageView>(R.id.imageView).setImageResource(R.drawable.my_ripple8)
                missScore++
                score--
                binding.editTitle.setText("PERIOD : $gameCount/8 SCORE : $score", TextView.BufferType.NORMAL)
            }
            a3[sequencerSize] == 1 && justification == 3 && duplicate == 1 -> {
                findViewById<View>(view).findViewById<ImageView>(R.id.imageView).setImageResource(R.drawable.my_ripple8)
                missScore++
                score--
                binding.editTitle.setText("PERIOD : $gameCount/8 SCORE : $score", TextView.BufferType.NORMAL)
            }
            a4[sequencerSize] == 1 && justification == 4 && duplicate == 1 -> {
                findViewById<View>(view).findViewById<ImageView>(R.id.imageView).setImageResource(R.drawable.my_ripple8)
                missScore++
                score--
                binding.editTitle.setText("PERIOD : $gameCount/8 SCORE : $score", TextView.BufferType.NORMAL)
            }
            a5[sequencerSize] == 1 && justification == 5 && duplicate == 1 -> {
                findViewById<View>(view).findViewById<ImageView>(R.id.imageView).setImageResource(R.drawable.my_ripple8)
                missScore++
                score--
                binding.editTitle.setText("PERIOD : $gameCount/8 SCORE : $score", TextView.BufferType.NORMAL)
            }
            a6[sequencerSize] == 1 && justification == 6 && duplicate == 1 -> {
                findViewById<View>(view).findViewById<ImageView>(R.id.imageView).setImageResource(R.drawable.my_ripple8)
                missScore++
                score--
                binding.editTitle.setText("PERIOD : $gameCount/8 SCORE : $score", TextView.BufferType.NORMAL)
            }
            a7[sequencerSize] == 1 && justification == 7 && duplicate == 1 -> {
                findViewById<View>(view).findViewById<ImageView>(R.id.imageView).setImageResource(R.drawable.my_ripple8)
                missScore++
                score--
                binding.editTitle.setText("PERIOD : $gameCount/8 SCORE : $score", TextView.BufferType.NORMAL)
            }
            a8[sequencerSize] == 1 && justification == 8 && duplicate == 1 -> {
                findViewById<View>(view).findViewById<ImageView>(R.id.imageView).setImageResource(R.drawable.my_ripple8)
                missScore++
                score--
                binding.editTitle.setText("PERIOD : $gameCount/8 SCORE : $score", TextView.BufferType.NORMAL)
            }
            a9[sequencerSize] == 1 && justification == 9 && duplicate == 1 -> {
                findViewById<View>(view).findViewById<ImageView>(R.id.imageView).setImageResource(R.drawable.my_ripple8)
                missScore++
                score--
                binding.editTitle.setText("PERIOD : $gameCount/8 SCORE : $score", TextView.BufferType.NORMAL)
            }
            a10[sequencerSize] == 1 && justification == 10 && duplicate == 1 -> {
                findViewById<View>(view).findViewById<ImageView>(R.id.imageView).setImageResource(R.drawable.my_ripple8)
                missScore++
                score--
                binding.editTitle.setText("PERIOD : $gameCount/8 SCORE : $score", TextView.BufferType.NORMAL)
            }
            a11[sequencerSize] == 1 && justification == 11 && duplicate == 1 -> {
                findViewById<View>(view).findViewById<ImageView>(R.id.imageView).setImageResource(R.drawable.my_ripple8)
                missScore++
                score--
                binding.editTitle.setText("PERIOD : $gameCount/8 SCORE : $score", TextView.BufferType.NORMAL)
            }
            a12[sequencerSize] == 1 && justification == 12 && duplicate == 1 -> {
                findViewById<View>(view).findViewById<ImageView>(R.id.imageView).setImageResource(R.drawable.my_ripple8)
                missScore++
                score--
                binding.editTitle.setText("PERIOD : $gameCount/8 SCORE : $score", TextView.BufferType.NORMAL)
            }
            a13[sequencerSize] == 1 && justification == 13 && duplicate == 1 -> {
                findViewById<View>(view).findViewById<ImageView>(R.id.imageView).setImageResource(R.drawable.my_ripple8)
                missScore++
                score--
                binding.editTitle.setText("PERIOD : $gameCount/8 SCORE : $score", TextView.BufferType.NORMAL)
            }
            a14[sequencerSize] == 1 && justification == 14 && duplicate == 1 -> {
                findViewById<View>(view).findViewById<ImageView>(R.id.imageView).setImageResource(R.drawable.my_ripple8)
                missScore++
                score--
                binding.editTitle.setText("PERIOD : $gameCount/8 SCORE : $score", TextView.BufferType.NORMAL)
            }
            a15[sequencerSize] == 1 && justification == 15 && duplicate == 1 -> {
                findViewById<View>(view).findViewById<ImageView>(R.id.imageView).setImageResource(R.drawable.my_ripple8)
                missScore++
                score--
                binding.editTitle.setText("PERIOD : $gameCount/8 SCORE : $score", TextView.BufferType.NORMAL)
            }
            a16[sequencerSize] == 1 && justification == 16 && duplicate == 1 -> {
                findViewById<View>(view).findViewById<ImageView>(R.id.imageView).setImageResource(R.drawable.my_ripple8)
                missScore++
                score--
                binding.editTitle.setText("PERIOD : $gameCount/8 SCORE : $score", TextView.BufferType.NORMAL)
            }
            a1[sequencerSize] == 1 && justification != 0 && justification != 1 -> {
                findViewById<View>(view).findViewById<ImageView>(R.id.imageView).setImageResource(R.drawable.my_ripple8)
                missScore++
                score--
                binding.editTitle.setText("PERIOD : $gameCount/8 SCORE : $score", TextView.BufferType.NORMAL)
            }
            a2[sequencerSize] == 1 && justification != 0 && justification != 2 -> {
                findViewById<View>(view).findViewById<ImageView>(R.id.imageView).setImageResource(R.drawable.my_ripple8)
                missScore++
                score--
                binding.editTitle.setText("PERIOD : $gameCount/8 SCORE : $score", TextView.BufferType.NORMAL)
            }
            a3[sequencerSize] == 1 && justification != 0 && justification != 3 -> {
                findViewById<View>(view).findViewById<ImageView>(R.id.imageView).setImageResource(R.drawable.my_ripple8)
                missScore++
                score--
                binding.editTitle.setText("PERIOD : $gameCount/8 SCORE : $score", TextView.BufferType.NORMAL)
            }
            a4[sequencerSize] == 1 && justification != 0 && justification != 4 -> {
                findViewById<View>(view).findViewById<ImageView>(R.id.imageView).setImageResource(R.drawable.my_ripple8)
                missScore++
                score--
                binding.editTitle.setText("PERIOD : $gameCount/8 SCORE : $score", TextView.BufferType.NORMAL)
            }
            a5[sequencerSize] == 1 && justification != 0 && justification != 5 -> {
                findViewById<View>(view).findViewById<ImageView>(R.id.imageView).setImageResource(R.drawable.my_ripple8)
                missScore++
                score--
                binding.editTitle.setText("PERIOD : $gameCount/8 SCORE : $score", TextView.BufferType.NORMAL)
            }
            a6[sequencerSize] == 1 && justification != 0 && justification != 6 -> {
                findViewById<View>(view).findViewById<ImageView>(R.id.imageView).setImageResource(R.drawable.my_ripple8)
                missScore++
                score--
                binding.editTitle.setText("PERIOD : $gameCount/8 SCORE : $score", TextView.BufferType.NORMAL)
            }
            a7[sequencerSize] == 1 && justification != 0 && justification != 7 -> {
                findViewById<View>(view).findViewById<ImageView>(R.id.imageView).setImageResource(R.drawable.my_ripple8)
                missScore++
                score--
                binding.editTitle.setText("PERIOD : $gameCount/8 SCORE : $score", TextView.BufferType.NORMAL)
            }
            a8[sequencerSize] == 1 && justification != 0 && justification != 8 -> {
                findViewById<View>(view).findViewById<ImageView>(R.id.imageView).setImageResource(R.drawable.my_ripple8)
                missScore++
                score--
                binding.editTitle.setText("PERIOD : $gameCount/8 SCORE : $score", TextView.BufferType.NORMAL)
            }
            a9[sequencerSize] == 1 && justification != 0 && justification != 9 -> {
                findViewById<View>(view).findViewById<ImageView>(R.id.imageView).setImageResource(R.drawable.my_ripple8)
                missScore++
                score--
                binding.editTitle.setText("PERIOD : $gameCount/8 SCORE : $score", TextView.BufferType.NORMAL)
            }
            a10[sequencerSize] == 1 && justification != 0 && justification != 10 -> {
                findViewById<View>(view).findViewById<ImageView>(R.id.imageView).setImageResource(R.drawable.my_ripple8)
                missScore++
                score--
                binding.editTitle.setText("PERIOD : $gameCount/8 SCORE : $score", TextView.BufferType.NORMAL)
            }
            a11[sequencerSize] == 1 && justification != 0 && justification != 11 -> {
                findViewById<View>(view).findViewById<ImageView>(R.id.imageView).setImageResource(R.drawable.my_ripple8)
                missScore++
                score--
                binding.editTitle.setText("PERIOD : $gameCount/8 SCORE : $score", TextView.BufferType.NORMAL)
            }
            a12[sequencerSize] == 1 && justification != 0 && justification != 12 -> {
                findViewById<View>(view).findViewById<ImageView>(R.id.imageView).setImageResource(R.drawable.my_ripple8)
                missScore++
                score--
                binding.editTitle.setText("PERIOD : $gameCount/8 SCORE : $score", TextView.BufferType.NORMAL)
            }
            a13[sequencerSize] == 1 && justification != 0 && justification != 13 -> {
                findViewById<View>(view).findViewById<ImageView>(R.id.imageView).setImageResource(R.drawable.my_ripple8)
                missScore++
                score--
                binding.editTitle.setText("PERIOD : $gameCount/8 SCORE : $score", TextView.BufferType.NORMAL)
            }
            a14[sequencerSize] == 1 && justification != 0 && justification != 14 -> {
                findViewById<View>(view).findViewById<ImageView>(R.id.imageView).setImageResource(R.drawable.my_ripple8)
                missScore++
                score--
                binding.editTitle.setText("PERIOD : $gameCount/8 SCORE : $score", TextView.BufferType.NORMAL)
            }
            a15[sequencerSize] == 1 && justification != 0 && justification != 15 -> {
                findViewById<View>(view).findViewById<ImageView>(R.id.imageView).setImageResource(R.drawable.my_ripple8)
                missScore++
                score--
                binding.editTitle.setText("PERIOD : $gameCount/8 SCORE : $score", TextView.BufferType.NORMAL)
            }
            a16[sequencerSize] == 1 && justification != 0 && justification != 16 -> {
                findViewById<View>(view).findViewById<ImageView>(R.id.imageView).setImageResource(R.drawable.my_ripple8)
                missScore++
                score--
                binding.editTitle.setText("PERIOD : $gameCount/8 SCORE : $score", TextView.BufferType.NORMAL)
            }
        }
    }

    private fun duplicateCheck(just: Int) {
        duplicate = 0
        duplicate2 = 0
        duplicate3 = 0
        duplicate4 = 0
        duplicate5 = 0
        duplicate6 = 0
        duplicate7 = 0
        duplicate8 = 0
        duplicate9 = 0
        duplicate10 = 0
        duplicate11 = 0
        duplicate12 = 0
        duplicate13 = 0
        duplicate14 = 0
        duplicate15 = 0
        justification = just
    }

    private fun scoreCount(a1: MutableList<Int>,
                           b1: MutableList<Int>,
                           c1: MutableList<Int>,
                           d1: MutableList<Int>,
                           e1: MutableList<Int>,
                           f1: MutableList<Int>,
                           g1: MutableList<Int>,
                           h1: MutableList<Int>,
                           i1: MutableList<Int>,
                           j1: MutableList<Int>,
                           k1: MutableList<Int>,
                           l1: MutableList<Int>,
                           m1: MutableList<Int>,
                           n1: MutableList<Int>,
                           o1: MutableList<Int>): Int {
        return a1.filter { it == 1 }.size + b1.filter { it == 1 }.size + c1.filter { it == 1 }.size + d1.filter { it == 1 }.size + e1.filter { it == 1 }.size + f1.filter { it == 1 }.size + g1.filter { it == 1 }.size + h1.filter { it == 1 }.size + i1.filter { it == 1 }.size + j1.filter { it == 1 }.size + k1.filter { it == 1 }.size + l1.filter { it == 1 }.size + m1.filter { it == 1 }.size + n1.filter { it == 1 }.size + o1.filter { it == 1 }.size
    }

    private fun x53() {
        findViewById<View>(R.id.include_main_view2).visibility = View.VISIBLE
        findViewById<View>(R.id.include_main_view5).visibility = View.VISIBLE
        findViewById<View>(R.id.include_main_view3).visibility = View.VISIBLE
        findViewById<View>(R.id.include_main_view6).visibility = View.VISIBLE
        findViewById<View>(R.id.include_main_view7).visibility = View.VISIBLE
        findViewById<View>(R.id.include_main_view8).visibility = View.VISIBLE
        findViewById<View>(R.id.include_main_view9).visibility = View.VISIBLE
        findViewById<View>(R.id.include_main_view10).visibility = View.VISIBLE
        findViewById<View>(R.id.include_main_view11).visibility = View.VISIBLE
        findViewById<View>(R.id.include_main_view12).visibility = View.VISIBLE
        findViewById<View>(R.id.include_main_view13).visibility = View.VISIBLE
        findViewById<View>(R.id.include_main_view14).visibility = View.VISIBLE
        findViewById<View>(R.id.include_main_view15).visibility = View.VISIBLE
        findViewById<View>(R.id.include_view2).visibility = View.VISIBLE
        findViewById<View>(R.id.include_view5).visibility = View.VISIBLE
        findViewById<View>(R.id.include_view3).visibility = View.VISIBLE
        findViewById<View>(R.id.include_view6).visibility = View.VISIBLE
        findViewById<View>(R.id.include_view7).visibility = View.VISIBLE
        findViewById<View>(R.id.include_view8).visibility = View.VISIBLE
        findViewById<View>(R.id.include_view9).visibility = View.VISIBLE
        findViewById<View>(R.id.include_view10).visibility = View.VISIBLE
        findViewById<View>(R.id.include_view11).visibility = View.VISIBLE
        findViewById<View>(R.id.include_view12).visibility = View.VISIBLE
        findViewById<View>(R.id.include_view13).visibility = View.VISIBLE
        findViewById<View>(R.id.include_view14).visibility = View.VISIBLE
        findViewById<View>(R.id.include_view15).visibility = View.VISIBLE
        padCheck = 53
        padSequence = 0
        binding.gridView.visibility = View.INVISIBLE
        binding.notes.visibility = View.GONE
    }
    private fun x43() {
        findViewById<View>(R.id.include_main_view2).visibility = View.VISIBLE
        findViewById<View>(R.id.include_main_view5).visibility = View.VISIBLE
        findViewById<View>(R.id.include_main_view3).visibility = View.VISIBLE
        findViewById<View>(R.id.include_main_view6).visibility = View.VISIBLE
        findViewById<View>(R.id.include_main_view7).visibility = View.VISIBLE
        findViewById<View>(R.id.include_main_view8).visibility = View.VISIBLE
        findViewById<View>(R.id.include_main_view9).visibility = View.VISIBLE
        findViewById<View>(R.id.include_main_view10).visibility = View.VISIBLE
        findViewById<View>(R.id.include_main_view11).visibility = View.VISIBLE
        findViewById<View>(R.id.include_main_view12).visibility = View.VISIBLE
        findViewById<View>(R.id.include_main_view13).visibility = View.GONE
        findViewById<View>(R.id.include_main_view14).visibility = View.GONE
        findViewById<View>(R.id.include_main_view15).visibility = View.GONE
        findViewById<View>(R.id.include_view2).visibility = View.VISIBLE
        findViewById<View>(R.id.include_view5).visibility = View.VISIBLE
        findViewById<View>(R.id.include_view3).visibility = View.VISIBLE
        findViewById<View>(R.id.include_view6).visibility = View.VISIBLE
        findViewById<View>(R.id.include_view7).visibility = View.VISIBLE
        findViewById<View>(R.id.include_view8).visibility = View.VISIBLE
        findViewById<View>(R.id.include_view9).visibility = View.VISIBLE
        findViewById<View>(R.id.include_view10).visibility = View.VISIBLE
        findViewById<View>(R.id.include_view11).visibility = View.VISIBLE
        findViewById<View>(R.id.include_view12).visibility = View.VISIBLE
        findViewById<View>(R.id.include_view13).visibility = View.GONE
        findViewById<View>(R.id.include_view14).visibility = View.GONE
        findViewById<View>(R.id.include_view15).visibility = View.GONE
        padCheck = 43
        padSequence = 0
        binding.gridView.visibility = View.INVISIBLE
        binding.notes.visibility = View.GONE
    }
    private fun x33() {
        findViewById<View>(R.id.include_main_view2).visibility = View.VISIBLE
        findViewById<View>(R.id.include_main_view5).visibility = View.VISIBLE
        findViewById<View>(R.id.include_main_view3).visibility = View.VISIBLE
        findViewById<View>(R.id.include_main_view6).visibility = View.VISIBLE
        findViewById<View>(R.id.include_main_view7).visibility = View.VISIBLE
        findViewById<View>(R.id.include_main_view8).visibility = View.VISIBLE
        findViewById<View>(R.id.include_main_view9).visibility = View.VISIBLE
        findViewById<View>(R.id.include_main_view10).visibility = View.GONE
        findViewById<View>(R.id.include_main_view11).visibility = View.GONE
        findViewById<View>(R.id.include_main_view12).visibility = View.GONE
        findViewById<View>(R.id.include_main_view13).visibility = View.GONE
        findViewById<View>(R.id.include_main_view14).visibility = View.GONE
        findViewById<View>(R.id.include_main_view15).visibility = View.GONE
        findViewById<View>(R.id.include_view2).visibility = View.VISIBLE
        findViewById<View>(R.id.include_view5).visibility = View.VISIBLE
        findViewById<View>(R.id.include_view3).visibility = View.VISIBLE
        findViewById<View>(R.id.include_view6).visibility = View.VISIBLE
        findViewById<View>(R.id.include_view7).visibility = View.VISIBLE
        findViewById<View>(R.id.include_view8).visibility = View.VISIBLE
        findViewById<View>(R.id.include_view9).visibility = View.VISIBLE
        findViewById<View>(R.id.include_view10).visibility = View.GONE
        findViewById<View>(R.id.include_view11).visibility = View.GONE
        findViewById<View>(R.id.include_view12).visibility = View.GONE
        findViewById<View>(R.id.include_view13).visibility = View.GONE
        findViewById<View>(R.id.include_view14).visibility = View.GONE
        findViewById<View>(R.id.include_view15).visibility = View.GONE
        padCheck = 33
        padSequence = 0
        binding.gridView.visibility = View.INVISIBLE
        binding.notes.visibility = View.GONE
    }
    private fun x52() {
        findViewById<View>(R.id.include_main_view2).visibility = View.VISIBLE
        findViewById<View>(R.id.include_main_view5).visibility = View.VISIBLE
        findViewById<View>(R.id.include_main_view3).visibility = View.GONE
        findViewById<View>(R.id.include_main_view6).visibility = View.GONE
        findViewById<View>(R.id.include_main_view7).visibility = View.VISIBLE
        findViewById<View>(R.id.include_main_view8).visibility = View.VISIBLE
        findViewById<View>(R.id.include_main_view9).visibility = View.GONE
        findViewById<View>(R.id.include_main_view10).visibility = View.VISIBLE
        findViewById<View>(R.id.include_main_view11).visibility = View.VISIBLE
        findViewById<View>(R.id.include_main_view12).visibility = View.GONE
        findViewById<View>(R.id.include_main_view13).visibility = View.VISIBLE
        findViewById<View>(R.id.include_main_view14).visibility = View.VISIBLE
        findViewById<View>(R.id.include_main_view15).visibility = View.GONE
        findViewById<View>(R.id.include_view2).visibility = View.VISIBLE
        findViewById<View>(R.id.include_view5).visibility = View.VISIBLE
        findViewById<View>(R.id.include_view7).visibility = View.VISIBLE
        findViewById<View>(R.id.include_view8).visibility = View.VISIBLE
        findViewById<View>(R.id.include_view10).visibility = View.VISIBLE
        findViewById<View>(R.id.include_view11).visibility = View.VISIBLE
        findViewById<View>(R.id.include_view13).visibility = View.VISIBLE
        findViewById<View>(R.id.include_view14).visibility = View.VISIBLE
        findViewById<View>(R.id.include_view3).visibility = View.GONE
        findViewById<View>(R.id.include_view6).visibility = View.GONE
        findViewById<View>(R.id.include_view9).visibility = View.GONE
        findViewById<View>(R.id.include_view12).visibility = View.GONE
        findViewById<View>(R.id.include_view15).visibility = View.GONE
        padCheck = 52
        padSequence = 0
        binding.gridView.visibility = View.INVISIBLE
        binding.notes.visibility = View.GONE
    }
    private fun x42() {
        findViewById<View>(R.id.include_main_view2).visibility = View.VISIBLE
        findViewById<View>(R.id.include_main_view5).visibility = View.VISIBLE
        findViewById<View>(R.id.include_main_view3).visibility = View.GONE
        findViewById<View>(R.id.include_main_view6).visibility = View.GONE
        findViewById<View>(R.id.include_main_view7).visibility = View.VISIBLE
        findViewById<View>(R.id.include_main_view8).visibility = View.VISIBLE
        findViewById<View>(R.id.include_main_view9).visibility = View.GONE
        findViewById<View>(R.id.include_main_view10).visibility = View.VISIBLE
        findViewById<View>(R.id.include_main_view11).visibility = View.VISIBLE
        findViewById<View>(R.id.include_main_view12).visibility = View.GONE
        findViewById<View>(R.id.include_main_view13).visibility = View.GONE
        findViewById<View>(R.id.include_main_view14).visibility = View.GONE
        findViewById<View>(R.id.include_main_view15).visibility = View.GONE
        findViewById<View>(R.id.include_view2).visibility = View.VISIBLE
        findViewById<View>(R.id.include_view5).visibility = View.VISIBLE
        findViewById<View>(R.id.include_view7).visibility = View.VISIBLE
        findViewById<View>(R.id.include_view8).visibility = View.VISIBLE
        findViewById<View>(R.id.include_view10).visibility = View.VISIBLE
        findViewById<View>(R.id.include_view11).visibility = View.VISIBLE
        findViewById<View>(R.id.include_view3).visibility = View.GONE
        findViewById<View>(R.id.include_view6).visibility = View.GONE
        findViewById<View>(R.id.include_view9).visibility = View.GONE
        findViewById<View>(R.id.include_view12).visibility = View.GONE
        findViewById<View>(R.id.include_view13).visibility = View.GONE
        findViewById<View>(R.id.include_view14).visibility = View.GONE
        findViewById<View>(R.id.include_view15).visibility = View.GONE
        padCheck = 42
        padSequence = 0
        binding.gridView.visibility = View.INVISIBLE
        binding.notes.visibility = View.GONE
    }
    private fun x32() {
        findViewById<View>(R.id.include_main_view2).visibility = View.VISIBLE
        findViewById<View>(R.id.include_main_view5).visibility = View.VISIBLE
        findViewById<View>(R.id.include_main_view3).visibility = View.GONE
        findViewById<View>(R.id.include_main_view6).visibility = View.GONE
        findViewById<View>(R.id.include_main_view7).visibility = View.VISIBLE
        findViewById<View>(R.id.include_main_view8).visibility = View.VISIBLE
        findViewById<View>(R.id.include_main_view9).visibility = View.GONE
        findViewById<View>(R.id.include_main_view10).visibility = View.GONE
        findViewById<View>(R.id.include_main_view11).visibility = View.GONE
        findViewById<View>(R.id.include_main_view12).visibility = View.GONE
        findViewById<View>(R.id.include_main_view13).visibility = View.GONE
        findViewById<View>(R.id.include_main_view14).visibility = View.GONE
        findViewById<View>(R.id.include_main_view15).visibility = View.GONE
        findViewById<View>(R.id.include_view2).visibility = View.VISIBLE
        findViewById<View>(R.id.include_view5).visibility = View.VISIBLE
        findViewById<View>(R.id.include_view7).visibility = View.VISIBLE
        findViewById<View>(R.id.include_view8).visibility = View.VISIBLE
        findViewById<View>(R.id.include_view3).visibility = View.GONE
        findViewById<View>(R.id.include_view6).visibility = View.GONE
        findViewById<View>(R.id.include_view9).visibility = View.GONE
        findViewById<View>(R.id.include_view10).visibility = View.GONE
        findViewById<View>(R.id.include_view11).visibility = View.GONE
        findViewById<View>(R.id.include_view12).visibility = View.GONE
        findViewById<View>(R.id.include_view13).visibility = View.GONE
        findViewById<View>(R.id.include_view14).visibility = View.GONE
        findViewById<View>(R.id.include_view15).visibility = View.GONE
        padCheck = 32
        padSequence = 0
        binding.gridView.visibility = View.INVISIBLE
        binding.notes.visibility = View.GONE
    }
    private fun x22() {
        findViewById<View>(R.id.include_main_view2).visibility = View.VISIBLE
        findViewById<View>(R.id.include_main_view5).visibility = View.VISIBLE
        findViewById<View>(R.id.include_main_view3).visibility = View.GONE
        findViewById<View>(R.id.include_main_view6).visibility = View.GONE
        findViewById<View>(R.id.include_main_view7).visibility = View.GONE
        findViewById<View>(R.id.include_main_view8).visibility = View.GONE
        findViewById<View>(R.id.include_main_view9).visibility = View.GONE
        findViewById<View>(R.id.include_main_view10).visibility = View.GONE
        findViewById<View>(R.id.include_main_view11).visibility = View.GONE
        findViewById<View>(R.id.include_main_view12).visibility = View.GONE
        findViewById<View>(R.id.include_main_view13).visibility = View.GONE
        findViewById<View>(R.id.include_main_view14).visibility = View.GONE
        findViewById<View>(R.id.include_main_view15).visibility = View.GONE
        findViewById<View>(R.id.include_view2).visibility = View.VISIBLE
        findViewById<View>(R.id.include_view5).visibility = View.VISIBLE
        findViewById<View>(R.id.include_view3).visibility = View.GONE
        findViewById<View>(R.id.include_view6).visibility = View.GONE
        findViewById<View>(R.id.include_view7).visibility = View.GONE
        findViewById<View>(R.id.include_view8).visibility = View.GONE
        findViewById<View>(R.id.include_view9).visibility = View.GONE
        findViewById<View>(R.id.include_view10).visibility = View.GONE
        findViewById<View>(R.id.include_view11).visibility = View.GONE
        findViewById<View>(R.id.include_view12).visibility = View.GONE
        findViewById<View>(R.id.include_view13).visibility = View.GONE
        findViewById<View>(R.id.include_view14).visibility = View.GONE
        findViewById<View>(R.id.include_view15).visibility = View.GONE
        padCheck = 22
        padSequence = 0
        binding.gridView.visibility = View.INVISIBLE
        binding.notes.visibility = View.GONE
    }
    private fun x21() {
        findViewById<View>(R.id.include_main_view2).visibility = View.GONE
        findViewById<View>(R.id.include_main_view5).visibility = View.GONE
        findViewById<View>(R.id.include_main_view3).visibility = View.GONE
        findViewById<View>(R.id.include_main_view6).visibility = View.GONE
        findViewById<View>(R.id.include_main_view7).visibility = View.GONE
        findViewById<View>(R.id.include_main_view8).visibility = View.GONE
        findViewById<View>(R.id.include_main_view9).visibility = View.GONE
        findViewById<View>(R.id.include_main_view10).visibility = View.GONE
        findViewById<View>(R.id.include_main_view11).visibility = View.GONE
        findViewById<View>(R.id.include_main_view12).visibility = View.GONE
        findViewById<View>(R.id.include_main_view13).visibility = View.GONE
        findViewById<View>(R.id.include_main_view14).visibility = View.GONE
        findViewById<View>(R.id.include_main_view15).visibility = View.GONE
        findViewById<View>(R.id.include_view2).visibility = View.GONE
        findViewById<View>(R.id.include_view3).visibility = View.GONE
        findViewById<View>(R.id.include_view5).visibility = View.GONE
        findViewById<View>(R.id.include_view6).visibility = View.GONE
        findViewById<View>(R.id.include_view7).visibility = View.GONE
        findViewById<View>(R.id.include_view8).visibility = View.GONE
        findViewById<View>(R.id.include_view9).visibility = View.GONE
        findViewById<View>(R.id.include_view10).visibility = View.GONE
        findViewById<View>(R.id.include_view11).visibility = View.GONE
        findViewById<View>(R.id.include_view12).visibility = View.GONE
        findViewById<View>(R.id.include_view13).visibility = View.GONE
        findViewById<View>(R.id.include_view14).visibility = View.GONE
        findViewById<View>(R.id.include_view15).visibility = View.GONE
        padCheck = 21
        padSequence = 0
        binding.gridView.visibility = View.INVISIBLE
        binding.notes.visibility = View.GONE
    }
    private fun x51() {
        findViewById<View>(R.id.include_main_view7).visibility = View.VISIBLE
        findViewById<View>(R.id.include_main_view10).visibility = View.VISIBLE
        findViewById<View>(R.id.include_main_view13).visibility = View.VISIBLE
        findViewById<View>(R.id.include_main_view2).visibility = View.GONE
        findViewById<View>(R.id.include_main_view3).visibility = View.GONE
        findViewById<View>(R.id.include_main_view5).visibility = View.GONE
        findViewById<View>(R.id.include_main_view6).visibility = View.GONE
        findViewById<View>(R.id.include_main_view8).visibility = View.GONE
        findViewById<View>(R.id.include_main_view9).visibility = View.GONE
        findViewById<View>(R.id.include_main_view11).visibility = View.GONE
        findViewById<View>(R.id.include_main_view12).visibility = View.GONE
        findViewById<View>(R.id.include_main_view14).visibility = View.GONE
        findViewById<View>(R.id.include_main_view15).visibility = View.GONE
        findViewById<View>(R.id.include_view7).visibility = View.VISIBLE
        findViewById<View>(R.id.include_view10).visibility = View.VISIBLE
        findViewById<View>(R.id.include_view13).visibility = View.VISIBLE
        findViewById<View>(R.id.include_view2).visibility = View.GONE
        findViewById<View>(R.id.include_view3).visibility = View.GONE
        findViewById<View>(R.id.include_view5).visibility = View.GONE
        findViewById<View>(R.id.include_view6).visibility = View.GONE
        findViewById<View>(R.id.include_view8).visibility = View.GONE
        findViewById<View>(R.id.include_view9).visibility = View.GONE
        findViewById<View>(R.id.include_view11).visibility = View.GONE
        findViewById<View>(R.id.include_view12).visibility = View.GONE
        findViewById<View>(R.id.include_view14).visibility = View.GONE
        findViewById<View>(R.id.include_view15).visibility = View.GONE
        padCheck = 51
        padSequence = 0
        binding.gridView.visibility = View.INVISIBLE
        binding.notes.visibility = View.GONE
    }
    private fun x41(){
        findViewById<View>(R.id.include_main_view7).visibility = View.VISIBLE
        findViewById<View>(R.id.include_main_view10).visibility = View.VISIBLE
        findViewById<View>(R.id.include_main_view2).visibility = View.GONE
        findViewById<View>(R.id.include_main_view3).visibility = View.GONE
        findViewById<View>(R.id.include_main_view5).visibility = View.GONE
        findViewById<View>(R.id.include_main_view6).visibility = View.GONE
        findViewById<View>(R.id.include_main_view8).visibility = View.GONE
        findViewById<View>(R.id.include_main_view9).visibility = View.GONE
        findViewById<View>(R.id.include_main_view11).visibility = View.GONE
        findViewById<View>(R.id.include_main_view12).visibility = View.GONE
        findViewById<View>(R.id.include_main_view13).visibility = View.GONE
        findViewById<View>(R.id.include_main_view14).visibility = View.GONE
        findViewById<View>(R.id.include_main_view15).visibility = View.GONE
        findViewById<View>(R.id.include_view7).visibility = View.VISIBLE
        findViewById<View>(R.id.include_view10).visibility = View.VISIBLE
        findViewById<View>(R.id.include_view2).visibility = View.GONE
        findViewById<View>(R.id.include_view3).visibility = View.GONE
        findViewById<View>(R.id.include_view5).visibility = View.GONE
        findViewById<View>(R.id.include_view6).visibility = View.GONE
        findViewById<View>(R.id.include_view8).visibility = View.GONE
        findViewById<View>(R.id.include_view9).visibility = View.GONE
        findViewById<View>(R.id.include_view11).visibility = View.GONE
        findViewById<View>(R.id.include_view12).visibility = View.GONE
        findViewById<View>(R.id.include_view13).visibility = View.GONE
        findViewById<View>(R.id.include_view14).visibility = View.GONE
        findViewById<View>(R.id.include_view15).visibility = View.GONE
        padCheck = 41
        padSequence = 0
        binding.gridView.visibility = View.INVISIBLE
        binding.notes.visibility = View.GONE
    }
    private fun x31() {
        findViewById<View>(R.id.include_main_view7).visibility = View.VISIBLE
        findViewById<View>(R.id.include_main_view2).visibility = View.GONE
        findViewById<View>(R.id.include_main_view3).visibility = View.GONE
        findViewById<View>(R.id.include_main_view5).visibility = View.GONE
        findViewById<View>(R.id.include_main_view6).visibility = View.GONE
        findViewById<View>(R.id.include_main_view8).visibility = View.GONE
        findViewById<View>(R.id.include_main_view9).visibility = View.GONE
        findViewById<View>(R.id.include_main_view10).visibility = View.GONE
        findViewById<View>(R.id.include_main_view11).visibility = View.GONE
        findViewById<View>(R.id.include_main_view12).visibility = View.GONE
        findViewById<View>(R.id.include_main_view13).visibility = View.GONE
        findViewById<View>(R.id.include_main_view14).visibility = View.GONE
        findViewById<View>(R.id.include_main_view15).visibility = View.GONE
        findViewById<View>(R.id.include_view7).visibility = View.VISIBLE
        findViewById<View>(R.id.include_view2).visibility = View.GONE
        findViewById<View>(R.id.include_view3).visibility = View.GONE
        findViewById<View>(R.id.include_view5).visibility = View.GONE
        findViewById<View>(R.id.include_view6).visibility = View.GONE
        findViewById<View>(R.id.include_view8).visibility = View.GONE
        findViewById<View>(R.id.include_view9).visibility = View.GONE
        findViewById<View>(R.id.include_view10).visibility = View.GONE
        findViewById<View>(R.id.include_view11).visibility = View.GONE
        findViewById<View>(R.id.include_view12).visibility = View.GONE
        findViewById<View>(R.id.include_view13).visibility = View.GONE
        findViewById<View>(R.id.include_view14).visibility = View.GONE
        findViewById<View>(R.id.include_view15).visibility = View.GONE
        padCheck = 31
        padSequence = 0
        binding.gridView.visibility = View.INVISIBLE
        binding.notes.visibility = View.GONE
    }

    private fun stickyImmersiveMode() {
        val decorView = window.decorView
        decorView.systemUiVisibility = (View.SYSTEM_UI_FLAG_IMMERSIVE_STICKY
                or View.SYSTEM_UI_FLAG_FULLSCREEN
                or View.SYSTEM_UI_FLAG_HIDE_NAVIGATION)
        decorView.setOnSystemUiVisibilityChangeListener { visibility ->
            if (visibility and View.SYSTEM_UI_FLAG_FULLSCREEN == 0) {
                Log.d("debug", "The system bars are visible")
            } else {
                Log.d("debug", "The system bars are NOT visible")
            }
        }
    }

    private fun loadRewardedAd() {
        val adRequest = AdRequest.Builder().build()

        RewardedAd.load(this, "ca-app-pub-3940256099942544/5224354917", adRequest, object : RewardedAdLoadCallback() {
            override fun onAdFailedToLoad(adError: LoadAdError) {
                Log.d("rewarded ads", adError.message)
                mRewardedAd = null
            }

            override fun onAdLoaded(rewardedAd: RewardedAd) {
                Log.d("rewarded ads", "Ad was loaded.")
                mRewardedAd = rewardedAd
            }
        })

        mRewardedAd?.fullScreenContentCallback = object : FullScreenContentCallback() {
            override fun onAdDismissedFullScreenContent() {
                Log.d("rewarded ads", "Ad was dismissed.")
            }

            override fun onAdFailedToShowFullScreenContent(adError: AdError?) {
                Log.d("rewarded ads", "Ad failed to show.")
            }

            override fun onAdShowedFullScreenContent() {
                Log.d("rewarded ads", "Ad showed fullscreen content.")
                mRewardedAd = null
            }
        }
    }

    private fun showRewardAd() {
        if (mRewardedAd != null) {
            mRewardedAd?.show(this) { rewardItem ->
                binding.adView.visibility = View.GONE
                binding.topSpace.visibility = View.GONE
                binding.bottomSpace.visibility = View.GONE
                binding.gridView.visibility = View.INVISIBLE
                adCheck = 1
                stickyImmersiveMode()
                var rewardAmount = rewardItem.amount
                var rewardType = rewardItem.type
                Log.d("TAG", rewardItem.toString())
                Log.d("TAG", "User earned the reward.")
            }
        } else {
            stickyImmersiveMode()
            Log.d("TAG", "The rewarded ad wasn't ready yet.")
        }
    }

    private val adSize: AdSize
        get() {
            val display = windowManager.defaultDisplay
            val outMetrics = DisplayMetrics()
            display.getMetrics(outMetrics)

            val density = outMetrics.density
            var adWidthPixels = adViewContainer.width.toFloat()
            if (adWidthPixels == 0.0f) {
                adWidthPixels = outMetrics.widthPixels.toFloat()
            }
            val adWidth = (adWidthPixels / density).toInt()


            return AdSize.getCurrentOrientationAnchoredAdaptiveBannerAdSize(this@MainActivity, adWidth)
        }

    private fun initAdMob() {
        adViewContainer = findViewById(R.id.adView)

        MobileAds.initialize(this) {}
        admobmAdView = AdView(this)
        admobmAdView.adUnitId = "ca-app-pub-3940256099942544/6300978111"

        admobmAdView.adListener = object : AdListener() {
            override fun onAdFailedToLoad(adError: LoadAdError) {
                binding.topSpace.visibility = View.GONE
            }
            override fun onAdLoaded() {
                adViewContainer.addView(admobmAdView)
                binding.topSpace.visibility = View.GONE
            }
        }
    }

    private fun loadInterstitial(){
        val adRequest = AdRequest.Builder().build()
        InterstitialAd.load(this,adInter,adRequest,object : InterstitialAdLoadCallback(){
            override fun onAdLoaded(p0: InterstitialAd) {
                interstitial = p0
                interstitial?.fullScreenContentCallback = object : FullScreenContentCallback(){
                    override fun onAdDismissedFullScreenContent() {

                    }
                    override fun onAdShowedFullScreenContent() {
                        interstitial = null
                    }
                }
            }
            override fun onAdFailedToLoad(p0: LoadAdError) {
                interstitial = null
            }
        })
    }

    private fun showInterstitial() {
        if (interstitial != null && interCheck) {
            interstitial?.show(this)
            interCheck = false
        } else if (!interCheck) {
            interCheck = true
        }
    }

    private fun loadAdMob() {
        val request = AdRequest.Builder().build()
        admobmAdView.adSize = adSize
        admobmAdView.loadAd(request)
    }

    override fun clicked(soundList: SoundList) {
        sound16 = if (buttonB == 1) {
            soundPool.load(soundList.name, 1)
        } else {
            soundPool.load(assets.openFd(soundList.name), 1)
        }
            soundPool.setOnLoadCompleteListener { soundPool, _, _ ->
                soundPool.play(sound16, 1.0f, 1.0f, 0, 0, 1.0f)
            }
    }

    private fun playMode() {
        val tuning = arrayOf(
            "Change Pad Sounds",
            "Random Pad Sounds",
            "Change Pad Colors",
            "Save Pad/Sequence",
            "Load Pad/Sequence",
            "Adjusting Sounds",
            "Lock Settings",
            "Hide banner Ads",
            "EXIT",
            "5x3","5x2","5x1",
            "4x3","4x2","4x1",
            "3x3","3x2","3x1",
            "2x2","2x1"
        )
        val adapter = ArrayAdapter(this, R.layout.custom_spinner_dropdown, tuning)
        val gridView: GridView = findViewById(R.id.grid_view)
        gridView.adapter = adapter
        paste = 0
        binding.toolbarMain.setBackgroundColor(Color.parseColor("#5A5A66"))
        gridView.visibility = View.INVISIBLE
        gridView.adapter = adapter
        adapter.notifyDataSetChanged()
    }

    @SuppressLint("SetTextI18n")
    override fun clicked2(soundList: SoundList) {
        try {
            when {
                buttonA == 1 && buttonB == 1 -> {
                    playMode()
                    soundChangeEffect(R.id.include_main_view, R.drawable.my_ripple3)
                    sound1 = soundPool.load(soundList.name, 1)
                    getmpDuration = MediaPlayer()
                    getmpDuration.setDataSource(this, Uri.parse(soundList.name))
                    getmpDuration.prepare()
                    mpDuration = getmpDuration.duration
                    getmpDuration.release()
                    soundPool.setOnLoadCompleteListener { soundPool, _, _ ->
                        soundPool.stop(soundPool.play(sound16, 1.0f, 1.0f, 0, 0, 1.0f))
                    }
                    binding.includeMainView.textView.text = soundList.name.replaceBeforeLast("/", "").replace("/", "")
                        .replace("tr_8", "TR-8").replace("tr_909", "TR-909")
                        .replaceAfterLast(".", "").replace("_", " ").replace("."," ").uppercase()
                    padText1 = soundList.name
                    findViewById<View>(R.id.include_view).findViewById<TextView>(R.id.padText).text = soundList.name.replaceBeforeLast("/", "").replace("/", "")
                        .replace("tr_8", "TR-8").replace("tr_909", "TR-909")
                        .replaceAfterLast(".", "").replace("_", " ").replace(".","").uppercase()
                    findViewById<View>(R.id.tuning_sequencer).findViewById<TextView>(R.id.change_sound).text = soundList.name.replaceBeforeLast("/", "").replace("/", "")
                        .replace("tr_8", "TR-8").replace("tr_909", "TR-909")
                        .replaceAfterLast(".", "").replace("_", " ").replace(".","").uppercase()
                }
                buttonA == 2 && buttonB == 1 -> {
                    playMode()
                    soundChangeEffect(R.id.include_main_view2, R.drawable.my_ripple3)
                    sound2 = soundPool.load(soundList.name, 1)
                    getmpDuration = MediaPlayer()
                    getmpDuration.setDataSource(this, Uri.parse(soundList.name))
                    getmpDuration.prepare()
                    mpDuration2 = getmpDuration.duration
                    getmpDuration.release()
                    soundPool.setOnLoadCompleteListener { soundPool, _, _ ->
                        soundPool.stop(soundPool.play(sound16, 1.0f, 1.0f, 0, 0, 1.0f))
                    }
                    binding.includeMainView2.textView.text = soundList.name.replaceBeforeLast("/", "").replace("/", "")
                        .replace("tr_8", "TR-8").replace("tr_909", "TR-909")
                        .replaceAfterLast(".", "").replace("_", " ").replace("."," ").uppercase()
                    padText2 = soundList.name
                    findViewById<View>(R.id.include_view2).findViewById<TextView>(R.id.padText).text = soundList.name.replaceBeforeLast("/", "").replace("/", "")
                        .replace("tr_8", "TR-8").replace("tr_909", "TR-909")
                        .replaceAfterLast(".", "").replace("_", " ").replace(".","").uppercase()
                    findViewById<View>(R.id.tuning_sequencer6).findViewById<TextView>(R.id.change_sound).text = soundList.name.replaceBeforeLast("/", "").replace("/", "")
                        .replace("tr_8", "TR-8").replace("tr_909", "TR-909")
                        .replaceAfterLast(".", "").replace("_", " ").replace(".","").uppercase()
                }
                buttonA == 3 && buttonB == 1 -> {
                    playMode()
                    soundChangeEffect(R.id.include_main_view3, R.drawable.my_ripple3)
                    sound3 = soundPool.load(soundList.name, 1)
                    getmpDuration = MediaPlayer()
                    getmpDuration.setDataSource(this, Uri.parse(soundList.name))
                    getmpDuration.prepare()
                    mpDuration3 = getmpDuration.duration
                    getmpDuration.release()
                    soundPool.setOnLoadCompleteListener { soundPool, _, _ ->
                        soundPool.stop(soundPool.play(sound16, 1.0f, 1.0f, 0, 0, 1.0f))
                    }
                    binding.includeMainView3.textView.text = soundList.name.replaceBeforeLast("/", "").replace("/", "")
                        .replace("tr_8", "TR-8").replace("tr_909", "TR-909")
                        .replaceAfterLast(".", "").replace("_", " ").replace("."," ").uppercase()
                    padText3 = soundList.name
                    findViewById<View>(R.id.include_view3).findViewById<TextView>(R.id.padText).text = soundList.name.replaceBeforeLast("/", "").replace("/", "")
                        .replace("tr_8", "TR-8").replace("tr_909", "TR-909")
                        .replaceAfterLast(".", "").replace("_", " ").replace(".","").uppercase()
                    findViewById<View>(R.id.tuning_sequencer11).findViewById<TextView>(R.id.change_sound).text = soundList.name.replaceBeforeLast("/", "").replace("/", "")
                        .replace("tr_8", "TR-8").replace("tr_909", "TR-909")
                        .replaceAfterLast(".", "").replace("_", " ").replace(".","").uppercase()
                }
                buttonA == 4 && buttonB == 1 -> {
                    playMode()
                    soundChangeEffect(R.id.include_main_view4, R.drawable.my_ripple4)
                    sound4 = soundPool.load(soundList.name, 1)
                    getmpDuration = MediaPlayer()
                    getmpDuration.setDataSource(this, Uri.parse(soundList.name))
                    getmpDuration.prepare()
                    mpDuration4 = getmpDuration.duration
                    getmpDuration.release()
                    soundPool.setOnLoadCompleteListener { soundPool, _, _ ->
                        soundPool.stop(soundPool.play(sound16, 1.0f, 1.0f, 0, 0, 1.0f))
                    }
                    binding.includeMainView4.textView.text = soundList.name.replaceBeforeLast("/", "").replace("/", "")
                        .replace("tr_8", "TR-8").replace("tr_909", "TR-909")
                        .replaceAfterLast(".", "").replace("_", " ").replace("."," ").uppercase()
                    padText4 = soundList.name
                    findViewById<View>(R.id.include_view4).findViewById<TextView>(R.id.padText).text = soundList.name.replaceBeforeLast("/", "").replace("/", "")
                        .replace("tr_8", "TR-8").replace("tr_909", "TR-909")
                        .replaceAfterLast(".", "").replace("_", " ").replace(".","").uppercase()
                    findViewById<View>(R.id.tuning_sequencer2).findViewById<TextView>(R.id.change_sound).text = soundList.name.replaceBeforeLast("/", "").replace("/", "")
                        .replace("tr_8", "TR-8").replace("tr_909", "TR-909")
                        .replaceAfterLast(".", "").replace("_", " ").replace(".","").uppercase()
                }
                buttonA == 5 && buttonB == 1 -> {
                    playMode()
                    soundChangeEffect(R.id.include_main_view5, R.drawable.my_ripple4)
                    sound5 = soundPool.load(soundList.name, 1)
                    getmpDuration = MediaPlayer()
                    getmpDuration.setDataSource(this, Uri.parse(soundList.name))
                    getmpDuration.prepare()
                    mpDuration5 = getmpDuration.duration
                    getmpDuration.release()
                    soundPool.setOnLoadCompleteListener { soundPool, _, _ ->
                        soundPool.stop(soundPool.play(sound16, 1.0f, 1.0f, 0, 0, 1.0f))
                    }
                    binding.includeMainView5.textView.text = soundList.name.replaceBeforeLast("/", "").replace("/", "")
                        .replace("tr_8", "TR-8").replace("tr_909", "TR-909")
                        .replaceAfterLast(".", "").replace("_", " ").replace("."," ").uppercase()
                    padText5 = soundList.name
                    findViewById<View>(R.id.include_view5).findViewById<TextView>(R.id.padText).text = soundList.name.replaceBeforeLast("/", "").replace("/", "")
                        .replace("tr_8", "TR-8").replace("tr_909", "TR-909")
                        .replaceAfterLast(".", "").replace("_", " ").replace(".","").uppercase()
                    findViewById<View>(R.id.tuning_sequencer7).findViewById<TextView>(R.id.change_sound).text = soundList.name.replaceBeforeLast("/", "").replace("/", "")
                        .replace("tr_8", "TR-8").replace("tr_909", "TR-909")
                        .replaceAfterLast(".", "").replace("_", " ").replace(".","").uppercase()
                }
                buttonA == 6 && buttonB == 1 -> {
                    playMode()
                    soundChangeEffect(R.id.include_main_view6, R.drawable.my_ripple4)
                    sound6 = soundPool.load(soundList.name, 1)
                    getmpDuration = MediaPlayer()
                    getmpDuration.setDataSource(this, Uri.parse(soundList.name))
                    getmpDuration.prepare()
                    mpDuration6 = getmpDuration.duration
                    getmpDuration.release()
                    soundPool.setOnLoadCompleteListener { soundPool, _, _ ->
                        soundPool.stop(soundPool.play(sound16, 1.0f, 1.0f, 0, 0, 1.0f))
                    }
                    binding.includeMainView6.textView.text = soundList.name.replaceBeforeLast("/", "").replace("/", "")
                        .replace("tr_8", "TR-8").replace("tr_909", "TR-909")
                        .replaceAfterLast(".", "").replace("_", " ").replace("."," ").uppercase()
                    padText6 = soundList.name
                    findViewById<View>(R.id.include_view6).findViewById<TextView>(R.id.padText).text = soundList.name.replaceBeforeLast("/", "").replace("/", "")
                        .replace("tr_8", "TR-8").replace("tr_909", "TR-909")
                        .replaceAfterLast(".", "").replace("_", " ").replace(".","").uppercase()
                    findViewById<View>(R.id.tuning_sequencer12).findViewById<TextView>(R.id.change_sound).text = soundList.name.replaceBeforeLast("/", "").replace("/", "")
                        .replace("tr_8", "TR-8").replace("tr_909", "TR-909")
                        .replaceAfterLast(".", "").replace("_", " ").replace(".","").uppercase()
                }
                buttonA == 7 && buttonB == 1 -> {
                    playMode()
                    soundChangeEffect(R.id.include_main_view7, R.drawable.my_ripple5)
                    sound7 = soundPool.load(soundList.name, 1)
                    getmpDuration = MediaPlayer()
                    getmpDuration.setDataSource(this, Uri.parse(soundList.name))
                    getmpDuration.prepare()
                    mpDuration7 = getmpDuration.duration
                    getmpDuration.release()
                    soundPool.setOnLoadCompleteListener { soundPool, _, _ ->
                        soundPool.stop(soundPool.play(sound16, 1.0f, 1.0f, 0, 0, 1.0f))
                    }
                    binding.includeMainView7.textView.text = soundList.name.replaceBeforeLast("/", "").replace("/", "")
                        .replace("tr_8", "TR-8").replace("tr_909", "TR-909")
                        .replaceAfterLast(".", "").replace("_", " ").replace("."," ").uppercase()
                    padText7 = soundList.name
                    findViewById<View>(R.id.include_view7).findViewById<TextView>(R.id.padText).text = soundList.name.replaceBeforeLast("/", "").replace("/", "")
                        .replace("tr_8", "TR-8").replace("tr_909", "TR-909")
                        .replaceAfterLast(".", "").replace("_", " ").replace(".","").uppercase()
                    findViewById<View>(R.id.tuning_sequencer3).findViewById<TextView>(R.id.change_sound).text = soundList.name.replaceBeforeLast("/", "").replace("/", "")
                        .replace("tr_8", "TR-8").replace("tr_909", "TR-909")
                        .replaceAfterLast(".", "").replace("_", " ").replace(".","").uppercase()
                }
                buttonA == 8 && buttonB == 1 -> {
                    playMode()
                    soundChangeEffect(R.id.include_main_view8, R.drawable.my_ripple5)
                    sound8 = soundPool.load(soundList.name, 1)
                    getmpDuration = MediaPlayer()
                    getmpDuration.setDataSource(this, Uri.parse(soundList.name))
                    getmpDuration.prepare()
                    mpDuration8 = getmpDuration.duration
                    getmpDuration.release()
                    soundPool.setOnLoadCompleteListener { soundPool, _, _ ->
                        soundPool.stop(soundPool.play(sound16, 1.0f, 1.0f, 0, 0, 1.0f))
                    }
                    binding.includeMainView8.textView.text = soundList.name.replaceBeforeLast("/", "").replace("/", "")
                        .replace("tr_8", "TR-8").replace("tr_909", "TR-909")
                        .replaceAfterLast(".", "").replace("_", " ").replace("."," ").uppercase()
                    padText8 = soundList.name
                    findViewById<View>(R.id.include_view8).findViewById<TextView>(R.id.padText).text = soundList.name.replaceBeforeLast("/", "").replace("/", "")
                        .replace("tr_8", "TR-8").replace("tr_909", "TR-909")
                        .replaceAfterLast(".", "").replace("_", " ").replace(".","").uppercase()
                    findViewById<View>(R.id.tuning_sequencer8).findViewById<TextView>(R.id.change_sound).text = soundList.name.replaceBeforeLast("/", "").replace("/", "")
                        .replace("tr_8", "TR-8").replace("tr_909", "TR-909")
                        .replaceAfterLast(".", "").replace("_", " ").replace(".","").uppercase()
                }
                buttonA == 9 && buttonB == 1 -> {
                    playMode()
                    soundChangeEffect(R.id.include_main_view9, R.drawable.my_ripple5)
                    sound9 = soundPool.load(soundList.name, 1)
                    getmpDuration = MediaPlayer()
                    getmpDuration.setDataSource(this, Uri.parse(soundList.name))
                    getmpDuration.prepare()
                    mpDuration9 = getmpDuration.duration
                    getmpDuration.release()
                    soundPool.setOnLoadCompleteListener { soundPool, _, _ ->
                        soundPool.stop(soundPool.play(sound16, 1.0f, 1.0f, 0, 0, 1.0f))
                    }
                    binding.includeMainView9.textView.text = soundList.name.replaceBeforeLast("/", "").replace("/", "")
                        .replace("tr_8", "TR-8").replace("tr_909", "TR-909")
                        .replaceAfterLast(".", "").replace("_", " ").replace("."," ").uppercase()
                    padText9 = soundList.name
                    findViewById<View>(R.id.include_view9).findViewById<TextView>(R.id.padText).text = soundList.name.replaceBeforeLast("/", "").replace("/", "")
                        .replace("tr_8", "TR-8").replace("tr_909", "TR-909")
                        .replaceAfterLast(".", "").replace("_", " ").replace(".","").uppercase()
                    findViewById<View>(R.id.tuning_sequencer13).findViewById<TextView>(R.id.change_sound).text = soundList.name.replaceBeforeLast("/", "").replace("/", "")
                        .replace("tr_8", "TR-8").replace("tr_909", "TR-909")
                        .replaceAfterLast(".", "").replace("_", " ").replace(".","").uppercase()
                }
                buttonA == 10 && buttonB == 1 -> {
                    playMode()
                    soundChangeEffect(R.id.include_main_view10, R.drawable.my_ripple6)
                    sound10 = soundPool.load(soundList.name, 1)
                    getmpDuration = MediaPlayer()
                    getmpDuration.setDataSource(this, Uri.parse(soundList.name))
                    getmpDuration.prepare()
                    mpDuration10 = getmpDuration.duration
                    getmpDuration.release()
                    soundPool.setOnLoadCompleteListener { soundPool, _, _ ->
                        soundPool.stop(soundPool.play(sound16, 1.0f, 1.0f, 0, 0, 1.0f))
                    }
                    binding.includeMainView10.textView.text = soundList.name.replaceBeforeLast("/", "").replace("/", "")
                        .replace("tr_8", "TR-8").replace("tr_909", "TR-909")
                        .replaceAfterLast(".", "").replace("_", " ").replace("."," ").uppercase()
                    padText10 = soundList.name
                    findViewById<View>(R.id.include_view10).findViewById<TextView>(R.id.padText).text = soundList.name.replaceBeforeLast("/", "").replace("/", "")
                        .replace("tr_8", "TR-8").replace("tr_909", "TR-909")
                        .replaceAfterLast(".", "").replace("_", " ").replace(".","").uppercase()
                    findViewById<View>(R.id.tuning_sequencer10).findViewById<TextView>(R.id.change_sound).text = soundList.name.replaceBeforeLast("/", "").replace("/", "")
                        .replace("tr_8", "TR-8").replace("tr_909", "TR-909")
                        .replaceAfterLast(".", "").replace("_", " ").replace(".","").uppercase()
                }
                buttonA == 11 && buttonB == 1 -> {
                    playMode()
                    soundChangeEffect(R.id.include_main_view11, R.drawable.my_ripple6)
                    sound11 = soundPool.load(soundList.name, 1)
                    getmpDuration = MediaPlayer()
                    getmpDuration.setDataSource(this, Uri.parse(soundList.name))
                    getmpDuration.prepare()
                    mpDuration11 = getmpDuration.duration
                    getmpDuration.release()
                    soundPool.setOnLoadCompleteListener { soundPool, _, _ ->
                        soundPool.stop(soundPool.play(sound16, 1.0f, 1.0f, 0, 0, 1.0f))
                    }
                    binding.includeMainView11.textView.text = soundList.name.replaceBeforeLast("/", "").replace("/", "")
                        .replace("tr_8", "TR-8").replace("tr_909", "TR-909")
                        .replaceAfterLast(".", "").replace("_", " ").replace("."," ").uppercase()
                    padText11 = soundList.name
                    findViewById<View>(R.id.include_view11).findViewById<TextView>(R.id.padText).text = soundList.name.replaceBeforeLast("/", "").replace("/", "")
                        .replace("tr_8", "TR-8").replace("tr_909", "TR-909")
                        .replaceAfterLast(".", "").replace("_", " ").replace(".","").uppercase()
                    findViewById<View>(R.id.tuning_sequencer9).findViewById<TextView>(R.id.change_sound).text = soundList.name.replaceBeforeLast("/", "").replace("/", "")
                        .replace("tr_8", "TR-8").replace("tr_909", "TR-909")
                        .replaceAfterLast(".", "").replace("_", " ").replace(".","").uppercase()
                }
                buttonA == 12 && buttonB == 1 -> {
                    playMode()
                    soundChangeEffect(R.id.include_main_view12, R.drawable.my_ripple6)
                    sound12 = soundPool.load(soundList.name, 1)
                    getmpDuration = MediaPlayer()
                    getmpDuration.setDataSource(this, Uri.parse(soundList.name))
                    getmpDuration.prepare()
                    mpDuration12 = getmpDuration.duration
                    getmpDuration.release()
                    soundPool.setOnLoadCompleteListener { soundPool, _, _ ->
                        soundPool.stop(soundPool.play(sound16, 1.0f, 1.0f, 0, 0, 1.0f))
                    }
                    binding.includeMainView12.textView.text = soundList.name.replaceBeforeLast("/", "").replace("/", "")
                        .replace("tr_8", "TR-8").replace("tr_909", "TR-909")
                        .replaceAfterLast(".", "").replace("_", " ").replace("."," ").uppercase()
                    padText12 = soundList.name
                    findViewById<View>(R.id.include_view12).findViewById<TextView>(R.id.padText).text = soundList.name.replaceBeforeLast("/", "").replace("/", "")
                        .replace("tr_8", "TR-8").replace("tr_909", "TR-909")
                        .replaceAfterLast(".", "").replace("_", " ").replace(".","").uppercase()
                    findViewById<View>(R.id.tuning_sequencer14).findViewById<TextView>(R.id.change_sound).text = soundList.name.replaceBeforeLast("/", "").replace("/", "")
                        .replace("tr_8", "TR-8").replace("tr_909", "TR-909")
                        .replaceAfterLast(".", "").replace("_", " ").replace(".","").uppercase()
                }
                buttonA == 13 && buttonB == 1 -> {
                    playMode()
                    soundChangeEffect(R.id.include_main_view13, R.drawable.my_ripple7)
                    sound13 = soundPool.load(soundList.name, 1)
                    getmpDuration = MediaPlayer()
                    getmpDuration.setDataSource(this, Uri.parse(soundList.name))
                    getmpDuration.prepare()
                    mpDuration13 = getmpDuration.duration
                    getmpDuration.release()
                    soundPool.setOnLoadCompleteListener { soundPool, _, _ ->
                        soundPool.stop(soundPool.play(sound16, 1.0f, 1.0f, 0, 0, 1.0f))
                    }
                    binding.includeMainView13.textView.text = soundList.name.replaceBeforeLast("/", "").replace("/", "")
                        .replace("tr_8", "TR-8").replace("tr_909", "TR-909")
                        .replaceAfterLast(".", "").replace("_", " ").replace("."," ").uppercase()
                    padText13 = soundList.name
                    findViewById<View>(R.id.include_view13).findViewById<TextView>(R.id.padText).text = soundList.name.replaceBeforeLast("/", "").replace("/", "")
                        .replace("tr_8", "TR-8").replace("tr_909", "TR-909")
                        .replaceAfterLast(".", "").replace("_", " ").replace(".","").uppercase()
                    findViewById<View>(R.id.tuning_sequencer5).findViewById<TextView>(R.id.change_sound).text = soundList.name.replaceBeforeLast("/", "").replace("/", "")
                        .replace("tr_8", "TR-8").replace("tr_909", "TR-909")
                        .replaceAfterLast(".", "").replace("_", " ").replace(".","").uppercase()
                }
                buttonA == 14 && buttonB == 1 -> {
                    playMode()
                    soundChangeEffect(R.id.include_main_view14, R.drawable.my_ripple7)
                    sound14 = soundPool.load(soundList.name, 1)
                    getmpDuration = MediaPlayer()
                    getmpDuration.setDataSource(this, Uri.parse(soundList.name))
                    getmpDuration.prepare()
                    mpDuration14 = getmpDuration.duration
                    getmpDuration.release()
                    soundPool.setOnLoadCompleteListener { soundPool, _, _ ->
                        soundPool.stop(soundPool.play(sound16, 1.0f, 1.0f, 0, 0, 1.0f))
                    }
                    binding.includeMainView14.textView.text = soundList.name.replaceBeforeLast("/", "").replace("/", "")
                        .replace("tr_8", "TR-8").replace("tr_909", "TR-909")
                        .replaceAfterLast(".", "").replace("_", " ").replace("."," ").uppercase()
                    padText14 = soundList.name
                    findViewById<View>(R.id.include_view14).findViewById<TextView>(R.id.padText).text = soundList.name.replaceBeforeLast("/", "").replace("/", "")
                        .replace("tr_8", "TR-8").replace("tr_909", "TR-909")
                        .replaceAfterLast(".", "").replace("_", " ").replace(".","").uppercase()
                    findViewById<View>(R.id.tuning_sequencer10).findViewById<TextView>(R.id.change_sound).text = soundList.name.replaceBeforeLast("/", "").replace("/", "")
                        .replace("tr_8", "TR-8").replace("tr_909", "TR-909")
                        .replaceAfterLast(".", "").replace("_", " ").replace(".","").uppercase()
                }
                buttonA == 15 && buttonB == 1 -> {
                    playMode()
                    soundChangeEffect(R.id.include_main_view15, R.drawable.my_ripple7)
                    sound15 = soundPool.load(soundList.name, 1)
                    getmpDuration = MediaPlayer()
                    getmpDuration.setDataSource(this, Uri.parse(soundList.name))
                    getmpDuration.prepare()
                    mpDuration15 = getmpDuration.duration
                    getmpDuration.release()
                    soundPool.setOnLoadCompleteListener { soundPool, _, _ ->
                        soundPool.stop(soundPool.play(sound16, 1.0f, 1.0f, 0, 0, 1.0f))
                    }
                    binding.includeMainView15.textView.text = soundList.name.replaceBeforeLast("/", "").replace("/", "")
                        .replace("tr_8", "TR-8").replace("tr_909", "TR-909")
                        .replaceAfterLast(".", "").replace("_", " ").replace("."," ").uppercase()
                    padText15 = soundList.name
                    findViewById<View>(R.id.include_view15).findViewById<TextView>(R.id.padText).text = soundList.name.replaceBeforeLast("/", "").replace("/", "")
                        .replace("tr_8", "TR-8").replace("tr_909", "TR-909")
                        .replaceAfterLast(".", "").replace("_", " ").replace(".","").uppercase()
                    findViewById<View>(R.id.tuning_sequencer15).findViewById<TextView>(R.id.change_sound).text = soundList.name.replaceBeforeLast("/", "").replace("/", "")
                        .replace("tr_8", "TR-8").replace("tr_909", "TR-909")
                        .replaceAfterLast(".", "").replace("_", " ").replace(".","").uppercase()
                }
                buttonA == 16 && buttonB == 1 -> {
                    noteCount = 0
                    count = 5
                    bpm = 10
                    actionTitle = soundList.name
                    supportActionBar?.title = actionTitle.replaceBeforeLast("/", "").replace("/", "").replaceAfterLast(".", "").replace("_", " ").replace("."," ").uppercase()
                    soundPool.setOnLoadCompleteListener{ soundPool, _, _ ->
                        soundPool.stop(soundPool.play(sound16, 1.0f, 1.0f, 0, 0, 1.0f))
                    }
                }
                buttonA == 1 && buttonB == 2 -> {
                    playMode()
                    soundChangeEffect(R.id.include_main_view, R.drawable.my_ripple3)
                    sound1 = soundPool.load(assets.openFd(soundList.name), 1)
                    getmpDuration = MediaPlayer()
                    getmpDuration.setDataSource(assets.openFd(soundList.name).fileDescriptor,
                        assets.openFd(soundList.name).startOffset,
                        assets.openFd(soundList.name).declaredLength)
                    getmpDuration.prepare()
                    mpDuration = getmpDuration.duration
                    getmpDuration.release()
                    soundPool.setOnLoadCompleteListener { soundPool, _, _ ->
                        soundPool.stop(soundPool.play(sound16, 1.0f, 1.0f, 0, 0, 1.0f))
                    }
                    binding.includeMainView.textView.text = soundList.name.replace("tr_8", "TR-8").replace("tr_909", "TR-909")
                        .replaceAfterLast(".", "").replace("_", " ").replace("."," ").uppercase()
                    padText1 = soundList.name.replace(".ogg","")
                    findViewById<View>(R.id.include_view).findViewById<TextView>(R.id.padText).text = soundList.name.replace("tr_8", "TR-8").replace("tr_909", "TR-909")
                        .replaceAfterLast(".", "").replace("_", " ").replace(".","").uppercase()
                    findViewById<View>(R.id.tuning_sequencer).findViewById<TextView>(R.id.change_sound).text = soundList.name.replace("tr_8", "TR-8").replace("tr_909", "TR-909")
                        .replaceAfterLast(".", "").replace("_", " ").replace(".","").uppercase()
                }
                buttonA == 2 && buttonB == 2 -> {
                    playMode()
                    soundChangeEffect(R.id.include_main_view2, R.drawable.my_ripple3)
                    sound2 = soundPool.load(assets.openFd(soundList.name), 1)
                    getmpDuration = MediaPlayer()
                    getmpDuration.setDataSource(assets.openFd(soundList.name).fileDescriptor,
                        assets.openFd(soundList.name).startOffset,
                        assets.openFd(soundList.name).declaredLength)
                    getmpDuration.prepare()
                    mpDuration2 = getmpDuration.duration
                    getmpDuration.release()
                    soundPool.setOnLoadCompleteListener { soundPool, _, _ ->
                        soundPool.stop(soundPool.play(sound16, 1.0f, 1.0f, 0, 0, 1.0f))
                    }
                    binding.includeMainView2.textView.text = soundList.name.replace("tr_8", "TR-8").replace("tr_909", "TR-909")
                        .replaceAfterLast(".", "").replace("_", " ").replace("."," ").uppercase()
                    padText2 = soundList.name.replace(".ogg","")
                    findViewById<View>(R.id.include_view2).findViewById<TextView>(R.id.padText).text = soundList.name.replace("tr_8", "TR-8").replace("tr_909", "TR-909")
                        .replaceAfterLast(".", "").replace("_", " ").replace(".","").uppercase()
                    findViewById<View>(R.id.tuning_sequencer6).findViewById<TextView>(R.id.change_sound).text = soundList.name.replace("tr_8", "TR-8").replace("tr_909", "TR-909")
                        .replaceAfterLast(".", "").replace("_", " ").replace(".","").uppercase()
                }
                buttonA == 3 && buttonB == 2 -> {
                    playMode()
                    soundChangeEffect(R.id.include_main_view3, R.drawable.my_ripple3)
                    sound3 = soundPool.load(assets.openFd(soundList.name), 1)
                    getmpDuration = MediaPlayer()
                    getmpDuration.setDataSource(assets.openFd(soundList.name).fileDescriptor,
                        assets.openFd(soundList.name).startOffset,
                        assets.openFd(soundList.name).declaredLength)
                    getmpDuration.prepare()
                    mpDuration3 = getmpDuration.duration
                    getmpDuration.release()
                    soundPool.setOnLoadCompleteListener { soundPool, _, _ ->
                        soundPool.stop(soundPool.play(sound16, 1.0f, 1.0f, 0, 0, 1.0f))
                    }
                    binding.includeMainView3.textView.text = soundList.name.replace("tr_8", "TR-8").replace("tr_909", "TR-909")
                        .replaceAfterLast(".", "").replace("_", " ").replace("."," ").uppercase()
                    padText3 = soundList.name.replace(".ogg","")
                    findViewById<View>(R.id.include_view3).findViewById<TextView>(R.id.padText).text = soundList.name.replace("tr_8", "TR-8").replace("tr_909", "TR-909")
                        .replaceAfterLast(".", "").replace("_", " ").replace(".","").uppercase()
                    findViewById<View>(R.id.tuning_sequencer11).findViewById<TextView>(R.id.change_sound).text = soundList.name.replace("tr_8", "TR-8").replace("tr_909", "TR-909")
                        .replaceAfterLast(".", "").replace("_", " ").replace(".","").uppercase()
                }
                buttonA == 4 && buttonB == 2 -> {
                    playMode()
                    soundChangeEffect(R.id.include_main_view4, R.drawable.my_ripple4)
                    sound4 = soundPool.load(assets.openFd(soundList.name), 1)
                    getmpDuration = MediaPlayer()
                    getmpDuration.setDataSource(assets.openFd(soundList.name).fileDescriptor,
                        assets.openFd(soundList.name).startOffset,
                        assets.openFd(soundList.name).declaredLength)
                    getmpDuration.prepare()
                    mpDuration4 = getmpDuration.duration
                    getmpDuration.release()
                    soundPool.setOnLoadCompleteListener { soundPool, _, _ ->
                        soundPool.stop(soundPool.play(sound16, 1.0f, 1.0f, 0, 0, 1.0f))
                    }
                    binding.includeMainView4.textView.text = soundList.name.replace("tr_8", "TR-8").replace("tr_909", "TR-909")
                        .replaceAfterLast(".", "").replace("_", " ").replace("."," ").uppercase()
                    padText4 = soundList.name.replace(".ogg","")
                    findViewById<View>(R.id.include_view4).findViewById<TextView>(R.id.padText).text = soundList.name.replace("tr_8", "TR-8").replace("tr_909", "TR-909")
                        .replaceAfterLast(".", "").replace("_", " ").replace(".","").uppercase()
                    findViewById<View>(R.id.tuning_sequencer2).findViewById<TextView>(R.id.change_sound).text = soundList.name.replace("tr_8", "TR-8").replace("tr_909", "TR-909")
                        .replaceAfterLast(".", "").replace("_", " ").replace(".","").uppercase()
                }
                buttonA == 5 && buttonB == 2 -> {
                    playMode()
                    soundChangeEffect(R.id.include_main_view5, R.drawable.my_ripple4)
                    sound5 = soundPool.load(assets.openFd(soundList.name), 1)
                    getmpDuration = MediaPlayer()
                    getmpDuration.setDataSource(assets.openFd(soundList.name).fileDescriptor,
                        assets.openFd(soundList.name).startOffset,
                        assets.openFd(soundList.name).declaredLength)
                    getmpDuration.prepare()
                    mpDuration5 = getmpDuration.duration
                    getmpDuration.release()
                    soundPool.setOnLoadCompleteListener { soundPool, _, _ ->
                        soundPool.stop(soundPool.play(sound16, 1.0f, 1.0f, 0, 0, 1.0f))
                    }
                    binding.includeMainView5.textView.text = soundList.name.replace("tr_8", "TR-8").replace("tr_909", "TR-909")
                        .replaceAfterLast(".", "").replace("_", " ").replace("."," ").uppercase()
                    padText5 = soundList.name.replace(".ogg","")
                    findViewById<View>(R.id.include_view5).findViewById<TextView>(R.id.padText).text = soundList.name.replace("tr_8", "TR-8").replace("tr_909", "TR-909")
                        .replaceAfterLast(".", "").replace("_", " ").replace(".","").uppercase()
                    findViewById<View>(R.id.tuning_sequencer7).findViewById<TextView>(R.id.change_sound).text = soundList.name.replace("tr_8", "TR-8").replace("tr_909", "TR-909")
                        .replaceAfterLast(".", "").replace("_", " ").replace(".","").uppercase()
                }
                buttonA == 6 && buttonB == 2 -> {
                    playMode()
                    soundChangeEffect(R.id.include_main_view6, R.drawable.my_ripple4)
                    sound6 = soundPool.load(assets.openFd(soundList.name), 1)
                    getmpDuration = MediaPlayer()
                    getmpDuration.setDataSource(assets.openFd(soundList.name).fileDescriptor,
                        assets.openFd(soundList.name).startOffset,
                        assets.openFd(soundList.name).declaredLength)
                    getmpDuration.prepare()
                    mpDuration6 = getmpDuration.duration
                    getmpDuration.release()
                    soundPool.setOnLoadCompleteListener { soundPool, _, _ ->
                        soundPool.stop(soundPool.play(sound16, 1.0f, 1.0f, 0, 0, 1.0f))
                    }
                    binding.includeMainView6.textView.text = soundList.name.replace("tr_8", "TR-8").replace("tr_909", "TR-909")
                        .replaceAfterLast(".", "").replace("_", " ").replace("."," ").uppercase()
                    padText6 = soundList.name.replace(".ogg","")
                    findViewById<View>(R.id.include_view6).findViewById<TextView>(R.id.padText).text = soundList.name.replace("tr_8", "TR-8").replace("tr_909", "TR-909")
                        .replaceAfterLast(".", "").replace("_", " ").replace(".","").uppercase()
                    findViewById<View>(R.id.tuning_sequencer12).findViewById<TextView>(R.id.change_sound).text = soundList.name.replace("tr_8", "TR-8").replace("tr_909", "TR-909")
                        .replaceAfterLast(".", "").replace("_", " ").replace(".","").uppercase()
                }
                buttonA == 7 && buttonB == 2 -> {
                    playMode()
                    soundChangeEffect(R.id.include_main_view7, R.drawable.my_ripple5)
                    sound7 = soundPool.load(assets.openFd(soundList.name), 1)
                    getmpDuration = MediaPlayer()
                    getmpDuration.setDataSource(assets.openFd(soundList.name).fileDescriptor,
                        assets.openFd(soundList.name).startOffset,
                        assets.openFd(soundList.name).declaredLength)
                    getmpDuration.prepare()
                    mpDuration7 = getmpDuration.duration
                    getmpDuration.release()
                    soundPool.setOnLoadCompleteListener { soundPool, _, _ ->
                        soundPool.stop(soundPool.play(sound16, 1.0f, 1.0f, 0, 0, 1.0f))
                    }
                    binding.includeMainView7.textView.text = soundList.name.replace("tr_8", "TR-8").replace("tr_909", "TR-909")
                        .replaceAfterLast(".", "").replace("_", " ").replace("."," ").uppercase()
                    padText7 = soundList.name.replace(".ogg","")
                    findViewById<View>(R.id.include_view7).findViewById<TextView>(R.id.padText).text = soundList.name.replace("tr_8", "TR-8").replace("tr_909", "TR-909")
                        .replaceAfterLast(".", "").replace("_", " ").replace(".","").uppercase()
                    findViewById<View>(R.id.tuning_sequencer3).findViewById<TextView>(R.id.change_sound).text = soundList.name.replace("tr_8", "TR-8").replace("tr_909", "TR-909")
                        .replaceAfterLast(".", "").replace("_", " ").replace(".","").uppercase()
                }
                buttonA == 8 && buttonB == 2 -> {
                    playMode()
                    soundChangeEffect(R.id.include_main_view8, R.drawable.my_ripple5)
                    sound8 = soundPool.load(assets.openFd(soundList.name), 1)
                    getmpDuration = MediaPlayer()
                    getmpDuration.setDataSource(assets.openFd(soundList.name).fileDescriptor,
                        assets.openFd(soundList.name).startOffset,
                        assets.openFd(soundList.name).declaredLength)
                    getmpDuration.prepare()
                    mpDuration8 = getmpDuration.duration
                    getmpDuration.release()
                    soundPool.setOnLoadCompleteListener { soundPool, _, _ ->
                        soundPool.stop(soundPool.play(sound16, 1.0f, 1.0f, 0, 0, 1.0f))
                    }
                    binding.includeMainView8.textView.text = soundList.name.replace("tr_8", "TR-8").replace("tr_909", "TR-909")
                        .replaceAfterLast(".", "").replace("_", " ").replace("."," ").uppercase()
                    padText8 = soundList.name.replace(".ogg","")
                    findViewById<View>(R.id.include_view8).findViewById<TextView>(R.id.padText).text = soundList.name.replace("tr_8", "TR-8").replace("tr_909", "TR-909")
                        .replaceAfterLast(".", "").replace("_", " ").replace(".","").uppercase()
                    findViewById<View>(R.id.tuning_sequencer8).findViewById<TextView>(R.id.change_sound).text = soundList.name.replace("tr_8", "TR-8").replace("tr_909", "TR-909")
                        .replaceAfterLast(".", "").replace("_", " ").replace(".","").uppercase()
                }
                buttonA == 9 && buttonB == 2 -> {
                    playMode()
                    soundChangeEffect(R.id.include_main_view9, R.drawable.my_ripple5)
                    sound9 = soundPool.load(assets.openFd(soundList.name), 1)
                    getmpDuration = MediaPlayer()
                    getmpDuration.setDataSource(assets.openFd(soundList.name).fileDescriptor,
                        assets.openFd(soundList.name).startOffset,
                        assets.openFd(soundList.name).declaredLength)
                    getmpDuration.prepare()
                    mpDuration9 = getmpDuration.duration
                    getmpDuration.release()
                    soundPool.setOnLoadCompleteListener { soundPool, _, _ ->
                        soundPool.stop(soundPool.play(sound16, 1.0f, 1.0f, 0, 0, 1.0f))
                    }
                    binding.includeMainView9.textView.text = soundList.name.replace("tr_8", "TR-8").replace("tr_909", "TR-909")
                        .replaceAfterLast(".", "").replace("_", " ").replace("."," ").uppercase()
                    padText9 = soundList.name.replace(".ogg","")
                    findViewById<View>(R.id.include_view9).findViewById<TextView>(R.id.padText).text = soundList.name.replace("tr_8", "TR-8").replace("tr_909", "TR-909")
                        .replaceAfterLast(".", "").replace("_", " ").replace(".","").uppercase()
                    findViewById<View>(R.id.tuning_sequencer13).findViewById<TextView>(R.id.change_sound).text = soundList.name.replace("tr_8", "TR-8").replace("tr_909", "TR-909")
                        .replaceAfterLast(".", "").replace("_", " ").replace(".","").uppercase()
                }
                buttonA == 10 && buttonB == 2 -> {
                    playMode()
                    soundChangeEffect(R.id.include_main_view10, R.drawable.my_ripple6)
                    sound10 = soundPool.load(assets.openFd(soundList.name), 1)
                    getmpDuration = MediaPlayer()
                    getmpDuration.setDataSource(assets.openFd(soundList.name).fileDescriptor,
                        assets.openFd(soundList.name).startOffset,
                        assets.openFd(soundList.name).declaredLength)
                    getmpDuration.prepare()
                    mpDuration10 = getmpDuration.duration
                    getmpDuration.release()
                    soundPool.setOnLoadCompleteListener { soundPool, _, _ ->
                        soundPool.stop(soundPool.play(sound16, 1.0f, 1.0f, 0, 0, 1.0f))
                    }
                    binding.includeMainView10.textView.text = soundList.name.replace("tr_8", "TR-8").replace("tr_909", "TR-909")
                        .replaceAfterLast(".", "").replace("_", " ").replace("."," ").uppercase()
                    padText10 = soundList.name.replace(".ogg","")
                    findViewById<View>(R.id.include_view10).findViewById<TextView>(R.id.padText).text = soundList.name.replace("tr_8", "TR-8").replace("tr_909", "TR-909")
                        .replaceAfterLast(".", "").replace("_", " ").replace(".","").uppercase()
                    findViewById<View>(R.id.tuning_sequencer4).findViewById<TextView>(R.id.change_sound).text = soundList.name.replace("tr_8", "TR-8").replace("tr_909", "TR-909")
                        .replaceAfterLast(".", "").replace("_", " ").replace(".","").uppercase()
                }
                buttonA == 11 && buttonB == 2 -> {
                    playMode()
                    soundChangeEffect(R.id.include_main_view11, R.drawable.my_ripple6)
                    sound11 = soundPool.load(assets.openFd(soundList.name), 1)
                    getmpDuration = MediaPlayer()
                    getmpDuration.setDataSource(assets.openFd(soundList.name).fileDescriptor,
                        assets.openFd(soundList.name).startOffset,
                        assets.openFd(soundList.name).declaredLength)
                    getmpDuration.prepare()
                    mpDuration11 = getmpDuration.duration
                    getmpDuration.release()
                    soundPool.setOnLoadCompleteListener { soundPool, _, _ ->
                        soundPool.stop(soundPool.play(sound16, 1.0f, 1.0f, 0, 0, 1.0f))
                    }
                    binding.includeMainView11.textView.text = soundList.name.replace("tr_8", "TR-8").replace("tr_909", "TR-909")
                        .replaceAfterLast(".", "").replace("_", " ").replace("."," ").uppercase()
                    padText11 = soundList.name.replace(".ogg","")
                    findViewById<View>(R.id.include_view11).findViewById<TextView>(R.id.padText).text = soundList.name.replace("tr_8", "TR-8").replace("tr_909", "TR-909")
                        .replaceAfterLast(".", "").replace("_", " ").replace(".","").uppercase()
                    findViewById<View>(R.id.tuning_sequencer9).findViewById<TextView>(R.id.change_sound).text = soundList.name.replace("tr_8", "TR-8").replace("tr_909", "TR-909")
                        .replaceAfterLast(".", "").replace("_", " ").replace(".","").uppercase()
                }
                buttonA == 12 && buttonB == 2 -> {
                    playMode()
                    soundChangeEffect(R.id.include_main_view12, R.drawable.my_ripple6)
                    sound12 = soundPool.load(assets.openFd(soundList.name), 1)
                    getmpDuration = MediaPlayer()
                    getmpDuration.setDataSource(assets.openFd(soundList.name).fileDescriptor,
                        assets.openFd(soundList.name).startOffset,
                        assets.openFd(soundList.name).declaredLength)
                    getmpDuration.prepare()
                    mpDuration12 = getmpDuration.duration
                    getmpDuration.release()
                    soundPool.setOnLoadCompleteListener { soundPool, _, _ ->
                        soundPool.stop(soundPool.play(sound16, 1.0f, 1.0f, 0, 0, 1.0f))
                    }
                    binding.includeMainView12.textView.text = soundList.name.replace("tr_8", "TR-8").replace("tr_909", "TR-909")
                        .replaceAfterLast(".", "").replace("_", " ").replace("."," ").uppercase()
                    padText12 = soundList.name.replace(".ogg","")
                    findViewById<View>(R.id.include_view12).findViewById<TextView>(R.id.padText).text = soundList.name.replace("tr_8", "TR-8").replace("tr_909", "TR-909")
                        .replaceAfterLast(".", "").replace("_", " ").replace(".","").uppercase()
                    findViewById<View>(R.id.tuning_sequencer14).findViewById<TextView>(R.id.change_sound).text = soundList.name.replace("tr_8", "TR-8").replace("tr_909", "TR-909")
                        .replaceAfterLast(".", "").replace("_", " ").replace(".","").uppercase()
                }
                buttonA == 13 && buttonB == 2 -> {
                    playMode()
                    soundChangeEffect(R.id.include_main_view13, R.drawable.my_ripple7)
                    sound13 = soundPool.load(assets.openFd(soundList.name), 1)
                    getmpDuration = MediaPlayer()
                    getmpDuration.setDataSource(assets.openFd(soundList.name).fileDescriptor,
                        assets.openFd(soundList.name).startOffset,
                        assets.openFd(soundList.name).declaredLength)
                    getmpDuration.prepare()
                    mpDuration13 = getmpDuration.duration
                    getmpDuration.release()
                    soundPool.setOnLoadCompleteListener { soundPool, _, _ ->
                        soundPool.stop(soundPool.play(sound16, 1.0f, 1.0f, 0, 0, 1.0f))
                    }
                    binding.includeMainView13.textView.text = soundList.name.replace("tr_8", "TR-8").replace("tr_909", "TR-909")
                        .replaceAfterLast(".", "").replace("_", " ").replace("."," ").uppercase()
                    padText13 = soundList.name.replace(".ogg","")
                    findViewById<View>(R.id.include_view13).findViewById<TextView>(R.id.padText).text = soundList.name.replace("tr_8", "TR-8").replace("tr_909", "TR-909")
                        .replaceAfterLast(".", "").replace("_", " ").replace(".","").uppercase()
                    findViewById<View>(R.id.tuning_sequencer5).findViewById<TextView>(R.id.change_sound).text = soundList.name.replace("tr_8", "TR-8").replace("tr_909", "TR-909")
                        .replaceAfterLast(".", "").replace("_", " ").replace(".","").uppercase()
                }
                buttonA == 14 && buttonB == 2 -> {
                    playMode()
                    soundChangeEffect(R.id.include_main_view14, R.drawable.my_ripple7)
                    sound14 = soundPool.load(assets.openFd(soundList.name), 1)
                    getmpDuration = MediaPlayer()
                    getmpDuration.setDataSource(assets.openFd(soundList.name).fileDescriptor,
                        assets.openFd(soundList.name).startOffset,
                        assets.openFd(soundList.name).declaredLength)
                    getmpDuration.prepare()
                    mpDuration14 = getmpDuration.duration
                    getmpDuration.release()
                    soundPool.setOnLoadCompleteListener { soundPool, _, _ ->
                        soundPool.stop(soundPool.play(sound16, 1.0f, 1.0f, 0, 0, 1.0f))
                    }
                    binding.includeMainView14.textView.text = soundList.name.replace("tr_8", "TR-8").replace("tr_909", "TR-909")
                        .replaceAfterLast(".", "").replace("_", " ").replace("."," ").uppercase()
                    padText14 = soundList.name.replace(".ogg","")
                    findViewById<View>(R.id.include_view14).findViewById<TextView>(R.id.padText).text = soundList.name.replace("tr_8", "TR-8").replace("tr_909", "TR-909")
                        .replaceAfterLast(".", "").replace("_", " ").replace(".","").uppercase()
                    findViewById<View>(R.id.tuning_sequencer10).findViewById<TextView>(R.id.change_sound).text = soundList.name.replace("tr_8", "TR-8").replace("tr_909", "TR-909")
                        .replaceAfterLast(".", "").replace("_", " ").replace(".","").uppercase()
                }
                buttonA == 15 && buttonB == 2 -> {
                    playMode()
                    soundChangeEffect(R.id.include_main_view15, R.drawable.my_ripple7)
                    sound15 = soundPool.load(assets.openFd(soundList.name), 1)
                    getmpDuration = MediaPlayer()
                    getmpDuration.setDataSource(assets.openFd(soundList.name).fileDescriptor,
                        assets.openFd(soundList.name).startOffset,
                        assets.openFd(soundList.name).declaredLength)
                    getmpDuration.prepare()
                    mpDuration15 = getmpDuration.duration
                    getmpDuration.release()
                    soundPool.setOnLoadCompleteListener { soundPool, _, _ ->
                        soundPool.stop(soundPool.play(sound16, 1.0f, 1.0f, 0, 0, 1.0f))
                    }
                    binding.includeMainView15.textView.text = soundList.name.replace("tr_8", "TR-8").replace("tr_909", "TR-909")
                        .replaceAfterLast(".", "").replace("_", " ").replace("."," ").uppercase()
                    padText15 = soundList.name.replace(".ogg","")
                    findViewById<View>(R.id.include_view15).findViewById<TextView>(R.id.padText).text = soundList.name.replace("tr_8", "TR-8").replace("tr_909", "TR-909")
                        .replaceAfterLast(".", "").replace("_", " ").replace(".","").uppercase()
                    findViewById<View>(R.id.tuning_sequencer15).findViewById<TextView>(R.id.change_sound).text = soundList.name.replace("tr_8", "TR-8").replace("tr_909", "TR-909")
                        .replaceAfterLast(".", "").replace("_", " ").replace(".","").uppercase()
                }
                buttonA == 16 -> {
                    noteCount = 0
                    count = 5
                    bpm = 10
                    actionTitle = soundList.name.replace(".ogg","")
                    binding.editTitle.setText(actionTitle.replace("_", " ").uppercase(), TextView.BufferType.NORMAL)
                    soundPool.setOnLoadCompleteListener{ soundPool, _, _ ->
                        soundPool.stop(soundPool.play(sound16, 1.0f, 1.0f, 0, 0, 1.0f))
                    }
                }
            }
        } catch (e: Exception) {
            Toast.makeText(applicationContext, R.string.error, Toast.LENGTH_LONG).show()
        }
        findViewById<ListView>(R.id.list_view).visibility = View.INVISIBLE
    }

    private fun isReadExternalStoragePermissionGranted(): Boolean {
        return ContextCompat.checkSelfPermission(
                this,
                Manifest.permission.READ_EXTERNAL_STORAGE
        ) == PackageManager.PERMISSION_GRANTED
    }

    private fun requestReadExternalStoragePermission() {
        ActivityCompat.requestPermissions(
                this,
                arrayOf(Manifest.permission.READ_EXTERNAL_STORAGE),
                RECORD_AUDIO_PERMISSION_REQUEST_CODE
        )
    }

    override fun onRequestPermissionsResult(
        requestCode: Int,
        permissions: Array<out String>,
        grantResults: IntArray,
    ) {
        super.onRequestPermissionsResult(requestCode, permissions, grantResults)
        if (requestCode == RECORD_AUDIO_PERMISSION_REQUEST_CODE) {
            if (grantResults.firstOrNull() == PackageManager.PERMISSION_GRANTED) {
                stickyImmersiveMode()
                Toast.makeText(
                        this,
                        R.string.onRequestPermissionsResult1,
                        Toast.LENGTH_LONG
                ).show()
            } else {
                stickyImmersiveMode()
                Toast.makeText(
                        this,
                        R.string.onRequestPermissionsResult2,
                        Toast.LENGTH_LONG
                ).show()
            }
        }

        if (requestCode == READ_EXTERNAL_STORAGE_PERMISSION_REQUEST_CODE) {
            if (grantResults.firstOrNull() == PackageManager.PERMISSION_GRANTED) {
                stickyImmersiveMode()
                Toast.makeText(
                        this,
                        R.string.onRequestPermissionsResult1,
                        Toast.LENGTH_LONG
                ).show()
            } else {
                stickyImmersiveMode()
                Toast.makeText(
                        this,
                        R.string.onRequestPermissionsResult2,
                        Toast.LENGTH_LONG
                ).show()
            }
        }
    }

    private fun resultCreate(slot: String) {
        mRealm.executeTransaction {
            val rs = mRealm.createObject<ResultSlot>(primaryKeyValue = slot)
            rs.game1 = game1Result
            mRealm.copyToRealm(rs)
        }
    }

    private fun resultUpdate(slot: String) {
        val resultData = mRealm.where(ResultSlot::class.java).equalTo("id",slot).findFirst()
        mRealm.executeTransaction {
            resultData?.game1 = game1Result
        }
    }

    private fun resultRead(slot: String) {
        if (mRealm.where(ResultSlot::class.java).equalTo("id", slot).findFirst()?.game1 != null) {
            game1Result = (mRealm.where(ResultSlot::class.java).equalTo("id", slot).findFirst()?.game1!!)
        }
    }

    private fun create(slot: String) {
        mRealm.executeTransaction {
            val ss = mRealm.createObject<SaveSlot>(primaryKeyValue = slot)
            val ss2 = mRealm.createObject<SaveSlot2>(primaryKeyValue = slot)
            ss.pad = padText1
            ss.pad2 = padText2
            ss.pad3 = padText3
            ss.pad4 = padText4
            ss.pad5 = padText5
            ss.pad6 = padText6
            ss.pad7 = padText7
            ss.pad8 = padText8
            ss.pad9 = padText9
            ss.pad10 = padText10
            ss.pad11 = padText11
            ss.pad12 = padText12
            ss.pad13 = padText13
            ss.pad14 = padText14
            ss.pad15 = padText15
            ss.volume = soundPoolVolume
            ss.volume2 = soundPoolVolume2
            ss.volume3 = soundPoolVolume3
            ss.volume4 = soundPoolVolume4
            ss.volume5 = soundPoolVolume5
            ss.volume6 = soundPoolVolume6
            ss.volume7 = soundPoolVolume7
            ss.volume8 = soundPoolVolume8
            ss.volume9 = soundPoolVolume9
            ss.volume10 = soundPoolVolume10
            ss.volume11 = soundPoolVolume11
            ss.volume12 = soundPoolVolume12
            ss.volume13 = soundPoolVolume13
            ss.volume14 = soundPoolVolume14
            ss.volume15 = soundPoolVolume15
            ss.tempo = soundPoolTempo
            ss.tempo2 = soundPoolTempo2
            ss.tempo3 = soundPoolTempo3
            ss.tempo4 = soundPoolTempo4
            ss.tempo5 = soundPoolTempo5
            ss.tempo6 = soundPoolTempo6
            ss.tempo7 = soundPoolTempo7
            ss.tempo8 = soundPoolTempo8
            ss.tempo9 = soundPoolTempo9
            ss.tempo10 = soundPoolTempo10
            ss.tempo11 = soundPoolTempo11
            ss.tempo12 = soundPoolTempo12
            ss.tempo13 = soundPoolTempo13
            ss.tempo14 = soundPoolTempo14
            ss.tempo15 = soundPoolTempo15
            ss.vF = spvF
            ss.vF2 = spvF2
            ss.vF3 = spvF3
            ss.vF4 = spvF4
            ss.vF5 = spvF5
            ss.vF6 = spvF6
            ss.vF7 = spvF7
            ss.vF8 = spvF8
            ss.vF9 = spvF9
            ss.vF10 = spvF10
            ss.vF11 = spvF11
            ss.vF12 = spvF12
            ss.vF13 = spvF13
            ss.vF14 = spvF14
            ss.vF15 = spvF15
            ss.tF = sptF
            ss.tF2 = sptF2
            ss.tF3 = sptF3
            ss.tF4 = sptF4
            ss.tF5 = sptF5
            ss.tF6 = sptF6
            ss.tF7 = sptF7
            ss.tF8 = sptF8
            ss.tF9 = sptF9
            ss.tF10 = sptF10
            ss.tF11 = sptF11
            ss.tF12 = sptF12
            ss.tF13 = sptF13
            ss.tF14 = sptF14
            ss.tF15 = sptF15
            ss.check = padCheck
            ss.c_check = colorCheck
            ss.sequencerMaxSizeR = sequencerMaxSize
            ss.trackCountR = trackCount
            ss.sequencerBpmR = sequencerBpm
            ss.actionTitleR = binding.editTitle.text.toString()
            ss.a1 = a1.joinToString(separator = "")
            ss.a2 = a2.joinToString(separator = "")
            ss.a3 = a3.joinToString(separator = "")
            ss.a4 = a4.joinToString(separator = "")
            ss.a5 = a5.joinToString(separator = "")
            ss.a6 = a6.joinToString(separator = "")
            ss.a7 = a7.joinToString(separator = "")
            ss.a8 = a8.joinToString(separator = "")
            ss.a9 = a9.joinToString(separator = "")
            ss.a10 = a10.joinToString(separator = "")
            ss.a11 = a11.joinToString(separator = "")
            ss.a12 = a12.joinToString(separator = "")
            ss.a13 = a13.joinToString(separator = "")
            ss.a14 = a14.joinToString(separator = "")
            ss.a15 = a15.joinToString(separator = "")
            ss.a16 = a16.joinToString(separator = "")
            ss.b1 = b1.joinToString(separator = "")
            ss.b2 = b2.joinToString(separator = "")
            ss.b3 = b3.joinToString(separator = "")
            ss.b4 = b4.joinToString(separator = "")
            ss.b5 = b5.joinToString(separator = "")
            ss.b6 = b6.joinToString(separator = "")
            ss.b7 = b7.joinToString(separator = "")
            ss.b8 = b8.joinToString(separator = "")
            ss.b9 = b9.joinToString(separator = "")
            ss.b10 = b10.joinToString(separator = "")
            ss.b11 = b11.joinToString(separator = "")
            ss.b12 = b12.joinToString(separator = "")
            ss.b13 = b13.joinToString(separator = "")
            ss.b14 = b14.joinToString(separator = "")
            ss.b15 = b15.joinToString(separator = "")
            ss.b16 = b16.joinToString(separator = "")
            ss.c1 = c1.joinToString(separator = "")
            ss.c2 = c2.joinToString(separator = "")
            ss.c3 = c3.joinToString(separator = "")
            ss.c4 = c4.joinToString(separator = "")
            ss.c5 = c5.joinToString(separator = "")
            ss.c6 = c6.joinToString(separator = "")
            ss.c7 = c7.joinToString(separator = "")
            ss.c8 = c8.joinToString(separator = "")
            ss.c9 = c9.joinToString(separator = "")
            ss.c10 = c10.joinToString(separator = "")
            ss.c11 = c11.joinToString(separator = "")
            ss.c12 = c12.joinToString(separator = "")
            ss.c13 = c13.joinToString(separator = "")
            ss.c14 = c14.joinToString(separator = "")
            ss.c15 = c15.joinToString(separator = "")
            ss.c16 = c16.joinToString(separator = "")
            ss.d1 = d1.joinToString(separator = "")
            ss.d2 = d2.joinToString(separator = "")
            ss.d3 = d3.joinToString(separator = "")
            ss.d4 = d4.joinToString(separator = "")
            ss.d5 = d5.joinToString(separator = "")
            ss.d6 = d6.joinToString(separator = "")
            ss.d7 = d7.joinToString(separator = "")
            ss.d8 = d8.joinToString(separator = "")
            ss.d9 = d9.joinToString(separator = "")
            ss.d10 = d10.joinToString(separator = "")
            ss.d11 = d11.joinToString(separator = "")
            ss.d12 = d12.joinToString(separator = "")
            ss.d13 = d13.joinToString(separator = "")
            ss.d14 = d14.joinToString(separator = "")
            ss.d15 = d15.joinToString(separator = "")
            ss.d16 = d16.joinToString(separator = "")
            ss.e1 = e1.joinToString(separator = "")
            ss.e2 = e2.joinToString(separator = "")
            ss.e3 = e3.joinToString(separator = "")
            ss.e4 = e4.joinToString(separator = "")
            ss.e5 = e5.joinToString(separator = "")
            ss.e6 = e6.joinToString(separator = "")
            ss.e7 = e7.joinToString(separator = "")
            ss.e8 = e8.joinToString(separator = "")
            ss.e9 = e9.joinToString(separator = "")
            ss.e10 = e10.joinToString(separator = "")
            ss.e11 = e11.joinToString(separator = "")
            ss.e12 = e12.joinToString(separator = "")
            ss.e13 = e13.joinToString(separator = "")
            ss.e14 = e14.joinToString(separator = "")
            ss.e15 = e15.joinToString(separator = "")
            ss.e16 = e16.joinToString(separator = "")
            ss2.f1 = f1.joinToString(separator = "")
            ss2.f2 = f2.joinToString(separator = "")
            ss2.f3 = f3.joinToString(separator = "")
            ss2.f4 = f4.joinToString(separator = "")
            ss2.f5 = f5.joinToString(separator = "")
            ss2.f6 = f6.joinToString(separator = "")
            ss2.f7 = f7.joinToString(separator = "")
            ss2.f8 = f8.joinToString(separator = "")
            ss2.f9 = f9.joinToString(separator = "")
            ss2.f10 = f10.joinToString(separator = "")
            ss2.f11 = f11.joinToString(separator = "")
            ss2.f12 = f12.joinToString(separator = "")
            ss2.f13 = f13.joinToString(separator = "")
            ss2.f14 = f14.joinToString(separator = "")
            ss2.f15 = f15.joinToString(separator = "")
            ss2.f16 = f16.joinToString(separator = "")
            ss2.g1 = g1.joinToString(separator = "")
            ss2.g2 = g2.joinToString(separator = "")
            ss2.g3 = g3.joinToString(separator = "")
            ss2.g4 = g4.joinToString(separator = "")
            ss2.g5 = g5.joinToString(separator = "")
            ss2.g6 = g6.joinToString(separator = "")
            ss2.g7 = g7.joinToString(separator = "")
            ss2.g8 = g8.joinToString(separator = "")
            ss2.g9 = g9.joinToString(separator = "")
            ss2.g10 = g10.joinToString(separator = "")
            ss2.g11 = g11.joinToString(separator = "")
            ss2.g12 = g12.joinToString(separator = "")
            ss2.g13 = g13.joinToString(separator = "")
            ss2.g14 = g14.joinToString(separator = "")
            ss2.g15 = g15.joinToString(separator = "")
            ss2.g16 = g16.joinToString(separator = "")
            ss2.h1 = h1.joinToString(separator = "")
            ss2.h2 = h2.joinToString(separator = "")
            ss2.h3 = h3.joinToString(separator = "")
            ss2.h4 = h4.joinToString(separator = "")
            ss2.h5 = h5.joinToString(separator = "")
            ss2.h6 = h6.joinToString(separator = "")
            ss2.h7 = h7.joinToString(separator = "")
            ss2.h8 = h8.joinToString(separator = "")
            ss2.h9 = h9.joinToString(separator = "")
            ss2.h10 = h10.joinToString(separator = "")
            ss2.h11 = h11.joinToString(separator = "")
            ss2.h12 = h12.joinToString(separator = "")
            ss2.h13 = h13.joinToString(separator = "")
            ss2.h14 = h14.joinToString(separator = "")
            ss2.h15 = h15.joinToString(separator = "")
            ss2.h16 = h16.joinToString(separator = "")
            ss2.i1 = i1.joinToString(separator = "")
            ss2.i2 = i2.joinToString(separator = "")
            ss2.i3 = i3.joinToString(separator = "")
            ss2.i4 = i4.joinToString(separator = "")
            ss2.i5 = i5.joinToString(separator = "")
            ss2.i6 = i6.joinToString(separator = "")
            ss2.i7 = i7.joinToString(separator = "")
            ss2.i8 = i8.joinToString(separator = "")
            ss2.i9 = i9.joinToString(separator = "")
            ss2.i10 = i10.joinToString(separator = "")
            ss2.i11 = i11.joinToString(separator = "")
            ss2.i12 = i12.joinToString(separator = "")
            ss2.i13 = i13.joinToString(separator = "")
            ss2.i14 = i14.joinToString(separator = "")
            ss2.i15 = i15.joinToString(separator = "")
            ss2.i16 = i16.joinToString(separator = "")
            ss2.j1 = j1.joinToString(separator = "")
            ss2.j2 = j2.joinToString(separator = "")
            ss2.j3 = j3.joinToString(separator = "")
            ss2.j4 = j4.joinToString(separator = "")
            ss2.j5 = j5.joinToString(separator = "")
            ss2.j6 = j6.joinToString(separator = "")
            ss2.j7 = j7.joinToString(separator = "")
            ss2.j8 = j8.joinToString(separator = "")
            ss2.j9 = j9.joinToString(separator = "")
            ss2.j10 = j10.joinToString(separator = "")
            ss2.j11 = j11.joinToString(separator = "")
            ss2.j12 = j12.joinToString(separator = "")
            ss2.j13 = j13.joinToString(separator = "")
            ss2.j14 = j14.joinToString(separator = "")
            ss2.j15 = j15.joinToString(separator = "")
            ss2.j16 = j16.joinToString(separator = "")
            ss2.k1 = k1.joinToString(separator = "")
            ss2.k2 = k2.joinToString(separator = "")
            ss2.k3 = k3.joinToString(separator = "")
            ss2.k4 = k4.joinToString(separator = "")
            ss2.k5 = k5.joinToString(separator = "")
            ss2.k6 = k6.joinToString(separator = "")
            ss2.k7 = k7.joinToString(separator = "")
            ss2.k8 = k8.joinToString(separator = "")
            ss2.k9 = k9.joinToString(separator = "")
            ss2.k10 = k10.joinToString(separator = "")
            ss2.k11 = k11.joinToString(separator = "")
            ss2.k12 = k12.joinToString(separator = "")
            ss2.k13 = k13.joinToString(separator = "")
            ss2.k14 = k14.joinToString(separator = "")
            ss2.k15 = k15.joinToString(separator = "")
            ss2.k16 = k16.joinToString(separator = "")
            ss2.l1 = l1.joinToString(separator = "")
            ss2.l2 = l2.joinToString(separator = "")
            ss2.l3 = l3.joinToString(separator = "")
            ss2.l4 = l4.joinToString(separator = "")
            ss2.l5 = l5.joinToString(separator = "")
            ss2.l6 = l6.joinToString(separator = "")
            ss2.l7 = l7.joinToString(separator = "")
            ss2.l8 = l8.joinToString(separator = "")
            ss2.l9 = l9.joinToString(separator = "")
            ss2.l10 = l10.joinToString(separator = "")
            ss2.l11 = l11.joinToString(separator = "")
            ss2.l12 = l12.joinToString(separator = "")
            ss2.l13 = l13.joinToString(separator = "")
            ss2.l14 = l14.joinToString(separator = "")
            ss2.l15 = l15.joinToString(separator = "")
            ss2.l16 = l16.joinToString(separator = "")
            ss2.m1 = m1.joinToString(separator = "")
            ss2.m2 = m2.joinToString(separator = "")
            ss2.m3 = m3.joinToString(separator = "")
            ss2.m4 = m4.joinToString(separator = "")
            ss2.m5 = m5.joinToString(separator = "")
            ss2.m6 = m6.joinToString(separator = "")
            ss2.m7 = m7.joinToString(separator = "")
            ss2.m8 = m8.joinToString(separator = "")
            ss2.m9 = m9.joinToString(separator = "")
            ss2.m10 = m10.joinToString(separator = "")
            ss2.m11 = m11.joinToString(separator = "")
            ss2.m12 = m12.joinToString(separator = "")
            ss2.m13 = m13.joinToString(separator = "")
            ss2.m14 = m14.joinToString(separator = "")
            ss2.m15 = m15.joinToString(separator = "")
            ss2.m16 = m16.joinToString(separator = "")
            ss2.n1 = n1.joinToString(separator = "")
            ss2.n2 = n2.joinToString(separator = "")
            ss2.n3 = n3.joinToString(separator = "")
            ss2.n4 = n4.joinToString(separator = "")
            ss2.n5 = n5.joinToString(separator = "")
            ss2.n6 = n6.joinToString(separator = "")
            ss2.n7 = n7.joinToString(separator = "")
            ss2.n8 = n8.joinToString(separator = "")
            ss2.n9 = n9.joinToString(separator = "")
            ss2.n10 = n10.joinToString(separator = "")
            ss2.n11 = n11.joinToString(separator = "")
            ss2.n12 = n12.joinToString(separator = "")
            ss2.n13 = n13.joinToString(separator = "")
            ss2.n14 = n14.joinToString(separator = "")
            ss2.n15 = n15.joinToString(separator = "")
            ss2.n16 = n16.joinToString(separator = "")
            ss2.o1 = o1.joinToString(separator = "")
            ss2.o2 = o2.joinToString(separator = "")
            ss2.o3 = o3.joinToString(separator = "")
            ss2.o4 = o4.joinToString(separator = "")
            ss2.o5 = o5.joinToString(separator = "")
            ss2.o6 = o6.joinToString(separator = "")
            ss2.o7 = o7.joinToString(separator = "")
            ss2.o8 = o8.joinToString(separator = "")
            ss2.o9 = o9.joinToString(separator = "")
            ss2.o10 = o10.joinToString(separator = "")
            ss2.o11 = o11.joinToString(separator = "")
            ss2.o12 = o12.joinToString(separator = "")
            ss2.o13 = o13.joinToString(separator = "")
            ss2.o14 = o14.joinToString(separator = "")
            ss2.o15 = o15.joinToString(separator = "")
            ss2.o16 = o16.joinToString(separator = "")
            ss2.m_check = modeCheck
            mRealm.copyToRealm(ss)
            mRealm.copyToRealm(ss2)
        }

    }

    private fun update(slot: String) {
        val data = mRealm.where(SaveSlot::class.java).equalTo("id",slot).findFirst()
        val data2 = mRealm.where(SaveSlot2::class.java).equalTo("id",slot).findFirst()
        mRealm.executeTransaction {
            data?.pad = padText1
            data?.pad2 = padText2
            data?.pad3 = padText3
            data?.pad4 = padText4
            data?.pad5 = padText5
            data?.pad6 = padText6
            data?.pad7 = padText7
            data?.pad8 = padText8
            data?.pad9 = padText9
            data?.pad10 = padText10
            data?.pad11 = padText11
            data?.pad12 = padText12
            data?.pad13 = padText13
            data?.pad14 = padText14
            data?.pad15 = padText15
            data?.volume = soundPoolVolume
            data?.volume2 = soundPoolVolume2
            data?.volume3 = soundPoolVolume3
            data?.volume4 = soundPoolVolume4
            data?.volume5 = soundPoolVolume5
            data?.volume6 = soundPoolVolume6
            data?.volume7 = soundPoolVolume7
            data?.volume8 = soundPoolVolume8
            data?.volume9 = soundPoolVolume9
            data?.volume10 = soundPoolVolume10
            data?.volume11 = soundPoolVolume11
            data?.volume12 = soundPoolVolume12
            data?.volume13 = soundPoolVolume13
            data?.volume14 = soundPoolVolume14
            data?.volume15 = soundPoolVolume15
            data?.tempo = soundPoolTempo
            data?.tempo2 = soundPoolTempo2
            data?.tempo3 = soundPoolTempo3
            data?.tempo4 = soundPoolTempo4
            data?.tempo5 = soundPoolTempo5
            data?.tempo6 = soundPoolTempo6
            data?.tempo7 = soundPoolTempo7
            data?.tempo8 = soundPoolTempo8
            data?.tempo9 = soundPoolTempo9
            data?.tempo10 = soundPoolTempo10
            data?.tempo11 = soundPoolTempo11
            data?.tempo12 = soundPoolTempo12
            data?.tempo13 = soundPoolTempo13
            data?.tempo14 = soundPoolTempo14
            data?.tempo15 = soundPoolTempo15
            data?.vF = spvF
            data?.vF2 = spvF2
            data?.vF3 = spvF3
            data?.vF4 = spvF4
            data?.vF5 = spvF5
            data?.vF6 = spvF6
            data?.vF7 = spvF7
            data?.vF8 = spvF8
            data?.vF9 = spvF9
            data?.vF10 = spvF10
            data?.vF11 = spvF11
            data?.vF12 = spvF12
            data?.vF13 = spvF13
            data?.vF14 = spvF14
            data?.vF15 = spvF15
            data?.tF = sptF
            data?.tF2 = sptF2
            data?.tF3 = sptF3
            data?.tF4 = sptF4
            data?.tF5 = sptF5
            data?.tF6 = sptF6
            data?.tF7 = sptF7
            data?.tF8 = sptF8
            data?.tF9 = sptF9
            data?.tF10 = sptF10
            data?.tF11 = sptF11
            data?.tF12 = sptF12
            data?.tF13 = sptF13
            data?.tF14 = sptF14
            data?.tF15 = sptF15
            data?.check = padCheck
            data?.c_check = colorCheck
            data?.sequencerMaxSizeR = sequencerMaxSize
            data?.trackCountR = trackCount
            data?.sequencerBpmR = sequencerBpm
            data?.actionTitleR = binding.editTitle.text.toString()
            data?.a1 = a1.joinToString(separator = "")
            data?.a2 = a2.joinToString(separator = "")
            data?.a3 = a3.joinToString(separator = "")
            data?.a4 = a4.joinToString(separator = "")
            data?.a5 = a5.joinToString(separator = "")
            data?.a6 = a6.joinToString(separator = "")
            data?.a7 = a7.joinToString(separator = "")
            data?.a8 = a8.joinToString(separator = "")
            data?.a9 = a9.joinToString(separator = "")
            data?.a10 = a10.joinToString(separator = "")
            data?.a11 = a11.joinToString(separator = "")
            data?.a12 = a12.joinToString(separator = "")
            data?.a13 = a13.joinToString(separator = "")
            data?.a14 = a14.joinToString(separator = "")
            data?.a15 = a15.joinToString(separator = "")
            data?.a16 = a16.joinToString(separator = "")
            data?.b1 = b1.joinToString(separator = "")
            data?.b2 = b2.joinToString(separator = "")
            data?.b3 = b3.joinToString(separator = "")
            data?.b4 = b4.joinToString(separator = "")
            data?.b5 = b5.joinToString(separator = "")
            data?.b6 = b6.joinToString(separator = "")
            data?.b7 = b7.joinToString(separator = "")
            data?.b8 = b8.joinToString(separator = "")
            data?.b9 = b9.joinToString(separator = "")
            data?.b10 = b10.joinToString(separator = "")
            data?.b11 = b11.joinToString(separator = "")
            data?.b12 = b12.joinToString(separator = "")
            data?.b13 = b13.joinToString(separator = "")
            data?.b14 = b14.joinToString(separator = "")
            data?.b15 = b15.joinToString(separator = "")
            data?.b16 = b16.joinToString(separator = "")
            data?.c1 = c1.joinToString(separator = "")
            data?.c2 = c2.joinToString(separator = "")
            data?.c3 = c3.joinToString(separator = "")
            data?.c4 = c4.joinToString(separator = "")
            data?.c5 = c5.joinToString(separator = "")
            data?.c6 = c6.joinToString(separator = "")
            data?.c7 = c7.joinToString(separator = "")
            data?.c8 = c8.joinToString(separator = "")
            data?.c9 = c9.joinToString(separator = "")
            data?.c10 = c10.joinToString(separator = "")
            data?.c11 = c11.joinToString(separator = "")
            data?.c12 = c12.joinToString(separator = "")
            data?.c13 = c13.joinToString(separator = "")
            data?.c14 = c14.joinToString(separator = "")
            data?.c15 = c15.joinToString(separator = "")
            data?.c16 = c16.joinToString(separator = "")
            data?.d1 = d1.joinToString(separator = "")
            data?.d2 = d2.joinToString(separator = "")
            data?.d3 = d3.joinToString(separator = "")
            data?.d4 = d4.joinToString(separator = "")
            data?.d5 = d5.joinToString(separator = "")
            data?.d6 = d6.joinToString(separator = "")
            data?.d7 = d7.joinToString(separator = "")
            data?.d8 = d8.joinToString(separator = "")
            data?.d9 = d9.joinToString(separator = "")
            data?.d10 = d10.joinToString(separator = "")
            data?.d11 = d11.joinToString(separator = "")
            data?.d12 = d12.joinToString(separator = "")
            data?.d13 = d13.joinToString(separator = "")
            data?.d14 = d14.joinToString(separator = "")
            data?.d15 = d15.joinToString(separator = "")
            data?.d16 = d16.joinToString(separator = "")
            data?.e1 = e1.joinToString(separator = "")
            data?.e2 = e2.joinToString(separator = "")
            data?.e3 = e3.joinToString(separator = "")
            data?.e4 = e4.joinToString(separator = "")
            data?.e5 = e5.joinToString(separator = "")
            data?.e6 = e6.joinToString(separator = "")
            data?.e7 = e7.joinToString(separator = "")
            data?.e8 = e8.joinToString(separator = "")
            data?.e9 = e9.joinToString(separator = "")
            data?.e10 = e10.joinToString(separator = "")
            data?.e11 = e11.joinToString(separator = "")
            data?.e12 = e12.joinToString(separator = "")
            data?.e13 = e13.joinToString(separator = "")
            data?.e14 = e14.joinToString(separator = "")
            data?.e15 = e15.joinToString(separator = "")
            data?.e16 = e16.joinToString(separator = "")
            data2?.m_check = modeCheck
            data2?.f1 = f1.joinToString(separator = "")
            data2?.f2 = f2.joinToString(separator = "")
            data2?.f3 = f3.joinToString(separator = "")
            data2?.f4 = f4.joinToString(separator = "")
            data2?.f5 = f5.joinToString(separator = "")
            data2?.f6 = f6.joinToString(separator = "")
            data2?.f7 = f7.joinToString(separator = "")
            data2?.f8 = f8.joinToString(separator = "")
            data2?.f9 = f9.joinToString(separator = "")
            data2?.f10 = f10.joinToString(separator = "")
            data2?.f11 = f11.joinToString(separator = "")
            data2?.f12 = f12.joinToString(separator = "")
            data2?.f13 = f13.joinToString(separator = "")
            data2?.f14 = f14.joinToString(separator = "")
            data2?.f15 = f15.joinToString(separator = "")
            data2?.f16 = f16.joinToString(separator = "")
            data2?.g1 = g1.joinToString(separator = "")
            data2?.g2 = g2.joinToString(separator = "")
            data2?.g3 = g3.joinToString(separator = "")
            data2?.g4 = g4.joinToString(separator = "")
            data2?.g5 = g5.joinToString(separator = "")
            data2?.g6 = g6.joinToString(separator = "")
            data2?.g7 = g7.joinToString(separator = "")
            data2?.g8 = g8.joinToString(separator = "")
            data2?.g9 = g9.joinToString(separator = "")
            data2?.g10 = g10.joinToString(separator = "")
            data2?.g11 = g11.joinToString(separator = "")
            data2?.g12 = g12.joinToString(separator = "")
            data2?.g13 = g13.joinToString(separator = "")
            data2?.g14 = g14.joinToString(separator = "")
            data2?.g15 = g15.joinToString(separator = "")
            data2?.g16 = g16.joinToString(separator = "")
            data2?.h1 = h1.joinToString(separator = "")
            data2?.h2 = h2.joinToString(separator = "")
            data2?.h3 = h3.joinToString(separator = "")
            data2?.h4 = h4.joinToString(separator = "")
            data2?.h5 = h5.joinToString(separator = "")
            data2?.h6 = h6.joinToString(separator = "")
            data2?.h7 = h7.joinToString(separator = "")
            data2?.h8 = h8.joinToString(separator = "")
            data2?.h9 = h9.joinToString(separator = "")
            data2?.h10 = h10.joinToString(separator = "")
            data2?.h11 = h11.joinToString(separator = "")
            data2?.h12 = h12.joinToString(separator = "")
            data2?.h13 = h13.joinToString(separator = "")
            data2?.h14 = h14.joinToString(separator = "")
            data2?.h15 = h15.joinToString(separator = "")
            data2?.h16 = h16.joinToString(separator = "")
            data2?.i1 = i1.joinToString(separator = "")
            data2?.i2 = i2.joinToString(separator = "")
            data2?.i3 = i3.joinToString(separator = "")
            data2?.i4 = i4.joinToString(separator = "")
            data2?.i5 = i5.joinToString(separator = "")
            data2?.i6 = i6.joinToString(separator = "")
            data2?.i7 = i7.joinToString(separator = "")
            data2?.i8 = i8.joinToString(separator = "")
            data2?.i9 = i9.joinToString(separator = "")
            data2?.i10 = i10.joinToString(separator = "")
            data2?.i11 = i11.joinToString(separator = "")
            data2?.i12 = i12.joinToString(separator = "")
            data2?.i13 = i13.joinToString(separator = "")
            data2?.i14 = i14.joinToString(separator = "")
            data2?.i15 = i15.joinToString(separator = "")
            data2?.i16 = i16.joinToString(separator = "")
            data2?.j1 = j1.joinToString(separator = "")
            data2?.j2 = j2.joinToString(separator = "")
            data2?.j3 = j3.joinToString(separator = "")
            data2?.j4 = j4.joinToString(separator = "")
            data2?.j5 = j5.joinToString(separator = "")
            data2?.j6 = j6.joinToString(separator = "")
            data2?.j7 = j7.joinToString(separator = "")
            data2?.j8 = j8.joinToString(separator = "")
            data2?.j9 = j9.joinToString(separator = "")
            data2?.j10 = j10.joinToString(separator = "")
            data2?.j11 = j11.joinToString(separator = "")
            data2?.j12 = j12.joinToString(separator = "")
            data2?.j13 = j13.joinToString(separator = "")
            data2?.j14 = j14.joinToString(separator = "")
            data2?.j15 = j15.joinToString(separator = "")
            data2?.j16 = j16.joinToString(separator = "")
            data2?.k1 = k1.joinToString(separator = "")
            data2?.k2 = k2.joinToString(separator = "")
            data2?.k3 = k3.joinToString(separator = "")
            data2?.k4 = k4.joinToString(separator = "")
            data2?.k5 = k5.joinToString(separator = "")
            data2?.k6 = k6.joinToString(separator = "")
            data2?.k7 = k7.joinToString(separator = "")
            data2?.k8 = k8.joinToString(separator = "")
            data2?.k9 = k9.joinToString(separator = "")
            data2?.k10 = k10.joinToString(separator = "")
            data2?.k11 = k11.joinToString(separator = "")
            data2?.k12 = k12.joinToString(separator = "")
            data2?.k13 = k13.joinToString(separator = "")
            data2?.k14 = k14.joinToString(separator = "")
            data2?.k15 = k15.joinToString(separator = "")
            data2?.k16 = k16.joinToString(separator = "")
            data2?.l1 = l1.joinToString(separator = "")
            data2?.l2 = l2.joinToString(separator = "")
            data2?.l3 = l3.joinToString(separator = "")
            data2?.l4 = l4.joinToString(separator = "")
            data2?.l5 = l5.joinToString(separator = "")
            data2?.l6 = l6.joinToString(separator = "")
            data2?.l7 = l7.joinToString(separator = "")
            data2?.l8 = l8.joinToString(separator = "")
            data2?.l9 = l9.joinToString(separator = "")
            data2?.l10 = l10.joinToString(separator = "")
            data2?.l11 = l11.joinToString(separator = "")
            data2?.l12 = l12.joinToString(separator = "")
            data2?.l13 = l13.joinToString(separator = "")
            data2?.l14 = l14.joinToString(separator = "")
            data2?.l15 = l15.joinToString(separator = "")
            data2?.l16 = l16.joinToString(separator = "")
            data2?.m1 = m1.joinToString(separator = "")
            data2?.m2 = m2.joinToString(separator = "")
            data2?.m3 = m3.joinToString(separator = "")
            data2?.m4 = m4.joinToString(separator = "")
            data2?.m5 = m5.joinToString(separator = "")
            data2?.m6 = m6.joinToString(separator = "")
            data2?.m7 = m7.joinToString(separator = "")
            data2?.m8 = m8.joinToString(separator = "")
            data2?.m9 = m9.joinToString(separator = "")
            data2?.m10 = m10.joinToString(separator = "")
            data2?.m11 = m11.joinToString(separator = "")
            data2?.m12 = m12.joinToString(separator = "")
            data2?.m13 = m13.joinToString(separator = "")
            data2?.m14 = m14.joinToString(separator = "")
            data2?.m15 = m15.joinToString(separator = "")
            data2?.m16 = m16.joinToString(separator = "")
            data2?.n1 = n1.joinToString(separator = "")
            data2?.n2 = n2.joinToString(separator = "")
            data2?.n3 = n3.joinToString(separator = "")
            data2?.n4 = n4.joinToString(separator = "")
            data2?.n5 = n5.joinToString(separator = "")
            data2?.n6 = n6.joinToString(separator = "")
            data2?.n7 = n7.joinToString(separator = "")
            data2?.n8 = n8.joinToString(separator = "")
            data2?.n9 = n9.joinToString(separator = "")
            data2?.n10 = n10.joinToString(separator = "")
            data2?.n11 = n11.joinToString(separator = "")
            data2?.n12 = n12.joinToString(separator = "")
            data2?.n13 = n13.joinToString(separator = "")
            data2?.n14 = n14.joinToString(separator = "")
            data2?.n15 = n15.joinToString(separator = "")
            data2?.n16 = n16.joinToString(separator = "")
            data2?.o1 = o1.joinToString(separator = "")
            data2?.o2 = o2.joinToString(separator = "")
            data2?.o3 = o3.joinToString(separator = "")
            data2?.o4 = o4.joinToString(separator = "")
            data2?.o5 = o5.joinToString(separator = "")
            data2?.o6 = o6.joinToString(separator = "")
            data2?.o7 = o7.joinToString(separator = "")
            data2?.o8 = o8.joinToString(separator = "")
            data2?.o9 = o9.joinToString(separator = "")
            data2?.o10 = o10.joinToString(separator = "")
            data2?.o11 = o11.joinToString(separator = "")
            data2?.o12 = o12.joinToString(separator = "")
            data2?.o13 = o13.joinToString(separator = "")
            data2?.o14 = o14.joinToString(separator = "")
            data2?.o15 = o15.joinToString(separator = "")
            data2?.o16 = o16.joinToString(separator = "")
        }

    }

    @SuppressLint("SetTextI18n", "CutPasteId")
    private fun read(slot: String) {
        if (mRealm.where(SaveSlot::class.java).equalTo("id", slot).findFirst()?.pad != null) {
            menuSwitch = true
            invalidateOptionsMenu()
            switch1 = 2
            sequencerStop()
            padText1 = (mRealm.where(SaveSlot::class.java).equalTo("id", slot).findFirst()?.pad.toString())
            padText2 = (mRealm.where(SaveSlot::class.java).equalTo("id", slot).findFirst()?.pad2.toString())
            padText3 = (mRealm.where(SaveSlot::class.java).equalTo("id", slot).findFirst()?.pad3.toString())
            padText4 = (mRealm.where(SaveSlot::class.java).equalTo("id", slot).findFirst()?.pad4.toString())
            padText5 = (mRealm.where(SaveSlot::class.java).equalTo("id", slot).findFirst()?.pad5.toString())
            padText6 = (mRealm.where(SaveSlot::class.java).equalTo("id", slot).findFirst()?.pad6.toString())
            padText7 = (mRealm.where(SaveSlot::class.java).equalTo("id", slot).findFirst()?.pad7.toString())
            padText8 = (mRealm.where(SaveSlot::class.java).equalTo("id", slot).findFirst()?.pad8.toString())
            padText9 = (mRealm.where(SaveSlot::class.java).equalTo("id", slot).findFirst()?.pad9.toString())
            padText10 = (mRealm.where(SaveSlot::class.java).equalTo("id", slot).findFirst()?.pad10.toString())
            padText11 = (mRealm.where(SaveSlot::class.java).equalTo("id", slot).findFirst()?.pad11.toString())
            padText12 = (mRealm.where(SaveSlot::class.java).equalTo("id", slot).findFirst()?.pad12.toString())
            padText13 = (mRealm.where(SaveSlot::class.java).equalTo("id", slot).findFirst()?.pad13.toString())
            padText14 = (mRealm.where(SaveSlot::class.java).equalTo("id", slot).findFirst()?.pad14.toString())
            padText15 = (mRealm.where(SaveSlot::class.java).equalTo("id", slot).findFirst()?.pad15.toString())
            soundPoolVolume = (mRealm.where(SaveSlot::class.java).equalTo("id", slot).findFirst()?.volume!!)
            soundPoolVolume2 = (mRealm.where(SaveSlot::class.java).equalTo("id", slot).findFirst()?.volume2!!)
            soundPoolVolume3 = (mRealm.where(SaveSlot::class.java).equalTo("id", slot).findFirst()?.volume3!!)
            soundPoolVolume4 = (mRealm.where(SaveSlot::class.java).equalTo("id", slot).findFirst()?.volume4!!)
            soundPoolVolume5 = (mRealm.where(SaveSlot::class.java).equalTo("id", slot).findFirst()?.volume5!!)
            soundPoolVolume6 = (mRealm.where(SaveSlot::class.java).equalTo("id", slot).findFirst()?.volume6!!)
            soundPoolVolume7 = (mRealm.where(SaveSlot::class.java).equalTo("id", slot).findFirst()?.volume7!!)
            soundPoolVolume8 = (mRealm.where(SaveSlot::class.java).equalTo("id", slot).findFirst()?.volume8!!)
            soundPoolVolume9 = (mRealm.where(SaveSlot::class.java).equalTo("id", slot).findFirst()?.volume9!!)
            soundPoolVolume10 = (mRealm.where(SaveSlot::class.java).equalTo("id", slot).findFirst()?.volume10!!)
            soundPoolVolume11 = (mRealm.where(SaveSlot::class.java).equalTo("id", slot).findFirst()?.volume11!!)
            soundPoolVolume12 = (mRealm.where(SaveSlot::class.java).equalTo("id", slot).findFirst()?.volume12!!)
            soundPoolVolume13 = (mRealm.where(SaveSlot::class.java).equalTo("id", slot).findFirst()?.volume13!!)
            soundPoolVolume14 = (mRealm.where(SaveSlot::class.java).equalTo("id", slot).findFirst()?.volume14!!)
            soundPoolVolume15 = (mRealm.where(SaveSlot::class.java).equalTo("id", slot).findFirst()?.volume15!!)
            soundPoolTempo = (mRealm.where(SaveSlot::class.java).equalTo("id", slot).findFirst()?.tempo!!)
            soundPoolTempo2 = (mRealm.where(SaveSlot::class.java).equalTo("id", slot).findFirst()?.tempo2!!)
            soundPoolTempo3 = (mRealm.where(SaveSlot::class.java).equalTo("id", slot).findFirst()?.tempo3!!)
            soundPoolTempo4 = (mRealm.where(SaveSlot::class.java).equalTo("id", slot).findFirst()?.tempo4!!)
            soundPoolTempo5 = (mRealm.where(SaveSlot::class.java).equalTo("id", slot).findFirst()?.tempo5!!)
            soundPoolTempo6 = (mRealm.where(SaveSlot::class.java).equalTo("id", slot).findFirst()?.tempo6!!)
            soundPoolTempo7 = (mRealm.where(SaveSlot::class.java).equalTo("id", slot).findFirst()?.tempo7!!)
            soundPoolTempo8 = (mRealm.where(SaveSlot::class.java).equalTo("id", slot).findFirst()?.tempo8!!)
            soundPoolTempo9 = (mRealm.where(SaveSlot::class.java).equalTo("id", slot).findFirst()?.tempo9!!)
            soundPoolTempo10 = (mRealm.where(SaveSlot::class.java).equalTo("id", slot).findFirst()?.tempo10!!)
            soundPoolTempo11 = (mRealm.where(SaveSlot::class.java).equalTo("id", slot).findFirst()?.tempo11!!)
            soundPoolTempo12 = (mRealm.where(SaveSlot::class.java).equalTo("id", slot).findFirst()?.tempo12!!)
            soundPoolTempo13 = (mRealm.where(SaveSlot::class.java).equalTo("id", slot).findFirst()?.tempo13!!)
            soundPoolTempo14 = (mRealm.where(SaveSlot::class.java).equalTo("id", slot).findFirst()?.tempo14!!)
            soundPoolTempo15 = (mRealm.where(SaveSlot::class.java).equalTo("id", slot).findFirst()?.tempo15!!)
            spvF = (mRealm.where(SaveSlot::class.java).equalTo("id", slot).findFirst()?.vF!!)
            spvF2 = (mRealm.where(SaveSlot::class.java).equalTo("id", slot).findFirst()?.vF2!!)
            spvF3 = (mRealm.where(SaveSlot::class.java).equalTo("id", slot).findFirst()?.vF3!!)
            spvF4 = (mRealm.where(SaveSlot::class.java).equalTo("id", slot).findFirst()?.vF4!!)
            spvF5 = (mRealm.where(SaveSlot::class.java).equalTo("id", slot).findFirst()?.vF5!!)
            spvF6 = (mRealm.where(SaveSlot::class.java).equalTo("id", slot).findFirst()?.vF6!!)
            spvF7 = (mRealm.where(SaveSlot::class.java).equalTo("id", slot).findFirst()?.vF7!!)
            spvF8 = (mRealm.where(SaveSlot::class.java).equalTo("id", slot).findFirst()?.vF8!!)
            spvF9 = (mRealm.where(SaveSlot::class.java).equalTo("id", slot).findFirst()?.vF9!!)
            spvF10 = (mRealm.where(SaveSlot::class.java).equalTo("id", slot).findFirst()?.vF10!!)
            spvF11 = (mRealm.where(SaveSlot::class.java).equalTo("id", slot).findFirst()?.vF11!!)
            spvF12 = (mRealm.where(SaveSlot::class.java).equalTo("id", slot).findFirst()?.vF12!!)
            spvF13 = (mRealm.where(SaveSlot::class.java).equalTo("id", slot).findFirst()?.vF13!!)
            spvF14 = (mRealm.where(SaveSlot::class.java).equalTo("id", slot).findFirst()?.vF14!!)
            spvF15 = (mRealm.where(SaveSlot::class.java).equalTo("id", slot).findFirst()?.vF15!!)
            sptF = (mRealm.where(SaveSlot::class.java).equalTo("id", slot).findFirst()?.tF!!)
            sptF2 = (mRealm.where(SaveSlot::class.java).equalTo("id", slot).findFirst()?.tF2!!)
            sptF3 = (mRealm.where(SaveSlot::class.java).equalTo("id", slot).findFirst()?.tF3!!)
            sptF4 = (mRealm.where(SaveSlot::class.java).equalTo("id", slot).findFirst()?.tF4!!)
            sptF5 = (mRealm.where(SaveSlot::class.java).equalTo("id", slot).findFirst()?.tF5!!)
            sptF6 = (mRealm.where(SaveSlot::class.java).equalTo("id", slot).findFirst()?.tF6!!)
            sptF7 = (mRealm.where(SaveSlot::class.java).equalTo("id", slot).findFirst()?.tF7!!)
            sptF8 = (mRealm.where(SaveSlot::class.java).equalTo("id", slot).findFirst()?.tF8!!)
            sptF9 = (mRealm.where(SaveSlot::class.java).equalTo("id", slot).findFirst()?.tF9!!)
            sptF10 = (mRealm.where(SaveSlot::class.java).equalTo("id", slot).findFirst()?.tF10!!)
            sptF11 = (mRealm.where(SaveSlot::class.java).equalTo("id", slot).findFirst()?.tF11!!)
            sptF12 = (mRealm.where(SaveSlot::class.java).equalTo("id", slot).findFirst()?.tF12!!)
            sptF13 = (mRealm.where(SaveSlot::class.java).equalTo("id", slot).findFirst()?.tF13!!)
            sptF14 = (mRealm.where(SaveSlot::class.java).equalTo("id", slot).findFirst()?.tF14!!)
            sptF15 = (mRealm.where(SaveSlot::class.java).equalTo("id", slot).findFirst()?.tF15!!)
            padCheck = (mRealm.where(SaveSlot::class.java).equalTo("id", slot).findFirst()?.check!!)
            colorCheck = (mRealm.where(SaveSlot::class.java).equalTo("id", slot).findFirst()?.c_check!!)
            modeCheck = (mRealm.where(SaveSlot2::class.java).equalTo("id", slot).findFirst()?.m_check!!)
            sequencerMaxSize = (mRealm.where(SaveSlot::class.java).equalTo("id", slot).findFirst()?.sequencerMaxSizeR!!)
            trackCount = (mRealm.where(SaveSlot::class.java).equalTo("id", slot).findFirst()?.trackCountR!!)
            sequencerBpm = (mRealm.where(SaveSlot::class.java).equalTo("id", slot).findFirst()?.sequencerBpmR!!)
            actionTitle = (mRealm.where(SaveSlot::class.java).equalTo("id", slot).findFirst()?.actionTitleR!!)
            for(i in 0..15) {
                a1[i] = (mRealm.where(SaveSlot::class.java).equalTo("id", slot)
                    .findFirst()?.a1!!)[i].code - 48
                a2[i] = (mRealm.where(SaveSlot::class.java).equalTo("id", slot)
                    .findFirst()?.a2!!)[i].code - 48
                a3[i] = (mRealm.where(SaveSlot::class.java).equalTo("id", slot)
                    .findFirst()?.a3!!)[i].code - 48
                a4[i] = (mRealm.where(SaveSlot::class.java).equalTo("id", slot)
                    .findFirst()?.a4!!)[i].code - 48
                a5[i] = (mRealm.where(SaveSlot::class.java).equalTo("id", slot)
                    .findFirst()?.a5!!)[i].code - 48
                a6[i] = (mRealm.where(SaveSlot::class.java).equalTo("id", slot)
                    .findFirst()?.a6!!)[i].code - 48
                a7[i] = (mRealm.where(SaveSlot::class.java).equalTo("id", slot)
                    .findFirst()?.a7!!)[i].code - 48
                a8[i] = (mRealm.where(SaveSlot::class.java).equalTo("id", slot)
                    .findFirst()?.a8!!)[i].code - 48
                a9[i] = (mRealm.where(SaveSlot::class.java).equalTo("id", slot)
                    .findFirst()?.a9!!)[i].code - 48
                a10[i] = (mRealm.where(SaveSlot::class.java).equalTo("id", slot)
                    .findFirst()?.a10!!)[i].code - 48
                a11[i] = (mRealm.where(SaveSlot::class.java).equalTo("id", slot)
                    .findFirst()?.a11!!)[i].code - 48
                a12[i] = (mRealm.where(SaveSlot::class.java).equalTo("id", slot)
                    .findFirst()?.a12!!)[i].code - 48
                a13[i] = (mRealm.where(SaveSlot::class.java).equalTo("id", slot)
                    .findFirst()?.a13!!)[i].code - 48
                a14[i] = (mRealm.where(SaveSlot::class.java).equalTo("id", slot)
                    .findFirst()?.a14!!)[i].code - 48
                a15[i] = (mRealm.where(SaveSlot::class.java).equalTo("id", slot)
                    .findFirst()?.a15!!)[i].code - 48
                a16[i] = (mRealm.where(SaveSlot::class.java).equalTo("id", slot)
                    .findFirst()?.a16!!)[i].code - 48
                b1[i] = (mRealm.where(SaveSlot::class.java).equalTo("id", slot)
                    .findFirst()?.b1!!)[i].code - 48
                b2[i] = (mRealm.where(SaveSlot::class.java).equalTo("id", slot)
                    .findFirst()?.b2!!)[i].code - 48
                b3[i] = (mRealm.where(SaveSlot::class.java).equalTo("id", slot)
                    .findFirst()?.b3!!)[i].code - 48
                b4[i] = (mRealm.where(SaveSlot::class.java).equalTo("id", slot)
                    .findFirst()?.b4!!)[i].code - 48
                b5[i] = (mRealm.where(SaveSlot::class.java).equalTo("id", slot)
                    .findFirst()?.b5!!)[i].code - 48
                b6[i] = (mRealm.where(SaveSlot::class.java).equalTo("id", slot)
                    .findFirst()?.b6!!)[i].code - 48
                b7[i] = (mRealm.where(SaveSlot::class.java).equalTo("id", slot)
                    .findFirst()?.b7!!)[i].code - 48
                b8[i] = (mRealm.where(SaveSlot::class.java).equalTo("id", slot)
                    .findFirst()?.b8!!)[i].code - 48
                b9[i] = (mRealm.where(SaveSlot::class.java).equalTo("id", slot)
                    .findFirst()?.b9!!)[i].code - 48
                b10[i] = (mRealm.where(SaveSlot::class.java).equalTo("id", slot)
                    .findFirst()?.b10!!)[i].code - 48
                b11[i] = (mRealm.where(SaveSlot::class.java).equalTo("id", slot)
                    .findFirst()?.b11!!)[i].code - 48
                b12[i] = (mRealm.where(SaveSlot::class.java).equalTo("id", slot)
                    .findFirst()?.b12!!)[i].code - 48
                b13[i] = (mRealm.where(SaveSlot::class.java).equalTo("id", slot)
                    .findFirst()?.b13!!)[i].code - 48
                b14[i] = (mRealm.where(SaveSlot::class.java).equalTo("id", slot)
                    .findFirst()?.b14!!)[i].code - 48
                b15[i] = (mRealm.where(SaveSlot::class.java).equalTo("id", slot)
                    .findFirst()?.b15!!)[i].code - 48
                b16[i] = (mRealm.where(SaveSlot::class.java).equalTo("id", slot)
                    .findFirst()?.b16!!)[i].code - 48
                c1[i] = (mRealm.where(SaveSlot::class.java).equalTo("id", slot)
                    .findFirst()?.c1!!)[i].code - 48
                c2[i] = (mRealm.where(SaveSlot::class.java).equalTo("id", slot)
                    .findFirst()?.c2!!)[i].code - 48
                c3[i] = (mRealm.where(SaveSlot::class.java).equalTo("id", slot)
                    .findFirst()?.c3!!)[i].code - 48
                c4[i] = (mRealm.where(SaveSlot::class.java).equalTo("id", slot)
                    .findFirst()?.c4!!)[i].code - 48
                c5[i] = (mRealm.where(SaveSlot::class.java).equalTo("id", slot)
                    .findFirst()?.c5!!)[i].code - 48
                c6[i] = (mRealm.where(SaveSlot::class.java).equalTo("id", slot)
                    .findFirst()?.c6!!)[i].code - 48
                c7[i] = (mRealm.where(SaveSlot::class.java).equalTo("id", slot)
                    .findFirst()?.c7!!)[i].code - 48
                c8[i] = (mRealm.where(SaveSlot::class.java).equalTo("id", slot)
                    .findFirst()?.c8!!)[i].code - 48
                c9[i] = (mRealm.where(SaveSlot::class.java).equalTo("id", slot)
                    .findFirst()?.c9!!)[i].code - 48
                c10[i] = (mRealm.where(SaveSlot::class.java).equalTo("id", slot)
                    .findFirst()?.c10!!)[i].code - 48
                c11[i] = (mRealm.where(SaveSlot::class.java).equalTo("id", slot)
                    .findFirst()?.c11!!)[i].code - 48
                c12[i] = (mRealm.where(SaveSlot::class.java).equalTo("id", slot)
                    .findFirst()?.c12!!)[i].code - 48
                c13[i] = (mRealm.where(SaveSlot::class.java).equalTo("id", slot)
                    .findFirst()?.c13!!)[i].code - 48
                c14[i] = (mRealm.where(SaveSlot::class.java).equalTo("id", slot)
                    .findFirst()?.c14!!)[i].code - 48
                c15[i] = (mRealm.where(SaveSlot::class.java).equalTo("id", slot)
                    .findFirst()?.c15!!)[i].code - 48
                c16[i] = (mRealm.where(SaveSlot::class.java).equalTo("id", slot)
                    .findFirst()?.c16!!)[i].code - 48
                d1[i] = (mRealm.where(SaveSlot::class.java).equalTo("id", slot)
                    .findFirst()?.d1!!)[i].code - 48
                d2[i] = (mRealm.where(SaveSlot::class.java).equalTo("id", slot)
                    .findFirst()?.d2!!)[i].code - 48
                d3[i] = (mRealm.where(SaveSlot::class.java).equalTo("id", slot)
                    .findFirst()?.d3!!)[i].code - 48
                d4[i] = (mRealm.where(SaveSlot::class.java).equalTo("id", slot)
                    .findFirst()?.d4!!)[i].code - 48
                d5[i] = (mRealm.where(SaveSlot::class.java).equalTo("id", slot)
                    .findFirst()?.d5!!)[i].code - 48
                d6[i] = (mRealm.where(SaveSlot::class.java).equalTo("id", slot)
                    .findFirst()?.d6!!)[i].code - 48
                d7[i] = (mRealm.where(SaveSlot::class.java).equalTo("id", slot)
                    .findFirst()?.d7!!)[i].code - 48
                d8[i] = (mRealm.where(SaveSlot::class.java).equalTo("id", slot)
                    .findFirst()?.d8!!)[i].code - 48
                d9[i] = (mRealm.where(SaveSlot::class.java).equalTo("id", slot)
                    .findFirst()?.d9!!)[i].code - 48
                d10[i] = (mRealm.where(SaveSlot::class.java).equalTo("id", slot)
                    .findFirst()?.d10!!)[i].code - 48
                d11[i] = (mRealm.where(SaveSlot::class.java).equalTo("id", slot)
                    .findFirst()?.d11!!)[i].code - 48
                d12[i] = (mRealm.where(SaveSlot::class.java).equalTo("id", slot)
                    .findFirst()?.d12!!)[i].code - 48
                d13[i] = (mRealm.where(SaveSlot::class.java).equalTo("id", slot)
                    .findFirst()?.d13!!)[i].code - 48
                d14[i] = (mRealm.where(SaveSlot::class.java).equalTo("id", slot)
                    .findFirst()?.d14!!)[i].code - 48
                d15[i] = (mRealm.where(SaveSlot::class.java).equalTo("id", slot)
                    .findFirst()?.d15!!)[i].code - 48
                d16[i] = (mRealm.where(SaveSlot::class.java).equalTo("id", slot)
                    .findFirst()?.d16!!)[i].code - 48
                e1[i] = (mRealm.where(SaveSlot::class.java).equalTo("id", slot)
                    .findFirst()?.e1!!)[i].code - 48
                e2[i] = (mRealm.where(SaveSlot::class.java).equalTo("id", slot)
                    .findFirst()?.e2!!)[i].code - 48
                e3[i] = (mRealm.where(SaveSlot::class.java).equalTo("id", slot)
                    .findFirst()?.e3!!)[i].code - 48
                e4[i] = (mRealm.where(SaveSlot::class.java).equalTo("id", slot)
                    .findFirst()?.e4!!)[i].code - 48
                e5[i] = (mRealm.where(SaveSlot::class.java).equalTo("id", slot)
                    .findFirst()?.e5!!)[i].code - 48
                e6[i] = (mRealm.where(SaveSlot::class.java).equalTo("id", slot)
                    .findFirst()?.e6!!)[i].code - 48
                e7[i] = (mRealm.where(SaveSlot::class.java).equalTo("id", slot)
                    .findFirst()?.e7!!)[i].code - 48
                e8[i] = (mRealm.where(SaveSlot::class.java).equalTo("id", slot)
                    .findFirst()?.e8!!)[i].code - 48
                e9[i] = (mRealm.where(SaveSlot::class.java).equalTo("id", slot)
                    .findFirst()?.e9!!)[i].code - 48
                e10[i] = (mRealm.where(SaveSlot::class.java).equalTo("id", slot)
                    .findFirst()?.e10!!)[i].code - 48
                e11[i] = (mRealm.where(SaveSlot::class.java).equalTo("id", slot)
                    .findFirst()?.e11!!)[i].code - 48
                e12[i] = (mRealm.where(SaveSlot::class.java).equalTo("id", slot)
                    .findFirst()?.e12!!)[i].code - 48
                e13[i] = (mRealm.where(SaveSlot::class.java).equalTo("id", slot)
                    .findFirst()?.e13!!)[i].code - 48
                e14[i] = (mRealm.where(SaveSlot::class.java).equalTo("id", slot)
                    .findFirst()?.e14!!)[i].code - 48
                e15[i] = (mRealm.where(SaveSlot::class.java).equalTo("id", slot)
                    .findFirst()?.e15!!)[i].code - 48
                e16[i] = (mRealm.where(SaveSlot::class.java).equalTo("id", slot)
                    .findFirst()?.e16!!)[i].code - 48
                f1[i] = (mRealm.where(SaveSlot2::class.java).equalTo("id", slot)
                    .findFirst()?.f1!!)[i].code - 48
                f2[i] = (mRealm.where(SaveSlot2::class.java).equalTo("id", slot)
                    .findFirst()?.f2!!)[i].code - 48
                f3[i] = (mRealm.where(SaveSlot2::class.java).equalTo("id", slot)
                    .findFirst()?.f3!!)[i].code - 48
                f4[i] = (mRealm.where(SaveSlot2::class.java).equalTo("id", slot)
                    .findFirst()?.f4!!)[i].code - 48
                f5[i] = (mRealm.where(SaveSlot2::class.java).equalTo("id", slot)
                    .findFirst()?.f5!!)[i].code - 48
                f6[i] = (mRealm.where(SaveSlot2::class.java).equalTo("id", slot)
                    .findFirst()?.f6!!)[i].code - 48
                f7[i] = (mRealm.where(SaveSlot2::class.java).equalTo("id", slot)
                    .findFirst()?.f7!!)[i].code - 48
                f8[i] = (mRealm.where(SaveSlot2::class.java).equalTo("id", slot)
                    .findFirst()?.f8!!)[i].code - 48
                f9[i] = (mRealm.where(SaveSlot2::class.java).equalTo("id", slot)
                    .findFirst()?.f9!!)[i].code - 48
                f10[i] = (mRealm.where(SaveSlot2::class.java).equalTo("id", slot)
                    .findFirst()?.f10!!)[i].code - 48
                f11[i] = (mRealm.where(SaveSlot2::class.java).equalTo("id", slot)
                    .findFirst()?.f11!!)[i].code - 48
                f12[i] = (mRealm.where(SaveSlot2::class.java).equalTo("id", slot)
                    .findFirst()?.f12!!)[i].code - 48
                f13[i] = (mRealm.where(SaveSlot2::class.java).equalTo("id", slot)
                    .findFirst()?.f13!!)[i].code - 48
                f14[i] = (mRealm.where(SaveSlot2::class.java).equalTo("id", slot)
                    .findFirst()?.f14!!)[i].code - 48
                f15[i] = (mRealm.where(SaveSlot2::class.java).equalTo("id", slot)
                    .findFirst()?.f15!!)[i].code - 48
                f16[i] = (mRealm.where(SaveSlot2::class.java).equalTo("id", slot)
                    .findFirst()?.f16!!)[i].code - 48
                g1[i] = (mRealm.where(SaveSlot2::class.java).equalTo("id", slot)
                    .findFirst()?.g1!!)[i].code - 48
                g2[i] = (mRealm.where(SaveSlot2::class.java).equalTo("id", slot)
                    .findFirst()?.g2!!)[i].code - 48
                g3[i] = (mRealm.where(SaveSlot2::class.java).equalTo("id", slot)
                    .findFirst()?.g3!!)[i].code - 48
                g4[i] = (mRealm.where(SaveSlot2::class.java).equalTo("id", slot)
                    .findFirst()?.g4!!)[i].code - 48
                g5[i] = (mRealm.where(SaveSlot2::class.java).equalTo("id", slot)
                    .findFirst()?.g5!!)[i].code - 48
                g6[i] = (mRealm.where(SaveSlot2::class.java).equalTo("id", slot)
                    .findFirst()?.g6!!)[i].code - 48
                g7[i] = (mRealm.where(SaveSlot2::class.java).equalTo("id", slot)
                    .findFirst()?.g7!!)[i].code - 48
                g8[i] = (mRealm.where(SaveSlot2::class.java).equalTo("id", slot)
                    .findFirst()?.g8!!)[i].code - 48
                g9[i] = (mRealm.where(SaveSlot2::class.java).equalTo("id", slot)
                    .findFirst()?.g9!!)[i].code - 48
                g10[i] = (mRealm.where(SaveSlot2::class.java).equalTo("id", slot)
                    .findFirst()?.g10!!)[i].code - 48
                g11[i] = (mRealm.where(SaveSlot2::class.java).equalTo("id", slot)
                    .findFirst()?.g11!!)[i].code - 48
                g12[i] = (mRealm.where(SaveSlot2::class.java).equalTo("id", slot)
                    .findFirst()?.g12!!)[i].code - 48
                g13[i] = (mRealm.where(SaveSlot2::class.java).equalTo("id", slot)
                    .findFirst()?.g13!!)[i].code - 48
                g14[i] = (mRealm.where(SaveSlot2::class.java).equalTo("id", slot)
                    .findFirst()?.g14!!)[i].code - 48
                g15[i] = (mRealm.where(SaveSlot2::class.java).equalTo("id", slot)
                    .findFirst()?.g15!!)[i].code - 48
                g16[i] = (mRealm.where(SaveSlot2::class.java).equalTo("id", slot)
                    .findFirst()?.g16!!)[i].code - 48
                h1[i] = (mRealm.where(SaveSlot2::class.java).equalTo("id", slot)
                    .findFirst()?.h1!!)[i].code - 48
                h2[i] = (mRealm.where(SaveSlot2::class.java).equalTo("id", slot)
                    .findFirst()?.h2!!)[i].code - 48
                h3[i] = (mRealm.where(SaveSlot2::class.java).equalTo("id", slot)
                    .findFirst()?.h3!!)[i].code - 48
                h4[i] = (mRealm.where(SaveSlot2::class.java).equalTo("id", slot)
                    .findFirst()?.h4!!)[i].code - 48
                h5[i] = (mRealm.where(SaveSlot2::class.java).equalTo("id", slot)
                    .findFirst()?.h5!!)[i].code - 48
                h6[i] = (mRealm.where(SaveSlot2::class.java).equalTo("id", slot)
                    .findFirst()?.h6!!)[i].code - 48
                h7[i] = (mRealm.where(SaveSlot2::class.java).equalTo("id", slot)
                    .findFirst()?.h7!!)[i].code - 48
                h8[i] = (mRealm.where(SaveSlot2::class.java).equalTo("id", slot)
                    .findFirst()?.h8!!)[i].code - 48
                h9[i] = (mRealm.where(SaveSlot2::class.java).equalTo("id", slot)
                    .findFirst()?.h9!!)[i].code - 48
                h10[i] = (mRealm.where(SaveSlot2::class.java).equalTo("id", slot)
                    .findFirst()?.h10!!)[i].code - 48
                h11[i] = (mRealm.where(SaveSlot2::class.java).equalTo("id", slot)
                    .findFirst()?.h11!!)[i].code - 48
                h12[i] = (mRealm.where(SaveSlot2::class.java).equalTo("id", slot)
                    .findFirst()?.h12!!)[i].code - 48
                h13[i] = (mRealm.where(SaveSlot2::class.java).equalTo("id", slot)
                    .findFirst()?.h13!!)[i].code - 48
                h14[i] = (mRealm.where(SaveSlot2::class.java).equalTo("id", slot)
                    .findFirst()?.h14!!)[i].code - 48
                h15[i] = (mRealm.where(SaveSlot2::class.java).equalTo("id", slot)
                    .findFirst()?.h15!!)[i].code - 48
                h16[i] = (mRealm.where(SaveSlot2::class.java).equalTo("id", slot)
                    .findFirst()?.h16!!)[i].code - 48
                i1[i] = (mRealm.where(SaveSlot2::class.java).equalTo("id", slot)
                    .findFirst()?.i1!!)[i].code - 48
                i2[i] = (mRealm.where(SaveSlot2::class.java).equalTo("id", slot)
                    .findFirst()?.i2!!)[i].code - 48
                i3[i] = (mRealm.where(SaveSlot2::class.java).equalTo("id", slot)
                    .findFirst()?.i3!!)[i].code - 48
                i4[i] = (mRealm.where(SaveSlot2::class.java).equalTo("id", slot)
                    .findFirst()?.i4!!)[i].code - 48
                i5[i] = (mRealm.where(SaveSlot2::class.java).equalTo("id", slot)
                    .findFirst()?.i5!!)[i].code - 48
                i6[i] = (mRealm.where(SaveSlot2::class.java).equalTo("id", slot)
                    .findFirst()?.i6!!)[i].code - 48
                i7[i] = (mRealm.where(SaveSlot2::class.java).equalTo("id", slot)
                    .findFirst()?.i7!!)[i].code - 48
                i8[i] = (mRealm.where(SaveSlot2::class.java).equalTo("id", slot)
                    .findFirst()?.i8!!)[i].code - 48
                i9[i] = (mRealm.where(SaveSlot2::class.java).equalTo("id", slot)
                    .findFirst()?.i9!!)[i].code - 48
                i10[i] = (mRealm.where(SaveSlot2::class.java).equalTo("id", slot)
                    .findFirst()?.i10!!)[i].code - 48
                i11[i] = (mRealm.where(SaveSlot2::class.java).equalTo("id", slot)
                    .findFirst()?.i11!!)[i].code - 48
                i12[i] = (mRealm.where(SaveSlot2::class.java).equalTo("id", slot)
                    .findFirst()?.i12!!)[i].code - 48
                i13[i] = (mRealm.where(SaveSlot2::class.java).equalTo("id", slot)
                    .findFirst()?.i13!!)[i].code - 48
                i14[i] = (mRealm.where(SaveSlot2::class.java).equalTo("id", slot)
                    .findFirst()?.i14!!)[i].code - 48
                i15[i] = (mRealm.where(SaveSlot2::class.java).equalTo("id", slot)
                    .findFirst()?.i15!!)[i].code - 48
                i16[i] = (mRealm.where(SaveSlot2::class.java).equalTo("id", slot)
                    .findFirst()?.i16!!)[i].code - 48
                j1[i] = (mRealm.where(SaveSlot2::class.java).equalTo("id", slot)
                    .findFirst()?.j1!!)[i].code - 48
                j2[i] = (mRealm.where(SaveSlot2::class.java).equalTo("id", slot)
                    .findFirst()?.j2!!)[i].code - 48
                j3[i] = (mRealm.where(SaveSlot2::class.java).equalTo("id", slot)
                    .findFirst()?.j3!!)[i].code - 48
                j4[i] = (mRealm.where(SaveSlot2::class.java).equalTo("id", slot)
                    .findFirst()?.j4!!)[i].code - 48
                j5[i] = (mRealm.where(SaveSlot2::class.java).equalTo("id", slot)
                    .findFirst()?.j5!!)[i].code - 48
                j6[i] = (mRealm.where(SaveSlot2::class.java).equalTo("id", slot)
                    .findFirst()?.j6!!)[i].code - 48
                j7[i] = (mRealm.where(SaveSlot2::class.java).equalTo("id", slot)
                    .findFirst()?.j7!!)[i].code - 48
                j8[i] = (mRealm.where(SaveSlot2::class.java).equalTo("id", slot)
                    .findFirst()?.j8!!)[i].code - 48
                j9[i] = (mRealm.where(SaveSlot2::class.java).equalTo("id", slot)
                    .findFirst()?.j9!!)[i].code - 48
                j10[i] = (mRealm.where(SaveSlot2::class.java).equalTo("id", slot)
                    .findFirst()?.j10!!)[i].code - 48
                j11[i] = (mRealm.where(SaveSlot2::class.java).equalTo("id", slot)
                    .findFirst()?.j11!!)[i].code - 48
                j12[i] = (mRealm.where(SaveSlot2::class.java).equalTo("id", slot)
                    .findFirst()?.j12!!)[i].code - 48
                j13[i] = (mRealm.where(SaveSlot2::class.java).equalTo("id", slot)
                    .findFirst()?.j13!!)[i].code - 48
                j14[i] = (mRealm.where(SaveSlot2::class.java).equalTo("id", slot)
                    .findFirst()?.j14!!)[i].code - 48
                j15[i] = (mRealm.where(SaveSlot2::class.java).equalTo("id", slot)
                    .findFirst()?.j15!!)[i].code - 48
                j16[i] = (mRealm.where(SaveSlot2::class.java).equalTo("id", slot)
                    .findFirst()?.j16!!)[i].code - 48
                k1[i] = (mRealm.where(SaveSlot2::class.java).equalTo("id", slot)
                    .findFirst()?.k1!!)[i].code - 48
                k2[i] = (mRealm.where(SaveSlot2::class.java).equalTo("id", slot)
                    .findFirst()?.k2!!)[i].code - 48
                k3[i] = (mRealm.where(SaveSlot2::class.java).equalTo("id", slot)
                    .findFirst()?.k3!!)[i].code - 48
                k4[i] = (mRealm.where(SaveSlot2::class.java).equalTo("id", slot)
                    .findFirst()?.k4!!)[i].code - 48
                k5[i] = (mRealm.where(SaveSlot2::class.java).equalTo("id", slot)
                    .findFirst()?.k5!!)[i].code - 48
                k6[i] = (mRealm.where(SaveSlot2::class.java).equalTo("id", slot)
                    .findFirst()?.k6!!)[i].code - 48
                k7[i] = (mRealm.where(SaveSlot2::class.java).equalTo("id", slot)
                    .findFirst()?.k7!!)[i].code - 48
                k8[i] = (mRealm.where(SaveSlot2::class.java).equalTo("id", slot)
                    .findFirst()?.k8!!)[i].code - 48
                k9[i] = (mRealm.where(SaveSlot2::class.java).equalTo("id", slot)
                    .findFirst()?.k9!!)[i].code - 48
                k10[i] = (mRealm.where(SaveSlot2::class.java).equalTo("id", slot)
                    .findFirst()?.k10!!)[i].code - 48
                k11[i] = (mRealm.where(SaveSlot2::class.java).equalTo("id", slot)
                    .findFirst()?.k11!!)[i].code - 48
                k12[i] = (mRealm.where(SaveSlot2::class.java).equalTo("id", slot)
                    .findFirst()?.k12!!)[i].code - 48
                k13[i] = (mRealm.where(SaveSlot2::class.java).equalTo("id", slot)
                    .findFirst()?.k13!!)[i].code - 48
                k14[i] = (mRealm.where(SaveSlot2::class.java).equalTo("id", slot)
                    .findFirst()?.k14!!)[i].code - 48
                k15[i] = (mRealm.where(SaveSlot2::class.java).equalTo("id", slot)
                    .findFirst()?.k15!!)[i].code - 48
                k16[i] = (mRealm.where(SaveSlot2::class.java).equalTo("id", slot)
                    .findFirst()?.k16!!)[i].code - 48
                l1[i] = (mRealm.where(SaveSlot2::class.java).equalTo("id", slot)
                    .findFirst()?.l1!!)[i].code - 48
                l2[i] = (mRealm.where(SaveSlot2::class.java).equalTo("id", slot)
                    .findFirst()?.l2!!)[i].code - 48
                l3[i] = (mRealm.where(SaveSlot2::class.java).equalTo("id", slot)
                    .findFirst()?.l3!!)[i].code - 48
                l4[i] = (mRealm.where(SaveSlot2::class.java).equalTo("id", slot)
                    .findFirst()?.l4!!)[i].code - 48
                l5[i] = (mRealm.where(SaveSlot2::class.java).equalTo("id", slot)
                    .findFirst()?.l5!!)[i].code - 48
                l6[i] = (mRealm.where(SaveSlot2::class.java).equalTo("id", slot)
                    .findFirst()?.l6!!)[i].code - 48
                l7[i] = (mRealm.where(SaveSlot2::class.java).equalTo("id", slot)
                    .findFirst()?.l7!!)[i].code - 48
                l8[i] = (mRealm.where(SaveSlot2::class.java).equalTo("id", slot)
                    .findFirst()?.l8!!)[i].code - 48
                l9[i] = (mRealm.where(SaveSlot2::class.java).equalTo("id", slot)
                    .findFirst()?.l9!!)[i].code - 48
                l10[i] = (mRealm.where(SaveSlot2::class.java).equalTo("id", slot)
                    .findFirst()?.l10!!)[i].code - 48
                l11[i] = (mRealm.where(SaveSlot2::class.java).equalTo("id", slot)
                    .findFirst()?.l11!!)[i].code - 48
                l12[i] = (mRealm.where(SaveSlot2::class.java).equalTo("id", slot)
                    .findFirst()?.l12!!)[i].code - 48
                l13[i] = (mRealm.where(SaveSlot2::class.java).equalTo("id", slot)
                    .findFirst()?.l13!!)[i].code - 48
                l14[i] = (mRealm.where(SaveSlot2::class.java).equalTo("id", slot)
                    .findFirst()?.l14!!)[i].code - 48
                l15[i] = (mRealm.where(SaveSlot2::class.java).equalTo("id", slot)
                    .findFirst()?.l15!!)[i].code - 48
                l16[i] = (mRealm.where(SaveSlot2::class.java).equalTo("id", slot)
                    .findFirst()?.l16!!)[i].code - 48
                m1[i] = (mRealm.where(SaveSlot2::class.java).equalTo("id", slot)
                    .findFirst()?.m1!!)[i].code - 48
                m2[i] = (mRealm.where(SaveSlot2::class.java).equalTo("id", slot)
                    .findFirst()?.m2!!)[i].code - 48
                m3[i] = (mRealm.where(SaveSlot2::class.java).equalTo("id", slot)
                    .findFirst()?.m3!!)[i].code - 48
                m4[i] = (mRealm.where(SaveSlot2::class.java).equalTo("id", slot)
                    .findFirst()?.m4!!)[i].code - 48
                m5[i] = (mRealm.where(SaveSlot2::class.java).equalTo("id", slot)
                    .findFirst()?.m5!!)[i].code - 48
                m6[i] = (mRealm.where(SaveSlot2::class.java).equalTo("id", slot)
                    .findFirst()?.m6!!)[i].code - 48
                m7[i] = (mRealm.where(SaveSlot2::class.java).equalTo("id", slot)
                    .findFirst()?.m7!!)[i].code - 48
                m8[i] = (mRealm.where(SaveSlot2::class.java).equalTo("id", slot)
                    .findFirst()?.m8!!)[i].code - 48
                m9[i] = (mRealm.where(SaveSlot2::class.java).equalTo("id", slot)
                    .findFirst()?.m9!!)[i].code - 48
                m10[i] = (mRealm.where(SaveSlot2::class.java).equalTo("id", slot)
                    .findFirst()?.m10!!)[i].code - 48
                m11[i] = (mRealm.where(SaveSlot2::class.java).equalTo("id", slot)
                    .findFirst()?.m11!!)[i].code - 48
                m12[i] = (mRealm.where(SaveSlot2::class.java).equalTo("id", slot)
                    .findFirst()?.m12!!)[i].code - 48
                m13[i] = (mRealm.where(SaveSlot2::class.java).equalTo("id", slot)
                    .findFirst()?.m13!!)[i].code - 48
                m14[i] = (mRealm.where(SaveSlot2::class.java).equalTo("id", slot)
                    .findFirst()?.m14!!)[i].code - 48
                m15[i] = (mRealm.where(SaveSlot2::class.java).equalTo("id", slot)
                    .findFirst()?.m15!!)[i].code - 48
                m16[i] = (mRealm.where(SaveSlot2::class.java).equalTo("id", slot)
                    .findFirst()?.m16!!)[i].code - 48
                n1[i] = (mRealm.where(SaveSlot2::class.java).equalTo("id", slot)
                    .findFirst()?.n1!!)[i].code - 48
                n2[i] = (mRealm.where(SaveSlot2::class.java).equalTo("id", slot)
                    .findFirst()?.n2!!)[i].code - 48
                n3[i] = (mRealm.where(SaveSlot2::class.java).equalTo("id", slot)
                    .findFirst()?.n3!!)[i].code - 48
                n4[i] = (mRealm.where(SaveSlot2::class.java).equalTo("id", slot)
                    .findFirst()?.n4!!)[i].code - 48
                n5[i] = (mRealm.where(SaveSlot2::class.java).equalTo("id", slot)
                    .findFirst()?.n5!!)[i].code - 48
                n6[i] = (mRealm.where(SaveSlot2::class.java).equalTo("id", slot)
                    .findFirst()?.n6!!)[i].code - 48
                n7[i] = (mRealm.where(SaveSlot2::class.java).equalTo("id", slot)
                    .findFirst()?.n7!!)[i].code - 48
                n8[i] = (mRealm.where(SaveSlot2::class.java).equalTo("id", slot)
                    .findFirst()?.n8!!)[i].code - 48
                n9[i] = (mRealm.where(SaveSlot2::class.java).equalTo("id", slot)
                    .findFirst()?.n9!!)[i].code - 48
                n10[i] = (mRealm.where(SaveSlot2::class.java).equalTo("id", slot)
                    .findFirst()?.n10!!)[i].code - 48
                n11[i] = (mRealm.where(SaveSlot2::class.java).equalTo("id", slot)
                    .findFirst()?.n11!!)[i].code - 48
                n12[i] = (mRealm.where(SaveSlot2::class.java).equalTo("id", slot)
                    .findFirst()?.n12!!)[i].code - 48
                n13[i] = (mRealm.where(SaveSlot2::class.java).equalTo("id", slot)
                    .findFirst()?.n13!!)[i].code - 48
                n14[i] = (mRealm.where(SaveSlot2::class.java).equalTo("id", slot)
                    .findFirst()?.n14!!)[i].code - 48
                n15[i] = (mRealm.where(SaveSlot2::class.java).equalTo("id", slot)
                    .findFirst()?.n15!!)[i].code - 48
                n16[i] = (mRealm.where(SaveSlot2::class.java).equalTo("id", slot)
                    .findFirst()?.n16!!)[i].code - 48
                o1[i] = (mRealm.where(SaveSlot2::class.java).equalTo("id", slot)
                    .findFirst()?.o1!!)[i].code - 48
                o2[i] = (mRealm.where(SaveSlot2::class.java).equalTo("id", slot)
                    .findFirst()?.o2!!)[i].code - 48
                o3[i] = (mRealm.where(SaveSlot2::class.java).equalTo("id", slot)
                    .findFirst()?.o3!!)[i].code - 48
                o4[i] = (mRealm.where(SaveSlot2::class.java).equalTo("id", slot)
                    .findFirst()?.o4!!)[i].code - 48
                o5[i] = (mRealm.where(SaveSlot2::class.java).equalTo("id", slot)
                    .findFirst()?.o5!!)[i].code - 48
                o6[i] = (mRealm.where(SaveSlot2::class.java).equalTo("id", slot)
                    .findFirst()?.o6!!)[i].code - 48
                o7[i] = (mRealm.where(SaveSlot2::class.java).equalTo("id", slot)
                    .findFirst()?.o7!!)[i].code - 48
                o8[i] = (mRealm.where(SaveSlot2::class.java).equalTo("id", slot)
                    .findFirst()?.o8!!)[i].code - 48
                o9[i] = (mRealm.where(SaveSlot2::class.java).equalTo("id", slot)
                    .findFirst()?.o9!!)[i].code - 48
                o10[i] = (mRealm.where(SaveSlot2::class.java).equalTo("id", slot)
                    .findFirst()?.o10!!)[i].code - 48
                o11[i] = (mRealm.where(SaveSlot2::class.java).equalTo("id", slot)
                    .findFirst()?.o11!!)[i].code - 48
                o12[i] = (mRealm.where(SaveSlot2::class.java).equalTo("id", slot)
                    .findFirst()?.o12!!)[i].code - 48
                o13[i] = (mRealm.where(SaveSlot2::class.java).equalTo("id", slot)
                    .findFirst()?.o13!!)[i].code - 48
                o14[i] = (mRealm.where(SaveSlot2::class.java).equalTo("id", slot)
                    .findFirst()?.o14!!)[i].code - 48
                o15[i] = (mRealm.where(SaveSlot2::class.java).equalTo("id", slot)
                    .findFirst()?.o15!!)[i].code - 48
                o16[i] = (mRealm.where(SaveSlot2::class.java).equalTo("id", slot)
                    .findFirst()?.o16!!)[i].code - 48
            }
            binding.includeMainView.textView.text = padText1.replace("tr_8", "TR-8").replace("tr_909", "TR-909").replace("_"," ").uppercase()
            binding.includeMainView2.textView.text = padText2.replace("tr_8", "TR-8").replace("tr_909", "TR-909").replace("_"," ").uppercase()
            binding.includeMainView3.textView.text = padText3.replace("tr_8", "TR-8").replace("tr_909", "TR-909").replace("_"," ").uppercase()
            binding.includeMainView4.textView.text = padText4.replace("tr_8", "TR-8").replace("tr_909", "TR-909").replace("_"," ").uppercase()
            binding.includeMainView5.textView.text = padText5.replace("tr_8", "TR-8").replace("tr_909", "TR-909").replace("_"," ").uppercase()
            binding.includeMainView6.textView.text = padText6.replace("tr_8", "TR-8").replace("tr_909", "TR-909").replace("_"," ").uppercase()
            binding.includeMainView7.textView.text = padText7.replace("tr_8", "TR-8").replace("tr_909", "TR-909").replace("_"," ").uppercase()
            binding.includeMainView8.textView.text = padText8.replace("tr_8", "TR-8").replace("tr_909", "TR-909").replace("_"," ").uppercase()
            binding.includeMainView9.textView.text = padText9.replace("tr_8", "TR-8").replace("tr_909", "TR-909").replace("_"," ").uppercase()
            binding.includeMainView10.textView.text = padText10.replace("tr_8", "TR-8").replace("tr_909", "TR-909").replace("_"," ").uppercase()
            binding.includeMainView11.textView.text = padText11.replace("tr_8", "TR-8").replace("tr_909", "TR-909").replace("_"," ").uppercase()
            binding.includeMainView12.textView.text = padText12.replace("tr_8", "TR-8").replace("tr_909", "TR-909").replace("_"," ").uppercase()
            binding.includeMainView13.textView.text = padText13.replace("tr_8", "TR-8").replace("tr_909", "TR-909").replace("_"," ").uppercase()
            binding.includeMainView14.textView.text = padText14.replace("tr_8", "TR-8").replace("tr_909", "TR-909").replace("_"," ").uppercase()
            binding.includeMainView15.textView.text = padText15.replace("tr_8", "TR-8").replace("tr_909", "TR-909").replace("_"," ").uppercase()
            findViewById<View>(R.id.tuning_sequencer).findViewById<TextView>(R.id.change_sound).text = padText1.replace("tr_8", "TR-8").replace("tr_909", "TR-909").replace("_"," ").uppercase()
            findViewById<View>(R.id.tuning_sequencer2).findViewById<TextView>(R.id.change_sound).text = padText4.replace("tr_8", "TR-8").replace("tr_909", "TR-909").replace("_"," ").uppercase()
            findViewById<View>(R.id.tuning_sequencer3).findViewById<TextView>(R.id.change_sound).text = padText7.replace("tr_8", "TR-8").replace("tr_909", "TR-909").replace("_"," ").uppercase()
            findViewById<View>(R.id.tuning_sequencer4).findViewById<TextView>(R.id.change_sound).text = padText10.replace("tr_8", "TR-8").replace("tr_909", "TR-909").replace("_"," ").uppercase()
            findViewById<View>(R.id.tuning_sequencer5).findViewById<TextView>(R.id.change_sound).text = padText13.replace("tr_8", "TR-8").replace("tr_909", "TR-909").replace("_"," ").uppercase()
            findViewById<View>(R.id.tuning_sequencer6).findViewById<TextView>(R.id.change_sound).text = padText2.replace("tr_8", "TR-8").replace("tr_909", "TR-909").replace("_"," ").uppercase()
            findViewById<View>(R.id.tuning_sequencer7).findViewById<TextView>(R.id.change_sound).text = padText5.replace("tr_8", "TR-8").replace("tr_909", "TR-909").replace("_"," ").uppercase()
            findViewById<View>(R.id.tuning_sequencer8).findViewById<TextView>(R.id.change_sound).text = padText8.replace("tr_8", "TR-8").replace("tr_909", "TR-909").replace("_"," ").uppercase()
            findViewById<View>(R.id.tuning_sequencer9).findViewById<TextView>(R.id.change_sound).text = padText11.replace("tr_8", "TR-8").replace("tr_909", "TR-909").replace("_"," ").uppercase()
            findViewById<View>(R.id.tuning_sequencer10).findViewById<TextView>(R.id.change_sound).text = padText14.replace("tr_8", "TR-8").replace("tr_909", "TR-909").replace("_"," ").uppercase()
            findViewById<View>(R.id.tuning_sequencer11).findViewById<TextView>(R.id.change_sound).text = padText3.replace("tr_8", "TR-8").replace("tr_909", "TR-909").replace("_"," ").uppercase()
            findViewById<View>(R.id.tuning_sequencer12).findViewById<TextView>(R.id.change_sound).text = padText6.replace("tr_8", "TR-8").replace("tr_909", "TR-909").replace("_"," ").uppercase()
            findViewById<View>(R.id.tuning_sequencer13).findViewById<TextView>(R.id.change_sound).text = padText9.replace("tr_8", "TR-8").replace("tr_909", "TR-909").replace("_"," ").uppercase()
            findViewById<View>(R.id.tuning_sequencer14).findViewById<TextView>(R.id.change_sound).text = padText12.replace("tr_8", "TR-8").replace("tr_909", "TR-909").replace("_"," ").uppercase()
            findViewById<View>(R.id.tuning_sequencer15).findViewById<TextView>(R.id.change_sound).text = padText15.replace("tr_8", "TR-8").replace("tr_909", "TR-909").replace("_"," ").uppercase()
            pasteText()
            findViewById<View>(R.id.line_measure).findViewById<TextView>(R.id.track_count).text = trackCount.toString()
            findViewById<View>(R.id.line_measure).findViewById<TextView>(R.id.measure_max).text = (sequencerMaxSize + 1).toString()
            findViewById<View>(R.id.bpm).findViewById<EditText>(R.id.bpmCount).setText(sequencerBpm.toString(), TextView.BufferType.NORMAL)
            binding.editTitle.setText(actionTitle.replace("_", " ").uppercase(), TextView.BufferType.NORMAL)
            if (modeCheck == 0) {
                switchPadSequencer(View.VISIBLE)
                when (padCheck) {
                    53 -> {
                        x53()
                    }
                    43 -> {
                        x43()
                    }
                    33 -> {
                        x33()
                    }
                    52 -> {
                        x52()
                    }
                    42 -> {
                        x42()
                    }
                    32 -> {
                        x32()
                    }
                    22 -> {
                        x22()
                    }
                    21 -> {
                        x21()
                    }
                    51 -> {
                        x51()
                    }
                    41 -> {
                        x41()
                    }
                    31 -> {
                        x31()
                    }
                }
            } else {
                if (resources.configuration.orientation == Configuration.ORIENTATION_LANDSCAPE) {
                    binding.sequencerView.visibility = View.VISIBLE
                    binding.notes.visibility = View.VISIBLE
                    changeSequence()
                }
                sequencerChange(View.GONE)
            }
            if (colorCheck == 1) {
                if (resources.configuration.orientation == Configuration.ORIENTATION_PORTRAIT) {
                    findViewById<View>(R.id.include_main_view).findViewById<ImageView>(R.id.imageView).setImageResource(R.drawable.my_ripple3)
                    findViewById<View>(R.id.include_main_view2).findViewById<ImageView>(R.id.imageView).setImageResource(R.drawable.my_ripple3)
                    findViewById<View>(R.id.include_main_view3).findViewById<ImageView>(R.id.imageView).setImageResource(R.drawable.my_ripple3)
                    findViewById<View>(R.id.include_main_view4).findViewById<ImageView>(R.id.imageView).setImageResource(R.drawable.my_ripple4)
                    findViewById<View>(R.id.include_main_view5).findViewById<ImageView>(R.id.imageView).setImageResource(R.drawable.my_ripple4)
                    findViewById<View>(R.id.include_main_view6).findViewById<ImageView>(R.id.imageView).setImageResource(R.drawable.my_ripple4)
                    findViewById<View>(R.id.include_main_view7).findViewById<ImageView>(R.id.imageView).setImageResource(R.drawable.my_ripple5)
                    findViewById<View>(R.id.include_main_view8).findViewById<ImageView>(R.id.imageView).setImageResource(R.drawable.my_ripple5)
                    findViewById<View>(R.id.include_main_view9).findViewById<ImageView>(R.id.imageView).setImageResource(R.drawable.my_ripple5)
                    findViewById<View>(R.id.include_main_view10).findViewById<ImageView>(R.id.imageView).setImageResource(R.drawable.my_ripple6)
                    findViewById<View>(R.id.include_main_view11).findViewById<ImageView>(R.id.imageView).setImageResource(R.drawable.my_ripple6)
                    findViewById<View>(R.id.include_main_view12).findViewById<ImageView>(R.id.imageView).setImageResource(R.drawable.my_ripple6)
                    findViewById<View>(R.id.include_main_view13).findViewById<ImageView>(R.id.imageView).setImageResource(R.drawable.my_ripple7)
                    findViewById<View>(R.id.include_main_view14).findViewById<ImageView>(R.id.imageView).setImageResource(R.drawable.my_ripple7)
                    findViewById<View>(R.id.include_main_view15).findViewById<ImageView>(R.id.imageView).setImageResource(R.drawable.my_ripple7)
                }
                else if (resources.configuration.orientation == Configuration.ORIENTATION_LANDSCAPE) {
                    findViewById<View>(R.id.include_main_view).findViewById<ImageView>(R.id.imageView).setImageResource(R.drawable.my_ripple3)
                    findViewById<View>(R.id.include_main_view2).findViewById<ImageView>(R.id.imageView).setImageResource(R.drawable.my_ripple3)
                    findViewById<View>(R.id.include_main_view3).findViewById<ImageView>(R.id.imageView).setImageResource(R.drawable.my_ripple3)
                    findViewById<View>(R.id.include_main_view4).findViewById<ImageView>(R.id.imageView).setImageResource(R.drawable.my_ripple4)
                    findViewById<View>(R.id.include_main_view5).findViewById<ImageView>(R.id.imageView).setImageResource(R.drawable.my_ripple4)
                    findViewById<View>(R.id.include_main_view6).findViewById<ImageView>(R.id.imageView).setImageResource(R.drawable.my_ripple4)
                    findViewById<View>(R.id.include_main_view7).findViewById<ImageView>(R.id.imageView).setImageResource(R.drawable.my_ripple5)
                    findViewById<View>(R.id.include_main_view8).findViewById<ImageView>(R.id.imageView).setImageResource(R.drawable.my_ripple5)
                    findViewById<View>(R.id.include_main_view9).findViewById<ImageView>(R.id.imageView).setImageResource(R.drawable.my_ripple5)
                    findViewById<View>(R.id.include_main_view10).findViewById<ImageView>(R.id.imageView).setImageResource(R.drawable.my_ripple6)
                    findViewById<View>(R.id.include_main_view11).findViewById<ImageView>(R.id.imageView).setImageResource(R.drawable.my_ripple6)
                    findViewById<View>(R.id.include_main_view12).findViewById<ImageView>(R.id.imageView).setImageResource(R.drawable.my_ripple6)
                    findViewById<View>(R.id.include_main_view13).findViewById<ImageView>(R.id.imageView).setImageResource(R.drawable.my_ripple7)
                    findViewById<View>(R.id.include_main_view14).findViewById<ImageView>(R.id.imageView).setImageResource(R.drawable.my_ripple7)
                    findViewById<View>(R.id.include_main_view15).findViewById<ImageView>(R.id.imageView).setImageResource(R.drawable.my_ripple7)
                }
            } else {
                if (resources.configuration.orientation == Configuration.ORIENTATION_PORTRAIT) {
                    findViewById<View>(R.id.include_main_view).findViewById<ImageView>(R.id.imageView).setImageResource(R.drawable.my_ripple)
                    findViewById<View>(R.id.include_main_view2).findViewById<ImageView>(R.id.imageView).setImageResource(R.drawable.my_ripple)
                    findViewById<View>(R.id.include_main_view3).findViewById<ImageView>(R.id.imageView).setImageResource(R.drawable.my_ripple)
                    findViewById<View>(R.id.include_main_view4).findViewById<ImageView>(R.id.imageView).setImageResource(R.drawable.my_ripple)
                    findViewById<View>(R.id.include_main_view5).findViewById<ImageView>(R.id.imageView).setImageResource(R.drawable.my_ripple)
                    findViewById<View>(R.id.include_main_view6).findViewById<ImageView>(R.id.imageView).setImageResource(R.drawable.my_ripple)
                    findViewById<View>(R.id.include_main_view7).findViewById<ImageView>(R.id.imageView).setImageResource(R.drawable.my_ripple)
                    findViewById<View>(R.id.include_main_view8).findViewById<ImageView>(R.id.imageView).setImageResource(R.drawable.my_ripple)
                    findViewById<View>(R.id.include_main_view9).findViewById<ImageView>(R.id.imageView).setImageResource(R.drawable.my_ripple)
                    findViewById<View>(R.id.include_main_view10).findViewById<ImageView>(R.id.imageView).setImageResource(R.drawable.my_ripple)
                    findViewById<View>(R.id.include_main_view11).findViewById<ImageView>(R.id.imageView).setImageResource(R.drawable.my_ripple)
                    findViewById<View>(R.id.include_main_view12).findViewById<ImageView>(R.id.imageView).setImageResource(R.drawable.my_ripple)
                    findViewById<View>(R.id.include_main_view13).findViewById<ImageView>(R.id.imageView).setImageResource(R.drawable.my_ripple)
                    findViewById<View>(R.id.include_main_view14).findViewById<ImageView>(R.id.imageView).setImageResource(R.drawable.my_ripple)
                    findViewById<View>(R.id.include_main_view15).findViewById<ImageView>(R.id.imageView).setImageResource(R.drawable.my_ripple)
                }
                else if (resources.configuration.orientation == Configuration.ORIENTATION_LANDSCAPE) {
                    findViewById<View>(R.id.include_main_view).findViewById<ImageView>(R.id.imageView).setImageResource(R.drawable.my_ripple)
                    findViewById<View>(R.id.include_main_view2).findViewById<ImageView>(R.id.imageView).setImageResource(R.drawable.my_ripple)
                    findViewById<View>(R.id.include_main_view3).findViewById<ImageView>(R.id.imageView).setImageResource(R.drawable.my_ripple)
                    findViewById<View>(R.id.include_main_view4).findViewById<ImageView>(R.id.imageView).setImageResource(R.drawable.my_ripple)
                    findViewById<View>(R.id.include_main_view5).findViewById<ImageView>(R.id.imageView).setImageResource(R.drawable.my_ripple)
                    findViewById<View>(R.id.include_main_view6).findViewById<ImageView>(R.id.imageView).setImageResource(R.drawable.my_ripple)
                    findViewById<View>(R.id.include_main_view7).findViewById<ImageView>(R.id.imageView).setImageResource(R.drawable.my_ripple)
                    findViewById<View>(R.id.include_main_view8).findViewById<ImageView>(R.id.imageView).setImageResource(R.drawable.my_ripple)
                    findViewById<View>(R.id.include_main_view9).findViewById<ImageView>(R.id.imageView).setImageResource(R.drawable.my_ripple)
                    findViewById<View>(R.id.include_main_view10).findViewById<ImageView>(R.id.imageView).setImageResource(R.drawable.my_ripple)
                    findViewById<View>(R.id.include_main_view11).findViewById<ImageView>(R.id.imageView).setImageResource(R.drawable.my_ripple)
                    findViewById<View>(R.id.include_main_view12).findViewById<ImageView>(R.id.imageView).setImageResource(R.drawable.my_ripple)
                    findViewById<View>(R.id.include_main_view13).findViewById<ImageView>(R.id.imageView).setImageResource(R.drawable.my_ripple)
                    findViewById<View>(R.id.include_main_view14).findViewById<ImageView>(R.id.imageView).setImageResource(R.drawable.my_ripple)
                    findViewById<View>(R.id.include_main_view15).findViewById<ImageView>(R.id.imageView).setImageResource(R.drawable.my_ripple)
                }
            }
            try {
                sound1 = soundPool.load(assets.openFd("$padText1.ogg"), 1)
            } catch (e: Exception) {
                try {
                    sound1 = soundPool.load(padText1, 1)
                    binding.includeMainView.textView.text = padText1.replaceBeforeLast("/", "").replace("/", "").replace(".ogg", "").uppercase()
                    findViewById<View>(R.id.include_view).findViewById<TextView>(R.id.padText).text = padText1.replaceBeforeLast("/", "").replace("/", "").replace(".ogg", "").uppercase()
                } catch (e: Exception) {
                    sound1 = soundPool.load(assets.openFd("soundless.ogg"), 1)
                    binding.includeMainView.textView.text = ""
                    findViewById<View>(R.id.include_view).findViewById<TextView>(R.id.padText).text = ""
                }
            }
            try {
                sound2 = soundPool.load(assets.openFd("$padText2.ogg"), 1)
            } catch (e: Exception) {
                try {
                    sound2 = soundPool.load(padText2, 1)
                    binding.includeMainView2.textView.text = padText2.replaceBeforeLast("/", "").replace("/", "").replace(".ogg", "").uppercase()
                    findViewById<View>(R.id.include_view2).findViewById<TextView>(R.id.padText).text = padText2.replaceBeforeLast("/", "").replace("/", "").replace(".ogg", "").uppercase()
                } catch (e: Exception) {
                    sound2 = soundPool.load(assets.openFd("soundless.ogg"), 1)
                    binding.includeMainView2.textView.text = ""
                    findViewById<View>(R.id.include_view2).findViewById<TextView>(R.id.padText).text = ""
                }
            }
            try {
                sound3 = soundPool.load(assets.openFd("$padText3.ogg"), 1)
            } catch (e: Exception) {
                try {
                    sound3 = soundPool.load(padText3, 1)
                    binding.includeMainView3.textView.text = padText3.replaceBeforeLast("/", "").replace("/", "").replace(".ogg", "").uppercase()
                    findViewById<View>(R.id.include_view3).findViewById<TextView>(R.id.padText).text = padText3.replaceBeforeLast("/", "").replace("/", "").replace(".ogg", "").uppercase()
                } catch (e: Exception) {
                    sound3 = soundPool.load(assets.openFd("soundless.ogg"), 1)
                    binding.includeMainView3.textView.text = ""
                    findViewById<View>(R.id.include_view3).findViewById<TextView>(R.id.padText).text = ""
                }
            }
            try {
                sound4 = soundPool.load(assets.openFd("$padText4.ogg"), 1)
            } catch (e: Exception) {
                try {
                    sound4 = soundPool.load(padText4, 1)
                    binding.includeMainView4.textView.text = padText4.replaceBeforeLast("/", "").replace("/", "").replace(".ogg", "").uppercase()
                    findViewById<View>(R.id.include_view4).findViewById<TextView>(R.id.padText).text = padText4.replaceBeforeLast("/", "").replace("/", "").replace(".ogg", "").uppercase()
                } catch (e: Exception) {
                    sound4 = soundPool.load(assets.openFd("soundless.ogg"), 1)
                    binding.includeMainView4.textView.text = ""
                    findViewById<View>(R.id.include_view4).findViewById<TextView>(R.id.padText).text = ""
                }
            }
            try {
                sound5 = soundPool.load(assets.openFd("$padText5.ogg"), 1)
            } catch (e: Exception) {
                try {
                    sound5 = soundPool.load(padText5, 1)
                    binding.includeMainView5.textView.text = padText5.replaceBeforeLast("/", "").replace("/", "").replace(".ogg", "").uppercase()
                    findViewById<View>(R.id.include_view5).findViewById<TextView>(R.id.padText).text = padText5.replaceBeforeLast("/", "").replace("/", "").replace(".ogg", "").uppercase()
                } catch (e: Exception) {
                    sound5 = soundPool.load(assets.openFd("soundless.ogg"), 1)
                    binding.includeMainView5.textView.text = ""
                    findViewById<View>(R.id.include_view5).findViewById<TextView>(R.id.padText).text = ""
                }
            }
            try {
                sound6 = soundPool.load(assets.openFd("$padText6.ogg"), 1)
            } catch (e: Exception) {
                try {
                    sound6 = soundPool.load(padText6, 1)
                    binding.includeMainView6.textView.text = padText6.replaceBeforeLast("/", "").replace("/", "").replace(".ogg", "").uppercase()
                    findViewById<View>(R.id.include_view6).findViewById<TextView>(R.id.padText).text = padText6.replaceBeforeLast("/", "").replace("/", "").replace(".ogg", "").uppercase()
                } catch (e: Exception) {
                    sound6 = soundPool.load(assets.openFd("soundless.ogg"), 1)
                    binding.includeMainView6.textView.text = ""
                    findViewById<View>(R.id.include_view6).findViewById<TextView>(R.id.padText).text = ""
                }
            }
            try {
                sound7 = soundPool.load(assets.openFd("$padText7.ogg"), 1)
            } catch (e: Exception) {
                try {
                    sound7 = soundPool.load(padText7, 1)
                    binding.includeMainView7.textView.text = padText7.replaceBeforeLast("/", "").replace("/", "").replace(".ogg", "").uppercase()
                    findViewById<View>(R.id.include_view7).findViewById<TextView>(R.id.padText).text = padText7.replaceBeforeLast("/", "").replace("/", "").replace(".ogg", "").uppercase()
                } catch (e: Exception) {
                    sound7 = soundPool.load(assets.openFd("soundless.ogg"), 1)
                    binding.includeMainView7.textView.text = ""
                    findViewById<View>(R.id.include_view7).findViewById<TextView>(R.id.padText).text = ""
                }
            }
            try {
                sound8 = soundPool.load(assets.openFd("$padText8.ogg"), 1)
            } catch (e: Exception) {
                try {
                    sound8 = soundPool.load(padText8, 1)
                    binding.includeMainView8.textView.text = padText8.replaceBeforeLast("/", "").replace("/", "").replace(".ogg", "").uppercase()
                    findViewById<View>(R.id.include_view8).findViewById<TextView>(R.id.padText).text = padText8.replaceBeforeLast("/", "").replace("/", "").replace(".ogg", "").uppercase()
                } catch (e: Exception) {
                    sound8 = soundPool.load(assets.openFd("soundless.ogg"), 1)
                    binding.includeMainView8.textView.text = ""
                    findViewById<View>(R.id.include_view8).findViewById<TextView>(R.id.padText).text = ""
                }
            }
            try {
                sound9 = soundPool.load(assets.openFd("$padText9.ogg"), 1)
            } catch (e: Exception) {
                try {
                    sound9 = soundPool.load(padText9, 1)
                    binding.includeMainView9.textView.text = padText9.replaceBeforeLast("/", "").replace("/", "").replace(".ogg", "").uppercase()
                    findViewById<View>(R.id.include_view9).findViewById<TextView>(R.id.padText).text = padText9.replaceBeforeLast("/", "").replace("/", "").replace(".ogg", "").uppercase()
                } catch (e: Exception) {
                    sound9 = soundPool.load(assets.openFd("soundless.ogg"), 1)
                    binding.includeMainView9.textView.text = ""
                    findViewById<View>(R.id.include_view9).findViewById<TextView>(R.id.padText).text = ""
                }
            }
            try {
                sound10 = soundPool.load(assets.openFd("$padText10.ogg"), 1)
            } catch (e: Exception) {
                try {
                    sound10 = soundPool.load(padText10, 1)
                    binding.includeMainView10.textView.text = padText10.replaceBeforeLast("/", "").replace("/", "").replace(".ogg", "").uppercase()
                    findViewById<View>(R.id.include_view10).findViewById<TextView>(R.id.padText).text = padText10.replaceBeforeLast("/", "").replace("/", "").replace(".ogg", "").uppercase()
                } catch (e: Exception) {
                    sound10 = soundPool.load(assets.openFd("soundless.ogg"), 1)
                    binding.includeMainView10.textView.text = ""
                    findViewById<View>(R.id.include_view10).findViewById<TextView>(R.id.padText).text = ""
                }
            }
            try {
                sound11 = soundPool.load(assets.openFd("$padText11.ogg"), 1)
            } catch (e: Exception) {
                try {
                    sound11 = soundPool.load(padText11, 1)
                    binding.includeMainView11.textView.text = padText11.replaceBeforeLast("/", "").replace("/", "").replace(".ogg", "").uppercase()
                    findViewById<View>(R.id.include_view11).findViewById<TextView>(R.id.padText).text = padText11.replaceBeforeLast("/", "").replace("/", "").replace(".ogg", "").uppercase()
                } catch (e: Exception) {
                    sound11 = soundPool.load(assets.openFd("soundless.ogg"), 1)
                    binding.includeMainView11.textView.text = ""
                    findViewById<View>(R.id.include_view11).findViewById<TextView>(R.id.padText).text = ""
                }
            }
            try {
                sound12 = soundPool.load(assets.openFd("$padText12.ogg"), 1)
            } catch (e: Exception) {
                try {
                    sound12 = soundPool.load(padText12, 1)
                    binding.includeMainView12.textView.text = padText12.replaceBeforeLast("/", "").replace("/", "").replace(".ogg", "").uppercase()
                    findViewById<View>(R.id.include_view12).findViewById<TextView>(R.id.padText).text = padText12.replaceBeforeLast("/", "").replace("/", "").replace(".ogg", "").uppercase()
                } catch (e: Exception) {
                    sound12 = soundPool.load(assets.openFd("soundless.ogg"), 1)
                    binding.includeMainView12.textView.text = ""
                    findViewById<View>(R.id.include_view12).findViewById<TextView>(R.id.padText).text = ""
                }
            }
            try {
                sound13 = soundPool.load(assets.openFd("$padText13.ogg"), 1)
            } catch (e: Exception) {
                try {
                    sound13 = soundPool.load(padText13, 1)
                    binding.includeMainView13.textView.text = padText13.replaceBeforeLast("/", "").replace("/", "").replace(".ogg", "").uppercase()
                    findViewById<View>(R.id.include_view13).findViewById<TextView>(R.id.padText).text = padText13.replaceBeforeLast("/", "").replace("/", "").replace(".ogg", "").uppercase()
                } catch (e: Exception) {
                    sound13 = soundPool.load(assets.openFd("soundless.ogg"), 1)
                    binding.includeMainView13.textView.text = ""
                    findViewById<View>(R.id.include_view13).findViewById<TextView>(R.id.padText).text = ""
                }
            }
            try {
                sound14 = soundPool.load(assets.openFd("$padText14.ogg"), 1)
            } catch (e: Exception) {
                try {
                    sound14 = soundPool.load(padText14, 1)
                    binding.includeMainView14.textView.text = padText14.replaceBeforeLast("/", "").replace("/", "").replace(".ogg", "").uppercase()
                    findViewById<View>(R.id.include_view14).findViewById<TextView>(R.id.padText).text = padText14.replaceBeforeLast("/", "").replace("/", "").replace(".ogg", "").uppercase()
                } catch (e: Exception) {
                    sound14 = soundPool.load(assets.openFd("soundless.ogg"), 1)
                    binding.includeMainView14.textView.text = ""
                    findViewById<View>(R.id.include_view14).findViewById<TextView>(R.id.padText).text = ""
                }
            }
            try {
                sound15 = soundPool.load(assets.openFd("$padText15.ogg"), 1)
            } catch (e: Exception) {
                try {
                    sound15 = soundPool.load(padText15, 1)
                    binding.includeMainView15.textView.text = padText15.replaceBeforeLast("/", "").replace("/", "").replace(".ogg", "").uppercase()
                    findViewById<View>(R.id.include_view15).findViewById<TextView>(R.id.padText).text = padText15.replaceBeforeLast("/", "").replace("/", "").replace(".ogg", "").uppercase()
                } catch (e: Exception) {
                    sound15 = soundPool.load(assets.openFd("soundless.ogg"), 1)
                    binding.includeMainView15.textView.text = ""
                    findViewById<View>(R.id.include_view15).findViewById<TextView>(R.id.padText).text = ""
                }
            }
        } else {
            Toast.makeText(applicationContext, R.string.empty, Toast.LENGTH_SHORT).show()
        }
    }

    override fun onCreateOptionsMenu(menu: Menu?): Boolean {
        super.onCreateOptionsMenu(menu)

        val inflater = menuInflater
        inflater.inflate(R.menu.menu, menu)

        val menuLamp = menu!!.findItem(R.id.menu1)
        val menuLamp2 = menu.findItem(R.id.menu10)
        val menuLampLock = menu.findItem(R.id.action_settings)
        if (menuSwitch) {
            if (gameSwitch == 1) {
                menuLamp.setIcon(R.drawable.start)
            } else {
                menuLamp.setIcon(R.drawable.ic_baseline_play_arrow_24)
            }
        } else {
            if (gameSwitch == 1) {
                menuLamp.setIcon(R.drawable.stop)
            } else {
                menuLamp.setIcon(R.drawable.ic_baseline_stop_24)
            }
        }

        if (menuSwitchLock) {
            menuLampLock.setIcon(R.drawable.ic_baseline_tune_24)
            menuLamp.isVisible = true
            menuLamp2.isVisible = true
        } else {
            menuLampLock.setIcon(R.drawable.ic_baseline_lock_24)
            menuLamp.isVisible = false
            menuLamp2.isVisible = false
        }

        return true
    }

    private var menuSwitch = true
    private var menuSwitch2 = true
    private var menuSwitchLock = true
    private var switch1 = 0
    private var gameSwitch = 0

    @SuppressLint("SimpleDateFormat")
    override fun onOptionsItemSelected(item: MenuItem): Boolean {

        val soundListView = findViewById<ListView>(R.id.list_view)
        val actionGridView = findViewById<GridView>(R.id.grid_view)
        val chooseGridView = findViewById<GridView>(R.id.grid_view_choose)
        val tuningView = findViewById<View>(R.id.view)

        when (item.itemId) {

            R.id.menu1 -> {
                if (menuSwitchLock) {
                    when {
                        soundListView.isVisible -> {
                            soundListView.visibility = View.INVISIBLE
                        }
                        actionGridView.isVisible -> {
                            actionGridView.visibility = View.INVISIBLE
                        }
                        chooseGridView.isVisible -> {
                            chooseGridView.visibility = View.INVISIBLE
                        }
                    }
                    if (switch1 == 1) {
                        sequencerStop()
                        menuSwitch = true
                        invalidateOptionsMenu()
                        switch1 = 2
                        if (gameSwitch == 1) {
                            binding.editTitle.setText(actionTitle.replace("_", " ").uppercase(), TextView.BufferType.NORMAL)
                            findViewById<View>(R.id.bpm).findViewById<EditText>(R.id.bpmCount).isEnabled = false
                        }

                    } else {
                        if (gameSwitch == 1) {
                            tuningView.visibility = View.INVISIBLE
                            gamePlay()
                        } else {
                            sequencerPlay()
                        }
                        changeSequence()
                        menuSwitch = false
                        invalidateOptionsMenu()
                        switch1 = 1
                        findViewById<View>(R.id.line_measure).findViewById<TextView>(R.id.measure).text = "1"
                    }
                }
                return true
            }

            R.id.menu10 -> {
                if (menuSwitchLock) {
                    when {
                        chooseGridView.isVisible -> {
                            actionGridView.visibility = View.INVISIBLE
                            chooseGridView.visibility = View.INVISIBLE
                            tuningView.visibility = View.INVISIBLE
                        }
                        soundListView.isVisible -> {
                            chooseGridView.visibility = View.VISIBLE
                            soundListView.visibility = View.INVISIBLE
                        }
                        actionGridView.isVisible -> {
                            chooseGridView.visibility = View.VISIBLE
                            actionGridView.visibility = View.INVISIBLE
                            tuningView.visibility = View.INVISIBLE
                        }
                        tuningView.isVisible -> {
                            chooseGridView.visibility = View.VISIBLE
                            actionGridView.visibility = View.INVISIBLE
                            tuningView.visibility = View.INVISIBLE
                        }
                        soundListView.isInvisible && actionGridView.isInvisible && tuningView.isInvisible -> {
                            chooseGridView.visibility = View.VISIBLE
                        }
                    }
                    if (gridCheck == 1) {
                        clearCount = 0
                        if ((mRealm.where(ResultSlot::class.java).equalTo("id", "1").findFirst()?.game1 != null)) {
                            clearCount++
                            stage1s.setSpan(
                                ForegroundColorSpan(resources.getColor((mRealm.where(ResultSlot::class.java).equalTo("id", "1").findFirst()?.game1!!),theme)),
                                0,
                                stage1.length,
                                Spannable.SPAN_EXCLUSIVE_INCLUSIVE
                            )
                        }
                        if ((mRealm.where(ResultSlot::class.java).equalTo("id", "2").findFirst()?.game1 != null)) {
                            clearCount++
                            stage2s.setSpan(
                                ForegroundColorSpan(resources.getColor((mRealm.where(ResultSlot::class.java).equalTo("id", "2").findFirst()?.game1!!),theme)),
                                0,
                                stage2.length,
                                Spannable.SPAN_EXCLUSIVE_INCLUSIVE
                            )
                        }
                        if ((mRealm.where(ResultSlot::class.java).equalTo("id", "3").findFirst()?.game1 != null)) {
                            clearCount++
                            stage3s.setSpan(
                                ForegroundColorSpan(resources.getColor((mRealm.where(ResultSlot::class.java).equalTo("id", "3").findFirst()?.game1!!),theme)),
                                0,
                                stage3.length,
                                Spannable.SPAN_EXCLUSIVE_INCLUSIVE
                            )
                        }
                        if ((mRealm.where(ResultSlot::class.java).equalTo("id", "4").findFirst()?.game1 != null)) {
                            clearCount++
                            stage4s.setSpan(
                                ForegroundColorSpan(resources.getColor((mRealm.where(ResultSlot::class.java).equalTo("id", "4").findFirst()?.game1!!),theme)),
                                0,
                                stage4.length,
                                Spannable.SPAN_EXCLUSIVE_INCLUSIVE
                            )
                        }
                        if ((mRealm.where(ResultSlot::class.java).equalTo("id", "5").findFirst()?.game1 != null)) {
                            clearCount++
                            stage5s.setSpan(
                                ForegroundColorSpan(resources.getColor((mRealm.where(ResultSlot::class.java).equalTo("id", "5").findFirst()?.game1!!),theme)),
                                0,
                                stage5.length,
                                Spannable.SPAN_EXCLUSIVE_INCLUSIVE
                            )
                        }
                        if ((mRealm.where(ResultSlot::class.java).equalTo("id", "6").findFirst()?.game1 != null)) {
                            clearCount++
                            stage6s.setSpan(
                                ForegroundColorSpan(resources.getColor((mRealm.where(ResultSlot::class.java).equalTo("id", "6").findFirst()?.game1!!),theme)),
                                0,
                                stage6.length,
                                Spannable.SPAN_EXCLUSIVE_INCLUSIVE
                            )
                        }
                        if ((mRealm.where(ResultSlot::class.java).equalTo("id", "7").findFirst()?.game1 != null)) {
                            clearCount++
                            stage7s.setSpan(
                                ForegroundColorSpan(resources.getColor((mRealm.where(ResultSlot::class.java).equalTo("id", "7").findFirst()?.game1!!),theme)),
                                0,
                                stage7.length,
                                Spannable.SPAN_EXCLUSIVE_INCLUSIVE
                            )
                        }
                        if ((mRealm.where(ResultSlot::class.java).equalTo("id", "8").findFirst()?.game1 != null)) {
                            clearCount++
                            stage8s.setSpan(
                                ForegroundColorSpan(resources.getColor((mRealm.where(ResultSlot::class.java).equalTo("id", "8").findFirst()?.game1!!),theme)),
                                0,
                                stage8.length,
                                Spannable.SPAN_EXCLUSIVE_INCLUSIVE
                            )
                        }
                        if ((mRealm.where(ResultSlot::class.java).equalTo("id", "9").findFirst()?.game1 != null)) {
                            clearCount++
                            stage9s.setSpan(
                                ForegroundColorSpan(resources.getColor((mRealm.where(ResultSlot::class.java).equalTo("id", "9").findFirst()?.game1!!),theme)),
                                0,
                                stage9.length,
                                Spannable.SPAN_EXCLUSIVE_INCLUSIVE
                            )
                        }
                        if ((mRealm.where(ResultSlot::class.java).equalTo("id", "10").findFirst()?.game1 != null)) {
                            clearCount++
                            stage10s.setSpan(
                                ForegroundColorSpan(resources.getColor((mRealm.where(ResultSlot::class.java).equalTo("id", "10").findFirst()?.game1!!),theme)),
                                0,
                                stage10.length,
                                Spannable.SPAN_EXCLUSIVE_INCLUSIVE
                            )
                        }
                        if ((mRealm.where(ResultSlot::class.java).equalTo("id", "11").findFirst()?.game1 != null)) {
                            clearCount++
                            stage11s.setSpan(
                                ForegroundColorSpan(resources.getColor((mRealm.where(ResultSlot::class.java).equalTo("id", "11").findFirst()?.game1!!),theme)),
                                0,
                                stage11.length,
                                Spannable.SPAN_EXCLUSIVE_INCLUSIVE
                            )
                        }
                        if ((mRealm.where(ResultSlot::class.java).equalTo("id", "12").findFirst()?.game1 != null)) {
                            clearCount++
                            stage12s.setSpan(
                                ForegroundColorSpan(resources.getColor((mRealm.where(ResultSlot::class.java).equalTo("id", "12").findFirst()?.game1!!),theme)),
                                0,
                                stage12.length,
                                Spannable.SPAN_EXCLUSIVE_INCLUSIVE
                            )
                        }
                        if ((mRealm.where(ResultSlot::class.java).equalTo("id", "13").findFirst()?.game1 != null)) {
                            clearCount++
                            stage13s.setSpan(
                                ForegroundColorSpan(resources.getColor((mRealm.where(ResultSlot::class.java).equalTo("id", "13").findFirst()?.game1!!),theme)),
                                0,
                                stage13.length,
                                Spannable.SPAN_EXCLUSIVE_INCLUSIVE
                            )
                        }
                        if ((mRealm.where(ResultSlot::class.java).equalTo("id", "14").findFirst()?.game1 != null)) {
                            clearCount++
                            stage14s.setSpan(
                                ForegroundColorSpan(resources.getColor((mRealm.where(ResultSlot::class.java).equalTo("id", "14").findFirst()?.game1!!),theme)),
                                0,
                                stage14.length,
                                Spannable.SPAN_EXCLUSIVE_INCLUSIVE
                            )
                        }
                        if ((mRealm.where(ResultSlot::class.java).equalTo("id", "15").findFirst()?.game1 != null)) {
                            clearCount++
                            stage15s.setSpan(
                                ForegroundColorSpan(resources.getColor((mRealm.where(ResultSlot::class.java).equalTo("id", "15").findFirst()?.game1!!),theme)),
                                0,
                                stage15.length,
                                Spannable.SPAN_EXCLUSIVE_INCLUSIVE
                            )
                        }
                        if ((mRealm.where(ResultSlot::class.java).equalTo("id", "16").findFirst()?.game1 != null)) {
                            clearCount++
                            stage16s.setSpan(
                                ForegroundColorSpan(resources.getColor((mRealm.where(ResultSlot::class.java).equalTo("id", "16").findFirst()?.game1!!),theme)),
                                0,
                                stage16.length,
                                Spannable.SPAN_EXCLUSIVE_INCLUSIVE
                            )
                        }
                        println(clearCount)
                        val dpMode = arrayOf(
                            stage1s,
                            stage2s,
                            stage3s,
                            stage4s,
                            stage5s,
                            stage6s,
                            stage7s,
                            stage8s,
                            stage9s,
                            stage10s,
                            stage11s,
                            stage12s,
                            stage13s,
                            stage14s,
                            stage15s,
                            stage16s,
                            stageExs
                        )

                        val dpAdapter2 = ArrayAdapter(this, R.layout.custom_spinner_dropdown, dpMode)
                        chooseGridView.adapter = dpAdapter2
                        dpAdapter2.notifyDataSetChanged()
                    }
                }
                return true
            }

            R.id.action_settings -> {
                if (menuSwitchLock) {
                    when {
                        chooseGridView.isVisible -> {
                            actionGridView.visibility = View.VISIBLE
                            chooseGridView.visibility = View.INVISIBLE
                            tuningView.visibility = View.INVISIBLE
                        }
                        soundListView.isVisible -> {
                            actionGridView.visibility = View.VISIBLE
                            soundListView.visibility = View.INVISIBLE
                        }
                        actionGridView.isInvisible && tuningView.isVisible -> {
                            tuningView.visibility = View.INVISIBLE
                        }
                        actionGridView.isInvisible -> {
                            actionGridView.visibility = View.VISIBLE
                        }
                        actionGridView.isVisible -> {
                            actionGridView.visibility = View.INVISIBLE
                            tuningView.visibility = View.INVISIBLE
                        }
                    }
                } else {
                    menuSwitchLock = true
                    binding.editTitle.isEnabled = true
                    findViewById<Spinner>(R.id.mode_spinner).isEnabled = true
                    invalidateOptionsMenu()
                }
                return true
            }

            else -> return super.onOptionsItemSelected(item)
        }
    }

    override fun onDestroy() {
        mp.reset()
        mp.release()
        soundPool.autoPause()
        soundPool.release()
        sequencerCount = 0
        timer?.cancel()
        timer = null
        noteCount = 0
        super.onDestroy()
        mRealm.close()
    }

    override fun onResume() {
        super.onResume()

        loadInterstitial()
    }

    override fun onPause() {
        menuSwitch = true
        invalidateOptionsMenu()
        switch1 = 2
        noteCount = 0
        sequencerStop()
        if (mp.isPlaying) {
            mp.stop()
            mp.prepare()
        }
        if (!menuSwitch2) {
            menuSwitch2 = true
            invalidateOptionsMenu()
        }

            soundPool.autoPause()

        super.onPause()
    }

    override fun onSaveInstanceState(outState: Bundle) {
        super.onSaveInstanceState(outState)
        outState.putInt("DATA", adCheck)
        outState.putInt("padCheck", padCheck)
        outState.putInt("colorCheck", colorCheck)
        outState.putString("pad1", padText1.replace(" ", "_").replace("-", "_").lowercase())
        outState.putString("pad2", padText2.replace(" ", "_").replace("-", "_").lowercase())
        outState.putString("pad3", padText3.replace(" ", "_").replace("-", "_").lowercase())
        outState.putString("pad4", padText4.replace(" ", "_").replace("-", "_").lowercase())
        outState.putString("pad5", padText5.replace(" ", "_").replace("-", "_").lowercase())
        outState.putString("pad6", padText6.replace(" ", "_").replace("-", "_").lowercase())
        outState.putString("pad7", padText7.replace(" ", "_").replace("-", "_").lowercase())
        outState.putString("pad8", padText8.replace(" ", "_").replace("-", "_").lowercase())
        outState.putString("pad9", padText9.replace(" ", "_").replace("-", "_").lowercase())
        outState.putString("pad10", padText10.replace(" ", "_").replace("-", "_").lowercase())
        outState.putString("pad11", padText11.replace(" ", "_").replace("-", "_").lowercase())
        outState.putString("pad12", padText12.replace(" ", "_").replace("-", "_").lowercase())
        outState.putString("pad13", padText13.replace(" ", "_").replace("-", "_").lowercase())
        outState.putString("pad14", padText14.replace(" ", "_").replace("-", "_").lowercase())
        outState.putString("pad15", padText15.replace(" ", "_").replace("-", "_").lowercase())
        outState.putString("loop", binding.editTitle.text.toString())
        outState.putFloat("spv1", soundPoolVolume)
        outState.putFloat("spv2", soundPoolVolume2)
        outState.putFloat("spv3", soundPoolVolume3)
        outState.putFloat("spv4", soundPoolVolume4)
        outState.putFloat("spv5", soundPoolVolume5)
        outState.putFloat("spv6", soundPoolVolume6)
        outState.putFloat("spv7", soundPoolVolume7)
        outState.putFloat("spv8", soundPoolVolume8)
        outState.putFloat("spv9", soundPoolVolume9)
        outState.putFloat("spv10", soundPoolVolume10)
        outState.putFloat("spv11", soundPoolVolume11)
        outState.putFloat("spv12", soundPoolVolume12)
        outState.putFloat("spv13", soundPoolVolume13)
        outState.putFloat("spv14", soundPoolVolume14)
        outState.putFloat("spv15", soundPoolVolume15)
        outState.putFloat("spt1", soundPoolTempo)
        outState.putFloat("spt2", soundPoolTempo2)
        outState.putFloat("spt3", soundPoolTempo3)
        outState.putFloat("spt4", soundPoolTempo4)
        outState.putFloat("spt5", soundPoolTempo5)
        outState.putFloat("spt6", soundPoolTempo6)
        outState.putFloat("spt7", soundPoolTempo7)
        outState.putFloat("spt8", soundPoolTempo8)
        outState.putFloat("spt9", soundPoolTempo9)
        outState.putFloat("spt10", soundPoolTempo10)
        outState.putFloat("spt11", soundPoolTempo11)
        outState.putFloat("spt12", soundPoolTempo12)
        outState.putFloat("spt13", soundPoolTempo13)
        outState.putFloat("spt14", soundPoolTempo14)
        outState.putFloat("spt15", soundPoolTempo15)
        outState.putInt("spvF1", spvF)
        outState.putInt("spvF2", spvF2)
        outState.putInt("spvF3", spvF3)
        outState.putInt("spvF4", spvF4)
        outState.putInt("spvF5", spvF5)
        outState.putInt("spvF6", spvF6)
        outState.putInt("spvF7", spvF7)
        outState.putInt("spvF8", spvF8)
        outState.putInt("spvF9", spvF9)
        outState.putInt("spvF10", spvF10)
        outState.putInt("spvF11", spvF11)
        outState.putInt("spvF12", spvF12)
        outState.putInt("spvF13", spvF13)
        outState.putInt("spvF14", spvF14)
        outState.putInt("spvF15", spvF15)
        outState.putInt("sptF1", sptF)
        outState.putInt("sptF2", sptF2)
        outState.putInt("sptF3", sptF3)
        outState.putInt("sptF4", sptF4)
        outState.putInt("sptF5", sptF5)
        outState.putInt("sptF6", sptF6)
        outState.putInt("sptF7", sptF7)
        outState.putInt("sptF8", sptF8)
        outState.putInt("sptF9", sptF9)
        outState.putInt("sptF10", sptF10)
        outState.putInt("sptF11", sptF11)
        outState.putInt("sptF12", sptF12)
        outState.putInt("sptF13", sptF13)
        outState.putInt("sptF14", sptF14)
        outState.putInt("sptF15", sptF15)
        outState.putInt("trackCount", trackCount)
        outState.putLong("sequencerBpm", sequencerBpm)
        outState.putInt("sequencerMaxSize", sequencerMaxSize)
        outState.putString("a1", a1.joinToString(separator = ""))
        outState.putString("a2", a2.joinToString(separator = ""))
        outState.putString("a3", a3.joinToString(separator = ""))
        outState.putString("a4", a4.joinToString(separator = ""))
        outState.putString("a5", a5.joinToString(separator = ""))
        outState.putString("a6", a6.joinToString(separator = ""))
        outState.putString("a7", a7.joinToString(separator = ""))
        outState.putString("a8", a8.joinToString(separator = ""))
        outState.putString("a9", a9.joinToString(separator = ""))
        outState.putString("a10", a10.joinToString(separator = ""))
        outState.putString("a11", a11.joinToString(separator = ""))
        outState.putString("a12", a12.joinToString(separator = ""))
        outState.putString("a13", a13.joinToString(separator = ""))
        outState.putString("a14", a14.joinToString(separator = ""))
        outState.putString("a15", a15.joinToString(separator = ""))
        outState.putString("a16", a16.joinToString(separator = ""))
        outState.putString("b1", b1.joinToString(separator = ""))
        outState.putString("b2", b2.joinToString(separator = ""))
        outState.putString("b3", b3.joinToString(separator = ""))
        outState.putString("b4", b4.joinToString(separator = ""))
        outState.putString("b5", b5.joinToString(separator = ""))
        outState.putString("b6", b6.joinToString(separator = ""))
        outState.putString("b7", b7.joinToString(separator = ""))
        outState.putString("b8", b8.joinToString(separator = ""))
        outState.putString("b9", b9.joinToString(separator = ""))
        outState.putString("b10", b10.joinToString(separator = ""))
        outState.putString("b11", b11.joinToString(separator = ""))
        outState.putString("b12", b12.joinToString(separator = ""))
        outState.putString("b13", b13.joinToString(separator = ""))
        outState.putString("b14", b14.joinToString(separator = ""))
        outState.putString("b15", b15.joinToString(separator = ""))
        outState.putString("b16", b16.joinToString(separator = ""))
        outState.putString("c1", c1.joinToString(separator = ""))
        outState.putString("c2", c2.joinToString(separator = ""))
        outState.putString("c3", c3.joinToString(separator = ""))
        outState.putString("c4", c4.joinToString(separator = ""))
        outState.putString("c5", c5.joinToString(separator = ""))
        outState.putString("c6", c6.joinToString(separator = ""))
        outState.putString("c7", c7.joinToString(separator = ""))
        outState.putString("c8", c8.joinToString(separator = ""))
        outState.putString("c9", c9.joinToString(separator = ""))
        outState.putString("c10", c10.joinToString(separator = ""))
        outState.putString("c11", c11.joinToString(separator = ""))
        outState.putString("c12", c12.joinToString(separator = ""))
        outState.putString("c13", c13.joinToString(separator = ""))
        outState.putString("c14", c14.joinToString(separator = ""))
        outState.putString("c15", c15.joinToString(separator = ""))
        outState.putString("c16", c16.joinToString(separator = ""))
        outState.putString("d1", d1.joinToString(separator = ""))
        outState.putString("d2", d2.joinToString(separator = ""))
        outState.putString("d3", d3.joinToString(separator = ""))
        outState.putString("d4", d4.joinToString(separator = ""))
        outState.putString("d5", d5.joinToString(separator = ""))
        outState.putString("d6", d6.joinToString(separator = ""))
        outState.putString("d7", d7.joinToString(separator = ""))
        outState.putString("d8", d8.joinToString(separator = ""))
        outState.putString("d9", d9.joinToString(separator = ""))
        outState.putString("d10", d10.joinToString(separator = ""))
        outState.putString("d11", d11.joinToString(separator = ""))
        outState.putString("d12", d12.joinToString(separator = ""))
        outState.putString("d13", d13.joinToString(separator = ""))
        outState.putString("d14", d14.joinToString(separator = ""))
        outState.putString("d15", d15.joinToString(separator = ""))
        outState.putString("d16", d16.joinToString(separator = ""))
        outState.putString("e1", e1.joinToString(separator = ""))
        outState.putString("e2", e2.joinToString(separator = ""))
        outState.putString("e3", e3.joinToString(separator = ""))
        outState.putString("e4", e4.joinToString(separator = ""))
        outState.putString("e5", e5.joinToString(separator = ""))
        outState.putString("e6", e6.joinToString(separator = ""))
        outState.putString("e7", e7.joinToString(separator = ""))
        outState.putString("e8", e8.joinToString(separator = ""))
        outState.putString("e9", e9.joinToString(separator = ""))
        outState.putString("e10", e10.joinToString(separator = ""))
        outState.putString("e11", e11.joinToString(separator = ""))
        outState.putString("e12", e12.joinToString(separator = ""))
        outState.putString("e13", e13.joinToString(separator = ""))
        outState.putString("e14", e14.joinToString(separator = ""))
        outState.putString("e15", e15.joinToString(separator = ""))
        outState.putString("e16", e16.joinToString(separator = ""))
    }

    @SuppressLint("SetTextI18n", "CutPasteId")
    override fun onRestoreInstanceState(savedInstanceState: Bundle) {
        super.onRestoreInstanceState(savedInstanceState)
        adCheck = savedInstanceState.getInt("DATA")
        padCheck = savedInstanceState.getInt("padCheck")
        colorCheck = savedInstanceState.getInt("colorCheck")
        padText1 = savedInstanceState.getString("pad1").toString()
        padText2 = savedInstanceState.getString("pad2").toString()
        padText3 = savedInstanceState.getString("pad3").toString()
        padText4 = savedInstanceState.getString("pad4").toString()
        padText5 = savedInstanceState.getString("pad5").toString()
        padText6 = savedInstanceState.getString("pad6").toString()
        padText7 = savedInstanceState.getString("pad7").toString()
        padText8 = savedInstanceState.getString("pad8").toString()
        padText9 = savedInstanceState.getString("pad9").toString()
        padText10 = savedInstanceState.getString("pad10").toString()
        padText11 = savedInstanceState.getString("pad11").toString()
        padText12 = savedInstanceState.getString("pad12").toString()
        padText13 = savedInstanceState.getString("pad13").toString()
        padText14 = savedInstanceState.getString("pad14").toString()
        padText15 = savedInstanceState.getString("pad15").toString()
        actionTitle = savedInstanceState.getString("loop").toString()
        soundPoolVolume = savedInstanceState.getFloat("spv1")
        soundPoolVolume2 = savedInstanceState.getFloat("spv2")
        soundPoolVolume3 = savedInstanceState.getFloat("spv3")
        soundPoolVolume4 = savedInstanceState.getFloat("spv4")
        soundPoolVolume5 = savedInstanceState.getFloat("spv5")
        soundPoolVolume6 = savedInstanceState.getFloat("spv6")
        soundPoolVolume7 = savedInstanceState.getFloat("spv7")
        soundPoolVolume8 = savedInstanceState.getFloat("spv8")
        soundPoolVolume9 = savedInstanceState.getFloat("spv9")
        soundPoolVolume10 = savedInstanceState.getFloat("spv10")
        soundPoolVolume11 = savedInstanceState.getFloat("spv11")
        soundPoolVolume12 = savedInstanceState.getFloat("spv12")
        soundPoolVolume13 = savedInstanceState.getFloat("spv13")
        soundPoolVolume14 = savedInstanceState.getFloat("spv14")
        soundPoolVolume15 = savedInstanceState.getFloat("spv15")
        soundPoolTempo = savedInstanceState.getFloat("spt1")
        soundPoolTempo2 = savedInstanceState.getFloat("spt2")
        soundPoolTempo3 = savedInstanceState.getFloat("spt3")
        soundPoolTempo4 = savedInstanceState.getFloat("spt4")
        soundPoolTempo5 = savedInstanceState.getFloat("spt5")
        soundPoolTempo6 = savedInstanceState.getFloat("spt6")
        soundPoolTempo7 = savedInstanceState.getFloat("spt7")
        soundPoolTempo8 = savedInstanceState.getFloat("spt8")
        soundPoolTempo9 = savedInstanceState.getFloat("spt9")
        soundPoolTempo10 = savedInstanceState.getFloat("spt10")
        soundPoolTempo11 = savedInstanceState.getFloat("spt11")
        soundPoolTempo12 = savedInstanceState.getFloat("spt12")
        soundPoolTempo13 = savedInstanceState.getFloat("spt13")
        soundPoolTempo14 = savedInstanceState.getFloat("spt14")
        soundPoolTempo15 = savedInstanceState.getFloat("spt15")
        trackCount = savedInstanceState.getInt("trackCount")
        sequencerMaxSize = savedInstanceState.getInt("sequencerMaxSize")
        sequencerBpm = savedInstanceState.getLong("sequencerBpm")
        sia1 = savedInstanceState.getString("a1").toString()
        sia2 = savedInstanceState.getString("a2").toString()
        sia3 = savedInstanceState.getString("a3").toString()
        sia4 = savedInstanceState.getString("a4").toString()
        sia5 = savedInstanceState.getString("a5").toString()
        sia6 = savedInstanceState.getString("a6").toString()
        sia7 = savedInstanceState.getString("a7").toString()
        sia8 = savedInstanceState.getString("a8").toString()
        sia9 = savedInstanceState.getString("a9").toString()
        sia10 = savedInstanceState.getString("a10").toString()
        sia11 = savedInstanceState.getString("a11").toString()
        sia12 = savedInstanceState.getString("a12").toString()
        sia13 = savedInstanceState.getString("a13").toString()
        sia14 = savedInstanceState.getString("a14").toString()
        sia15 = savedInstanceState.getString("a15").toString()
        sia16 = savedInstanceState.getString("a16").toString()
        sib1 = savedInstanceState.getString("b1").toString()
        sib2 = savedInstanceState.getString("b2").toString()
        sib3 = savedInstanceState.getString("b3").toString()
        sib4 = savedInstanceState.getString("b4").toString()
        sib5 = savedInstanceState.getString("b5").toString()
        sib6 = savedInstanceState.getString("b6").toString()
        sib7 = savedInstanceState.getString("b7").toString()
        sib8 = savedInstanceState.getString("b8").toString()
        sib9 = savedInstanceState.getString("b9").toString()
        sib10 = savedInstanceState.getString("b10").toString()
        sib11 = savedInstanceState.getString("b11").toString()
        sib12 = savedInstanceState.getString("b12").toString()
        sib13 = savedInstanceState.getString("b13").toString()
        sib14 = savedInstanceState.getString("b14").toString()
        sib15 = savedInstanceState.getString("b15").toString()
        sib16 = savedInstanceState.getString("b16").toString()
        sic1 = savedInstanceState.getString("c1").toString()
        sic2 = savedInstanceState.getString("c2").toString()
        sic3 = savedInstanceState.getString("c3").toString()
        sic4 = savedInstanceState.getString("c4").toString()
        sic5 = savedInstanceState.getString("c5").toString()
        sic6 = savedInstanceState.getString("c6").toString()
        sic7 = savedInstanceState.getString("c7").toString()
        sic8 = savedInstanceState.getString("c8").toString()
        sic9 = savedInstanceState.getString("c9").toString()
        sic10 = savedInstanceState.getString("c10").toString()
        sic11 = savedInstanceState.getString("c11").toString()
        sic12 = savedInstanceState.getString("c12").toString()
        sic13 = savedInstanceState.getString("c13").toString()
        sic14 = savedInstanceState.getString("c14").toString()
        sic15 = savedInstanceState.getString("c15").toString()
        sic16 = savedInstanceState.getString("c16").toString()
        sid1 = savedInstanceState.getString("d1").toString()
        sid2 = savedInstanceState.getString("d2").toString()
        sid3 = savedInstanceState.getString("d3").toString()
        sid4 = savedInstanceState.getString("d4").toString()
        sid5 = savedInstanceState.getString("d5").toString()
        sid6 = savedInstanceState.getString("d6").toString()
        sid7 = savedInstanceState.getString("d7").toString()
        sid8 = savedInstanceState.getString("d8").toString()
        sid9 = savedInstanceState.getString("d9").toString()
        sid10 = savedInstanceState.getString("d10").toString()
        sid11 = savedInstanceState.getString("d11").toString()
        sid12 = savedInstanceState.getString("d12").toString()
        sid13 = savedInstanceState.getString("d13").toString()
        sid14 = savedInstanceState.getString("d14").toString()
        sid15 = savedInstanceState.getString("d15").toString()
        sid16 = savedInstanceState.getString("d16").toString()
        sie1 = savedInstanceState.getString("e1").toString()
        sie2 = savedInstanceState.getString("e2").toString()
        sie3 = savedInstanceState.getString("e3").toString()
        sie4 = savedInstanceState.getString("e4").toString()
        sie5 = savedInstanceState.getString("e5").toString()
        sie6 = savedInstanceState.getString("e6").toString()
        sie7 = savedInstanceState.getString("e7").toString()
        sie8 = savedInstanceState.getString("e8").toString()
        sie9 = savedInstanceState.getString("e9").toString()
        sie10 = savedInstanceState.getString("e10").toString()
        sie11 = savedInstanceState.getString("e11").toString()
        sie12 = savedInstanceState.getString("e12").toString()
        sie13 = savedInstanceState.getString("e13").toString()
        sie14 = savedInstanceState.getString("e14").toString()
        sie15 = savedInstanceState.getString("e15").toString()
        sie16 = savedInstanceState.getString("e16").toString()
        spvF = savedInstanceState.getInt("spvF1")
        spvF2 = savedInstanceState.getInt("spvF2")
        spvF3 = savedInstanceState.getInt("spvF3")
        spvF4 = savedInstanceState.getInt("spvF4")
        spvF5 = savedInstanceState.getInt("spvF5")
        spvF6 = savedInstanceState.getInt("spvF6")
        spvF7 = savedInstanceState.getInt("spvF7")
        spvF8 = savedInstanceState.getInt("spvF8")
        spvF9 = savedInstanceState.getInt("spvF9")
        spvF10 = savedInstanceState.getInt("spvF10")
        spvF11 = savedInstanceState.getInt("spvF11")
        spvF12 = savedInstanceState.getInt("spvF12")
        spvF13 = savedInstanceState.getInt("spvF13")
        spvF14 = savedInstanceState.getInt("spvF14")
        spvF15 = savedInstanceState.getInt("spvF15")
        sptF = savedInstanceState.getInt("sptF1")
        sptF2 = savedInstanceState.getInt("sptF2")
        sptF3 = savedInstanceState.getInt("sptF3")
        sptF4 = savedInstanceState.getInt("sptF4")
        sptF5 = savedInstanceState.getInt("sptF5")
        sptF6 = savedInstanceState.getInt("sptF6")
        sptF7 = savedInstanceState.getInt("sptF7")
        sptF8 = savedInstanceState.getInt("sptF8")
        sptF9 = savedInstanceState.getInt("sptF9")
        sptF10 = savedInstanceState.getInt("sptF10")
        sptF11 = savedInstanceState.getInt("sptF11")
        sptF12 = savedInstanceState.getInt("sptF12")
        sptF13 = savedInstanceState.getInt("sptF13")
        sptF14 = savedInstanceState.getInt("sptF14")
        sptF15 = savedInstanceState.getInt("sptF15")
        if (adCheck == 1) {
            binding.adView.visibility = View.GONE
            binding.topSpace.visibility = View.GONE
            binding.bottomSpace.visibility = View.GONE
        }
        binding.includeMainView.textView.text = padText1.replace("tr_8", "TR-8").replace("tr_909", "TR-909").replace("_"," ").uppercase()
        binding.includeMainView2.textView.text = padText2.replace("tr_8", "TR-8").replace("tr_909", "TR-909").replace("_"," ").uppercase()
        binding.includeMainView3.textView.text = padText3.replace("tr_8", "TR-8").replace("tr_909", "TR-909").replace("_"," ").uppercase()
        binding.includeMainView4.textView.text = padText4.replace("tr_8", "TR-8").replace("tr_909", "TR-909").replace("_"," ").uppercase()
        binding.includeMainView5.textView.text = padText5.replace("tr_8", "TR-8").replace("tr_909", "TR-909").replace("_"," ").uppercase()
        binding.includeMainView6.textView.text = padText6.replace("tr_8", "TR-8").replace("tr_909", "TR-909").replace("_"," ").uppercase()
        binding.includeMainView7.textView.text = padText7.replace("tr_8", "TR-8").replace("tr_909", "TR-909").replace("_"," ").uppercase()
        binding.includeMainView8.textView.text = padText8.replace("tr_8", "TR-8").replace("tr_909", "TR-909").replace("_"," ").uppercase()
        binding.includeMainView9.textView.text = padText9.replace("tr_8", "TR-8").replace("tr_909", "TR-909").replace("_"," ").uppercase()
        binding.includeMainView10.textView.text = padText10.replace("tr_8", "TR-8").replace("tr_909", "TR-909").replace("_"," ").uppercase()
        binding.includeMainView11.textView.text = padText11.replace("tr_8", "TR-8").replace("tr_909", "TR-909").replace("_"," ").uppercase()
        binding.includeMainView12.textView.text = padText12.replace("tr_8", "TR-8").replace("tr_909", "TR-909").replace("_"," ").uppercase()
        binding.includeMainView13.textView.text = padText13.replace("tr_8", "TR-8").replace("tr_909", "TR-909").replace("_"," ").uppercase()
        binding.includeMainView14.textView.text = padText14.replace("tr_8", "TR-8").replace("tr_909", "TR-909").replace("_"," ").uppercase()
        binding.includeMainView15.textView.text = padText15.replace("tr_8", "TR-8").replace("tr_909", "TR-909").replace("_"," ").uppercase()
        findViewById<View>(R.id.include_view).findViewById<TextView>(R.id.padText).text = soundPoolVolume.toString().replace("f", "") + "            " + soundPoolTempo.toString().replace("f", "") + "\n" + padText1.replace("tr_8", "TR-8").replace("tr_909", "TR-909").replace("_"," ").uppercase()
        findViewById<View>(R.id.include_view2).findViewById<TextView>(R.id.padText).text = soundPoolVolume2.toString().replace("f", "") + "            " + soundPoolTempo2.toString().replace("f", "") + "\n" + padText2.replace("tr_8", "TR-8").replace("tr_909", "TR-909").replace("_"," ").uppercase()
        findViewById<View>(R.id.include_view3).findViewById<TextView>(R.id.padText).text = soundPoolVolume3.toString().replace("f", "") + "            " + soundPoolTempo3.toString().replace("f", "") + "\n" + padText3.replace("tr_8", "TR-8").replace("tr_909", "TR-909").replace("_"," ").uppercase()
        findViewById<View>(R.id.include_view4).findViewById<TextView>(R.id.padText).text = soundPoolVolume4.toString().replace("f", "") + "            " + soundPoolTempo4.toString().replace("f", "") + "\n" + padText4.replace("tr_8", "TR-8").replace("tr_909", "TR-909").replace("_"," ").uppercase()
        findViewById<View>(R.id.include_view5).findViewById<TextView>(R.id.padText).text = soundPoolVolume5.toString().replace("f", "") + "            " + soundPoolTempo5.toString().replace("f", "") + "\n" + padText5.replace("tr_8", "TR-8").replace("tr_909", "TR-909").replace("_"," ").uppercase()
        findViewById<View>(R.id.include_view6).findViewById<TextView>(R.id.padText).text = soundPoolVolume6.toString().replace("f", "") + "            " + soundPoolTempo6.toString().replace("f", "") + "\n" + padText6.replace("tr_8", "TR-8").replace("tr_909", "TR-909").replace("_"," ").uppercase()
        findViewById<View>(R.id.include_view7).findViewById<TextView>(R.id.padText).text = soundPoolVolume7.toString().replace("f", "") + "            " + soundPoolTempo7.toString().replace("f", "") + "\n" + padText7.replace("tr_8", "TR-8").replace("tr_909", "TR-909").replace("_"," ").uppercase()
        findViewById<View>(R.id.include_view8).findViewById<TextView>(R.id.padText).text = soundPoolVolume8.toString().replace("f", "") + "            " + soundPoolTempo8.toString().replace("f", "") + "\n" + padText8.replace("tr_8", "TR-8").replace("tr_909", "TR-909").replace("_"," ").uppercase()
        findViewById<View>(R.id.include_view9).findViewById<TextView>(R.id.padText).text = soundPoolVolume9.toString().replace("f", "") + "            " + soundPoolTempo9.toString().replace("f", "") + "\n" + padText9.replace("tr_8", "TR-8").replace("tr_909", "TR-909").replace("_"," ").uppercase()
        findViewById<View>(R.id.include_view10).findViewById<TextView>(R.id.padText).text = soundPoolVolume10.toString().replace("f", "") + "            " + soundPoolTempo10.toString().replace("f", "") + "\n" + padText10.replace("tr_8", "TR-8").replace("tr_909", "TR-909").replace("_"," ").uppercase()
        findViewById<View>(R.id.include_view11).findViewById<TextView>(R.id.padText).text = soundPoolVolume11.toString().replace("f", "") + "            " + soundPoolTempo11.toString().replace("f", "") + "\n" + padText11.replace("tr_8", "TR-8").replace("tr_909", "TR-909").replace("_"," ").uppercase()
        findViewById<View>(R.id.include_view12).findViewById<TextView>(R.id.padText).text = soundPoolVolume12.toString().replace("f", "") + "            " + soundPoolTempo12.toString().replace("f", "") + "\n" + padText12.replace("tr_8", "TR-8").replace("tr_909", "TR-909").replace("_"," ").uppercase()
        findViewById<View>(R.id.include_view13).findViewById<TextView>(R.id.padText).text = soundPoolVolume13.toString().replace("f", "") + "            " + soundPoolTempo13.toString().replace("f", "") + "\n" + padText13.replace("tr_8", "TR-8").replace("tr_909", "TR-909").replace("_"," ").uppercase()
        findViewById<View>(R.id.include_view14).findViewById<TextView>(R.id.padText).text = soundPoolVolume14.toString().replace("f", "") + "            " + soundPoolTempo14.toString().replace("f", "") + "\n" + padText14.replace("tr_8", "TR-8").replace("tr_909", "TR-909").replace("_"," ").uppercase()
        findViewById<View>(R.id.include_view15).findViewById<TextView>(R.id.padText).text = soundPoolVolume15.toString().replace("f", "") + "            " + soundPoolTempo15.toString().replace("f", "") + "\n" + padText15.replace("tr_8", "TR-8").replace("tr_909", "TR-909").replace("_"," ").uppercase()
        findViewById<View>(R.id.tuning_sequencer).findViewById<TextView>(R.id.volume).text = soundPoolVolume.toString().replace("f", "")
        findViewById<View>(R.id.tuning_sequencer2).findViewById<TextView>(R.id.volume).text = soundPoolVolume4.toString().replace("f", "")
        findViewById<View>(R.id.tuning_sequencer3).findViewById<TextView>(R.id.volume).text = soundPoolVolume7.toString().replace("f", "")
        findViewById<View>(R.id.tuning_sequencer4).findViewById<TextView>(R.id.volume).text = soundPoolVolume10.toString().replace("f", "")
        findViewById<View>(R.id.tuning_sequencer5).findViewById<TextView>(R.id.volume).text = soundPoolVolume13.toString().replace("f", "")
        findViewById<View>(R.id.tuning_sequencer).findViewById<TextView>(R.id.tempo).text = soundPoolTempo.toString().replace("f", "")
        findViewById<View>(R.id.tuning_sequencer2).findViewById<TextView>(R.id.tempo).text = soundPoolTempo4.toString().replace("f", "")
        findViewById<View>(R.id.tuning_sequencer3).findViewById<TextView>(R.id.tempo).text = soundPoolTempo7.toString().replace("f", "")
        findViewById<View>(R.id.tuning_sequencer4).findViewById<TextView>(R.id.tempo).text = soundPoolTempo10.toString().replace("f", "")
        findViewById<View>(R.id.tuning_sequencer5).findViewById<TextView>(R.id.tempo).text = soundPoolTempo13.toString().replace("f", "")
        findViewById<View>(R.id.line_measure).findViewById<TextView>(R.id.track_count).text = trackCount.toString()
        findViewById<View>(R.id.line_measure).findViewById<TextView>(R.id.measure_max).text = (sequencerMaxSize + 1).toString()
        findViewById<View>(R.id.bpm).findViewById<EditText>(R.id.bpmCount).setText(sequencerBpm.toString(), TextView.BufferType.NORMAL)
        when (padCheck) {
            53 -> {
                x53()
            }
            43 -> {
                x43()
            }
            33 -> {
                x33()
            }
            52 -> {
                x52()
            }
            42 -> {
                x42()
            }
            32 -> {
                x32()
            }
            22 -> {
                x22()
            }
            21 -> {
                x21()
            }
            51 -> {
                x51()
            }
            41 -> {
                x41()
            }
            31 -> {
                x31()
            }
        }
        if (colorCheck == 1) {
            if (resources.configuration.orientation == Configuration.ORIENTATION_PORTRAIT) {
                findViewById<View>(R.id.include_main_view).findViewById<ImageView>(R.id.imageView).setImageResource(R.drawable.my_ripple3)
                findViewById<View>(R.id.include_main_view2).findViewById<ImageView>(R.id.imageView).setImageResource(R.drawable.my_ripple3)
                findViewById<View>(R.id.include_main_view3).findViewById<ImageView>(R.id.imageView).setImageResource(R.drawable.my_ripple3)
                findViewById<View>(R.id.include_main_view4).findViewById<ImageView>(R.id.imageView).setImageResource(R.drawable.my_ripple4)
                findViewById<View>(R.id.include_main_view5).findViewById<ImageView>(R.id.imageView).setImageResource(R.drawable.my_ripple4)
                findViewById<View>(R.id.include_main_view6).findViewById<ImageView>(R.id.imageView).setImageResource(R.drawable.my_ripple4)
                findViewById<View>(R.id.include_main_view7).findViewById<ImageView>(R.id.imageView).setImageResource(R.drawable.my_ripple5)
                findViewById<View>(R.id.include_main_view8).findViewById<ImageView>(R.id.imageView).setImageResource(R.drawable.my_ripple5)
                findViewById<View>(R.id.include_main_view9).findViewById<ImageView>(R.id.imageView).setImageResource(R.drawable.my_ripple5)
                findViewById<View>(R.id.include_main_view10).findViewById<ImageView>(R.id.imageView).setImageResource(R.drawable.my_ripple6)
                findViewById<View>(R.id.include_main_view11).findViewById<ImageView>(R.id.imageView).setImageResource(R.drawable.my_ripple6)
                findViewById<View>(R.id.include_main_view12).findViewById<ImageView>(R.id.imageView).setImageResource(R.drawable.my_ripple6)
                findViewById<View>(R.id.include_main_view13).findViewById<ImageView>(R.id.imageView).setImageResource(R.drawable.my_ripple7)
                findViewById<View>(R.id.include_main_view14).findViewById<ImageView>(R.id.imageView).setImageResource(R.drawable.my_ripple7)
                findViewById<View>(R.id.include_main_view15).findViewById<ImageView>(R.id.imageView).setImageResource(R.drawable.my_ripple7)
            }
            else if (resources.configuration.orientation == Configuration.ORIENTATION_LANDSCAPE) {
                findViewById<View>(R.id.include_main_view).findViewById<ImageView>(R.id.imageView).setImageResource(R.drawable.my_ripple3)
                findViewById<View>(R.id.include_main_view2).findViewById<ImageView>(R.id.imageView).setImageResource(R.drawable.my_ripple3)
                findViewById<View>(R.id.include_main_view3).findViewById<ImageView>(R.id.imageView).setImageResource(R.drawable.my_ripple3)
                findViewById<View>(R.id.include_main_view4).findViewById<ImageView>(R.id.imageView).setImageResource(R.drawable.my_ripple4)
                findViewById<View>(R.id.include_main_view5).findViewById<ImageView>(R.id.imageView).setImageResource(R.drawable.my_ripple4)
                findViewById<View>(R.id.include_main_view6).findViewById<ImageView>(R.id.imageView).setImageResource(R.drawable.my_ripple4)
                findViewById<View>(R.id.include_main_view7).findViewById<ImageView>(R.id.imageView).setImageResource(R.drawable.my_ripple5)
                findViewById<View>(R.id.include_main_view8).findViewById<ImageView>(R.id.imageView).setImageResource(R.drawable.my_ripple5)
                findViewById<View>(R.id.include_main_view9).findViewById<ImageView>(R.id.imageView).setImageResource(R.drawable.my_ripple5)
                findViewById<View>(R.id.include_main_view10).findViewById<ImageView>(R.id.imageView).setImageResource(R.drawable.my_ripple6)
                findViewById<View>(R.id.include_main_view11).findViewById<ImageView>(R.id.imageView).setImageResource(R.drawable.my_ripple6)
                findViewById<View>(R.id.include_main_view12).findViewById<ImageView>(R.id.imageView).setImageResource(R.drawable.my_ripple6)
                findViewById<View>(R.id.include_main_view13).findViewById<ImageView>(R.id.imageView).setImageResource(R.drawable.my_ripple7)
                findViewById<View>(R.id.include_main_view14).findViewById<ImageView>(R.id.imageView).setImageResource(R.drawable.my_ripple7)
                findViewById<View>(R.id.include_main_view15).findViewById<ImageView>(R.id.imageView).setImageResource(R.drawable.my_ripple7)
            }
        } else {
            if (resources.configuration.orientation == Configuration.ORIENTATION_PORTRAIT) {
                findViewById<View>(R.id.include_main_view).findViewById<ImageView>(R.id.imageView).setImageResource(R.drawable.my_ripple)
                findViewById<View>(R.id.include_main_view2).findViewById<ImageView>(R.id.imageView).setImageResource(R.drawable.my_ripple)
                findViewById<View>(R.id.include_main_view3).findViewById<ImageView>(R.id.imageView).setImageResource(R.drawable.my_ripple)
                findViewById<View>(R.id.include_main_view4).findViewById<ImageView>(R.id.imageView).setImageResource(R.drawable.my_ripple)
                findViewById<View>(R.id.include_main_view5).findViewById<ImageView>(R.id.imageView).setImageResource(R.drawable.my_ripple)
                findViewById<View>(R.id.include_main_view6).findViewById<ImageView>(R.id.imageView).setImageResource(R.drawable.my_ripple)
                findViewById<View>(R.id.include_main_view7).findViewById<ImageView>(R.id.imageView).setImageResource(R.drawable.my_ripple)
                findViewById<View>(R.id.include_main_view8).findViewById<ImageView>(R.id.imageView).setImageResource(R.drawable.my_ripple)
                findViewById<View>(R.id.include_main_view9).findViewById<ImageView>(R.id.imageView).setImageResource(R.drawable.my_ripple)
                findViewById<View>(R.id.include_main_view10).findViewById<ImageView>(R.id.imageView).setImageResource(R.drawable.my_ripple)
                findViewById<View>(R.id.include_main_view11).findViewById<ImageView>(R.id.imageView).setImageResource(R.drawable.my_ripple)
                findViewById<View>(R.id.include_main_view12).findViewById<ImageView>(R.id.imageView).setImageResource(R.drawable.my_ripple)
                findViewById<View>(R.id.include_main_view13).findViewById<ImageView>(R.id.imageView).setImageResource(R.drawable.my_ripple)
                findViewById<View>(R.id.include_main_view14).findViewById<ImageView>(R.id.imageView).setImageResource(R.drawable.my_ripple)
                findViewById<View>(R.id.include_main_view15).findViewById<ImageView>(R.id.imageView).setImageResource(R.drawable.my_ripple)
            }
            else if (resources.configuration.orientation == Configuration.ORIENTATION_LANDSCAPE) {
                findViewById<View>(R.id.include_main_view).findViewById<ImageView>(R.id.imageView).setImageResource(R.drawable.my_ripple)
                findViewById<View>(R.id.include_main_view2).findViewById<ImageView>(R.id.imageView).setImageResource(R.drawable.my_ripple)
                findViewById<View>(R.id.include_main_view3).findViewById<ImageView>(R.id.imageView).setImageResource(R.drawable.my_ripple)
                findViewById<View>(R.id.include_main_view4).findViewById<ImageView>(R.id.imageView).setImageResource(R.drawable.my_ripple)
                findViewById<View>(R.id.include_main_view5).findViewById<ImageView>(R.id.imageView).setImageResource(R.drawable.my_ripple)
                findViewById<View>(R.id.include_main_view6).findViewById<ImageView>(R.id.imageView).setImageResource(R.drawable.my_ripple)
                findViewById<View>(R.id.include_main_view7).findViewById<ImageView>(R.id.imageView).setImageResource(R.drawable.my_ripple)
                findViewById<View>(R.id.include_main_view8).findViewById<ImageView>(R.id.imageView).setImageResource(R.drawable.my_ripple)
                findViewById<View>(R.id.include_main_view9).findViewById<ImageView>(R.id.imageView).setImageResource(R.drawable.my_ripple)
                findViewById<View>(R.id.include_main_view10).findViewById<ImageView>(R.id.imageView).setImageResource(R.drawable.my_ripple)
                findViewById<View>(R.id.include_main_view11).findViewById<ImageView>(R.id.imageView).setImageResource(R.drawable.my_ripple)
                findViewById<View>(R.id.include_main_view12).findViewById<ImageView>(R.id.imageView).setImageResource(R.drawable.my_ripple)
                findViewById<View>(R.id.include_main_view13).findViewById<ImageView>(R.id.imageView).setImageResource(R.drawable.my_ripple)
                findViewById<View>(R.id.include_main_view14).findViewById<ImageView>(R.id.imageView).setImageResource(R.drawable.my_ripple)
                findViewById<View>(R.id.include_main_view15).findViewById<ImageView>(R.id.imageView).setImageResource(R.drawable.my_ripple)
            }
        }

        for(i in 0..15) {
            a1[i] = sia1[i].code -48
            a2[i] = sia2[i].code -48
            a3[i] = sia3[i].code -48
            a4[i] = sia4[i].code -48
            a5[i] = sia5[i].code -48
            a6[i] = sia6[i].code -48
            a7[i] = sia7[i].code -48
            a8[i] = sia8[i].code -48
            a9[i] = sia9[i].code -48
            a10[i] = sia10[i].code -48
            a11[i] = sia11[i].code -48
            a12[i] = sia12[i].code -48
            a13[i] = sia13[i].code -48
            a14[i] = sia14[i].code -48
            a15[i] = sia15[i].code -48
            a16[i] = sia16[i].code -48
            b1[i] = sib1[i].code -48
            b2[i] = sib2[i].code -48
            b3[i] = sib3[i].code -48
            b4[i] = sib4[i].code -48
            b5[i] = sib5[i].code -48
            b6[i] = sib6[i].code -48
            b7[i] = sib7[i].code -48
            b8[i] = sib8[i].code -48
            b9[i] = sib9[i].code -48
            b10[i] = sib10[i].code -48
            b11[i] = sib11[i].code -48
            b12[i] = sib12[i].code -48
            b13[i] = sib13[i].code -48
            b14[i] = sib14[i].code -48
            b15[i] = sib15[i].code -48
            b16[i] = sib16[i].code -48
            c1[i] = sic1[i].code -48
            c2[i] = sic2[i].code -48
            c3[i] = sic3[i].code -48
            c4[i] = sic4[i].code -48
            c5[i] = sic5[i].code -48
            c6[i] = sic6[i].code -48
            c7[i] = sic7[i].code -48
            c8[i] = sic8[i].code -48
            c9[i] = sic9[i].code -48
            c10[i] = sic10[i].code -48
            c11[i] = sic11[i].code -48
            c12[i] = sic12[i].code -48
            c13[i] = sic13[i].code -48
            c14[i] = sic14[i].code -48
            c15[i] = sic15[i].code -48
            c16[i] = sic16[i].code -48
            d1[i] = sid1[i].code -48
            d2[i] = sid2[i].code -48
            d3[i] = sid3[i].code -48
            d4[i] = sid4[i].code -48
            d5[i] = sid5[i].code -48
            d6[i] = sid6[i].code -48
            d7[i] = sid7[i].code -48
            d8[i] = sid8[i].code -48
            d9[i] = sid9[i].code -48
            d10[i] = sid10[i].code -48
            d11[i] = sid11[i].code -48
            d12[i] = sid12[i].code -48
            d13[i] = sid13[i].code -48
            d14[i] = sid14[i].code -48
            d15[i] = sid15[i].code -48
            d16[i] = sid16[i].code -48
            e1[i] = sie1[i].code -48
            e2[i] = sie2[i].code -48
            e3[i] = sie3[i].code -48
            e4[i] = sie4[i].code -48
            e5[i] = sie5[i].code -48
            e6[i] = sie6[i].code -48
            e7[i] = sie7[i].code -48
            e8[i] = sie8[i].code -48
            e9[i] = sie9[i].code -48
            e10[i] = sie10[i].code -48
            e11[i] = sie11[i].code -48
            e12[i] = sie12[i].code -48
            e13[i] = sie13[i].code -48
            e14[i] = sie14[i].code -48
            e15[i] = sie15[i].code -48
            e16[i] = sie16[i].code -48
        }

        binding.editTitle.setText(actionTitle.replace("_", " ").uppercase(), TextView.BufferType.NORMAL)

        try {
            sound1 = soundPool.load(assets.openFd("$padText1.ogg"), 1)
        } catch (e: Exception) {
            try {
                sound1 = soundPool.load(padText1, 1)
                binding.includeMainView.textView.text = padText1.replaceBeforeLast("/", "").replace("/", "").replace(".ogg", "").uppercase()
                findViewById<View>(R.id.include_view).findViewById<TextView>(R.id.padText).text = padText1.replaceBeforeLast("/", "").replace("/", "").replace(".ogg", "").uppercase()
            } catch (e: Exception) {
                sound1 = soundPool.load(assets.openFd("soundless.ogg"), 1)
                binding.includeMainView.textView.text = ""
                findViewById<View>(R.id.include_view).findViewById<TextView>(R.id.padText).text = ""
            }
        }
        try {
            sound2 = soundPool.load(assets.openFd("$padText2.ogg"), 1)
        } catch (e: Exception) {
            try {
                sound2 = soundPool.load(padText2, 1)
                binding.includeMainView2.textView.text = padText2.replaceBeforeLast("/", "").replace("/", "").replace(".ogg", "").uppercase()
                findViewById<View>(R.id.include_view2).findViewById<TextView>(R.id.padText).text = padText2.replaceBeforeLast("/", "").replace("/", "").replace(".ogg", "").uppercase()
            } catch (e: Exception) {
                sound2 = soundPool.load(assets.openFd("soundless.ogg"), 1)
                binding.includeMainView2.textView.text = ""
                findViewById<View>(R.id.include_view2).findViewById<TextView>(R.id.padText).text = ""
            }
        }
        try {
            sound3 = soundPool.load(assets.openFd("$padText3.ogg"), 1)
        } catch (e: Exception) {
            try {
                sound3 = soundPool.load(padText3, 1)
                binding.includeMainView3.textView.text = padText3.replaceBeforeLast("/", "").replace("/", "").replace(".ogg", "").uppercase()
                findViewById<View>(R.id.include_view3).findViewById<TextView>(R.id.padText).text = padText3.replaceBeforeLast("/", "").replace("/", "").replace(".ogg", "").uppercase()
            } catch (e: Exception) {
                sound3 = soundPool.load(assets.openFd("soundless.ogg"), 1)
                binding.includeMainView3.textView.text = ""
                findViewById<View>(R.id.include_view3).findViewById<TextView>(R.id.padText).text = ""
            }
        }
        try {
            sound4 = soundPool.load(assets.openFd("$padText4.ogg"), 1)
        } catch (e: Exception) {
            try {
                sound4 = soundPool.load(padText4, 1)
                binding.includeMainView4.textView.text = padText4.replaceBeforeLast("/", "").replace("/", "").replace(".ogg", "").uppercase()
                findViewById<View>(R.id.include_view4).findViewById<TextView>(R.id.padText).text = padText4.replaceBeforeLast("/", "").replace("/", "").replace(".ogg", "").uppercase()
            } catch (e: Exception) {
                sound4 = soundPool.load(assets.openFd("soundless.ogg"), 1)
                binding.includeMainView4.textView.text = ""
                findViewById<View>(R.id.include_view4).findViewById<TextView>(R.id.padText).text = ""
            }
        }
        try {
            sound5 = soundPool.load(assets.openFd("$padText5.ogg"), 1)
        } catch (e: Exception) {
            try {
                sound5 = soundPool.load(padText5, 1)
                binding.includeMainView5.textView.text = padText5.replaceBeforeLast("/", "").replace("/", "").replace(".ogg", "").uppercase()
                findViewById<View>(R.id.include_view5).findViewById<TextView>(R.id.padText).text = padText5.replaceBeforeLast("/", "").replace("/", "").replace(".ogg", "").uppercase()
            } catch (e: Exception) {
                sound5 = soundPool.load(assets.openFd("soundless.ogg"), 1)
                binding.includeMainView5.textView.text = ""
                findViewById<View>(R.id.include_view5).findViewById<TextView>(R.id.padText).text = ""
            }
        }
        try {
            sound6 = soundPool.load(assets.openFd("$padText6.ogg"), 1)
        } catch (e: Exception) {
            try {
                sound6 = soundPool.load(padText6, 1)
                binding.includeMainView6.textView.text = padText6.replaceBeforeLast("/", "").replace("/", "").replace(".ogg", "").uppercase()
                findViewById<View>(R.id.include_view6).findViewById<TextView>(R.id.padText).text = padText6.replaceBeforeLast("/", "").replace("/", "").replace(".ogg", "").uppercase()
            } catch (e: Exception) {
                sound6 = soundPool.load(assets.openFd("soundless.ogg"), 1)
                binding.includeMainView6.textView.text = ""
                findViewById<View>(R.id.include_view6).findViewById<TextView>(R.id.padText).text = ""
            }
        }
        try {
            sound7 = soundPool.load(assets.openFd("$padText7.ogg"), 1)
        } catch (e: Exception) {
            try {
                sound7 = soundPool.load(padText7, 1)
                binding.includeMainView7.textView.text = padText7.replaceBeforeLast("/", "").replace("/", "").replace(".ogg", "").uppercase()
                findViewById<View>(R.id.include_view7).findViewById<TextView>(R.id.padText).text = padText7.replaceBeforeLast("/", "").replace("/", "").replace(".ogg", "").uppercase()
            } catch (e: Exception) {
                sound7 = soundPool.load(assets.openFd("soundless.ogg"), 1)
                binding.includeMainView7.textView.text = ""
                findViewById<View>(R.id.include_view7).findViewById<TextView>(R.id.padText).text = ""
            }
        }
        try {
            sound8 = soundPool.load(assets.openFd("$padText8.ogg"), 1)
        } catch (e: Exception) {
            try {
                sound8 = soundPool.load(padText8, 1)
                binding.includeMainView8.textView.text = padText8.replaceBeforeLast("/", "").replace("/", "").replace(".ogg", "").uppercase()
                findViewById<View>(R.id.include_view8).findViewById<TextView>(R.id.padText).text = padText8.replaceBeforeLast("/", "").replace("/", "").replace(".ogg", "").uppercase()
            } catch (e: Exception) {
                sound8 = soundPool.load(assets.openFd("soundless.ogg"), 1)
                binding.includeMainView8.textView.text = ""
                findViewById<View>(R.id.include_view8).findViewById<TextView>(R.id.padText).text = ""
            }
        }
        try {
            sound9 = soundPool.load(assets.openFd("$padText9.ogg"), 1)
        } catch (e: Exception) {
            try {
                sound9 = soundPool.load(padText9, 1)
                binding.includeMainView9.textView.text = padText9.replaceBeforeLast("/", "").replace("/", "").replace(".ogg", "").uppercase()
                findViewById<View>(R.id.include_view9).findViewById<TextView>(R.id.padText).text = padText9.replaceBeforeLast("/", "").replace("/", "").replace(".ogg", "").uppercase()
            } catch (e: Exception) {
                sound9 = soundPool.load(assets.openFd("soundless.ogg"), 1)
                binding.includeMainView9.textView.text = ""
                findViewById<View>(R.id.include_view9).findViewById<TextView>(R.id.padText).text = ""
            }
        }
        try {
            sound10 = soundPool.load(assets.openFd("$padText10.ogg"), 1)
        } catch (e: Exception) {
            try {
                sound10 = soundPool.load(padText10, 1)
                binding.includeMainView10.textView.text = padText10.replaceBeforeLast("/", "").replace("/", "").replace(".ogg", "").uppercase()
                findViewById<View>(R.id.include_view10).findViewById<TextView>(R.id.padText).text = padText10.replaceBeforeLast("/", "").replace("/", "").replace(".ogg", "").uppercase()
            } catch (e: Exception) {
                sound10 = soundPool.load(assets.openFd("soundless.ogg"), 1)
                binding.includeMainView10.textView.text = ""
                findViewById<View>(R.id.include_view10).findViewById<TextView>(R.id.padText).text = ""
            }
        }
        try {
            sound11 = soundPool.load(assets.openFd("$padText11.ogg"), 1)
        } catch (e: Exception) {
            try {
                sound11 = soundPool.load(padText11, 1)
                binding.includeMainView11.textView.text = padText11.replaceBeforeLast("/", "").replace("/", "").replace(".ogg", "").uppercase()
                findViewById<View>(R.id.include_view11).findViewById<TextView>(R.id.padText).text = padText11.replaceBeforeLast("/", "").replace("/", "").replace(".ogg", "").uppercase()
            } catch (e: Exception) {
                sound11 = soundPool.load(assets.openFd("soundless.ogg"), 1)
                binding.includeMainView11.textView.text = ""
                findViewById<View>(R.id.include_view11).findViewById<TextView>(R.id.padText).text = ""
            }
        }
        try {
            sound12 = soundPool.load(assets.openFd("$padText12.ogg"), 1)
        } catch (e: Exception) {
            try {
                sound12 = soundPool.load(padText12, 1)
                binding.includeMainView12.textView.text = padText12.replaceBeforeLast("/", "").replace("/", "").replace(".ogg", "").uppercase()
                findViewById<View>(R.id.include_view12).findViewById<TextView>(R.id.padText).text = padText12.replaceBeforeLast("/", "").replace("/", "").replace(".ogg", "").uppercase()
            } catch (e: Exception) {
                sound12 = soundPool.load(assets.openFd("soundless.ogg"), 1)
                binding.includeMainView12.textView.text = ""
                findViewById<View>(R.id.include_view12).findViewById<TextView>(R.id.padText).text = ""
            }
        }
        try {
            sound13 = soundPool.load(assets.openFd("$padText13.ogg"), 1)
        } catch (e: Exception) {
            try {
                sound13 = soundPool.load(padText13, 1)
                binding.includeMainView13.textView.text = padText13.replaceBeforeLast("/", "").replace("/", "").replace(".ogg", "").uppercase()
                findViewById<View>(R.id.include_view13).findViewById<TextView>(R.id.padText).text = padText13.replaceBeforeLast("/", "").replace("/", "").replace(".ogg", "").uppercase()
            } catch (e: Exception) {
                sound13 = soundPool.load(assets.openFd("soundless.ogg"), 1)
                binding.includeMainView13.textView.text = ""
                findViewById<View>(R.id.include_view13).findViewById<TextView>(R.id.padText).text = ""
            }
        }
        try {
            sound14 = soundPool.load(assets.openFd("$padText14.ogg"), 1)
        } catch (e: Exception) {
            try {
                sound14 = soundPool.load(padText14, 1)
                binding.includeMainView14.textView.text = padText14.replaceBeforeLast("/", "").replace("/", "").replace(".ogg", "").uppercase()
                findViewById<View>(R.id.include_view14).findViewById<TextView>(R.id.padText).text = padText14.replaceBeforeLast("/", "").replace("/", "").replace(".ogg", "").uppercase()
            } catch (e: Exception) {
                sound14 = soundPool.load(assets.openFd("soundless.ogg"), 1)
                binding.includeMainView14.textView.text = ""
                findViewById<View>(R.id.include_view14).findViewById<TextView>(R.id.padText).text = ""
            }
        }
        try {
            sound15 = soundPool.load(assets.openFd("$padText15.ogg"), 1)
        } catch (e: Exception) {
            try {
                sound15 = soundPool.load(padText15, 1)
                binding.includeMainView15.textView.text = padText15.replaceBeforeLast("/", "").replace("/", "").replace(".ogg", "").uppercase()
                findViewById<View>(R.id.include_view15).findViewById<TextView>(R.id.padText).text = padText15.replaceBeforeLast("/", "").replace("/", "").replace(".ogg", "").uppercase()
            } catch (e: Exception) {
                sound15 = soundPool.load(assets.openFd("soundless.ogg"), 1)
                binding.includeMainView15.textView.text = ""
                findViewById<View>(R.id.include_view15).findViewById<TextView>(R.id.padText).text = ""
            }
        }
    }
}
